<?xml version="1.0" encoding="UTF-8"?>
<System>
   <enumeration id="d1e472">
      <enum description="Disabled. Asynchronous APB bridge is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Asynchronous APB bridge is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e1320">
      <enum description="No POR detected" name="NO_POR_DETECTED" value="0"/>
      <enum description="POR detected. Writing a one clears this reset."
            name="POR_DETECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e1366">
      <enum description="No reset event detected." name="NO_RESET_DETECTED" value="0"/>
      <enum description="Reset detected. Writing a one clears this reset."
            name="RESET_DETECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e1412">
      <enum description="No WDT reset detected" name="NO_WDT_RESET_DETECTED" value="0"/>
      <enum description="WDT reset detected. Writing a one clears this reset."
            name="WDT_RESET_DETECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e1458">
      <enum description="No BOD reset detected" name="NO_BOD_RESET_DETECTED" value="0"/>
      <enum description="BOD reset detected. Writing a one clears this reset."
            name="BOD_RESET_DETECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e1504">
      <enum description="No System reset detected" name="NO_SYSTEM_RESET_DETECTED"
            value="0"/>
      <enum description="System reset detected. Writing a one clears this reset."
            name="SYSTEM_RESET_DETECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e2336">
      <enum description="FRO 12 MHz (fro_12m)" name="FRO_12_MHZ" value="0"/>
      <enum description="CLKIN (clk_in)" name="CLKIN" value="0x1"/>
      <enum description="Watchdog oscillator (wdt_clk)" name="WATCHDOG_OSCILLATOR"
            value="0x2"/>
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0x3"/>
   </enumeration>
   <enumeration id="d1e2435">
      <enum description="MAINCLKSELA. Use the clock source selected in MAINCLKSELA register."
            name="MAINCLKSELA"
            value="0"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x2"/>
      <enum description="RTC oscillator 32 kHz output (32k_clk)" name="RTC_OSC_OUTPUT"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e2521">
      <enum description="Main clock (main_clk)" name="MAIN_CLOCK" value="0"/>
      <enum description="CLKIN (clk_in)" name="CLKIN" value="0x1"/>
      <enum description="Watchdog oscillator (wdt_clk)" name="WATCHDOG_OSCILLATOR"
            value="0x2"/>
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0x3"/>
      <enum description="PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x4"/>
      <enum description="FRO 12 MHz (fro_12m)" name="FRO_12_MHZ" value="0x5"/>
      <enum description="RTC oscillator 32 kHz output (32k_clk)" name="RTC_OSC_OUTPUT"
            value="0x6"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e2668">
      <enum description="FRO 12 MHz (fro_12m)" name="FRO_12_MHZ" value="0"/>
      <enum description="CLKIN (clk_in)" name="CLKIN" value="0x1"/>
      <enum description="Watchdog oscillator (wdt_clk)" name="WATCHDOG_OSCILLATOR"
            value="0x2"/>
      <enum description="RTC 32 kHz clock (32k_clk)" name="RTC_32_KHZ_CLOCK" value="0x3"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e2778">
      <enum description="Main clock (main_clk)" name="MAIN_CLOCK" value="0"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x1"/>
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0x3"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e2876">
      <enum description="Main clock (main_clk)" name="MAIN_CLOCK" value="0"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x1"/>
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0x2"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e2974">
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x1"/>
      <enum description="Main clock (main_clk)" name="MAIN_CLOCK" value="0x2"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e3079">
      <enum description="FRO 12 MHz (fro_12m)" name="FRO_12_MHZ" value="0"/>
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0x1"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x2"/>
      <enum description="MCLK pin input, when selected in IOCON (mclk_in)"
            name="MCLK_INPUT"
            value="0x3"/>
      <enum description="FRG clock, the output of the fractional rate generator (frg_clk)"
            name="FRG_CLOCK_OUTPUT"
            value="0x4"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e3202">
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x1"/>
      <enum description="Main clock (main_clk)" name="MAIN_CLOCK" value="0x2"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e3300">
      <enum description="Main clock (main_clk)" name="MAIN_CLOCK" value="0"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x1"/>
      <enum description="FRO 12 MHz (fro_12m)" name="FRO_12_MHZ" value="0x2"/>
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0x3"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e3410">
      <enum description="FRO 12 MHz (fro_12m)" name="FRO_12_MHZ" value="0"/>
      <enum description="FRO 96 or 48 MHz (fro_hf)" name="FRO_HF" value="0x1"/>
      <enum description="System PLL output (pll_clk)" name="SYSTEM_PLL_OUTPUT" value="0x2"/>
      <enum description="MCLK pin input, when selected in IOCON (mclk_in)"
            name="MCLK_INPUT"
            value="0x3"/>
      <enum description="Main clock (main_clk)" name="MAIN_CLOCK" value="0x4"/>
      <enum description="Watchdog oscillator (wdt_clk)" name="WATCHDOG_OSCILLATOR"
            value="0x5"/>
      <enum description="None, this may be selected in order to reduce power when no output is needed."
            name="NONE"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e4349">
      <enum description="Instruction fetches from flash are not buffered. Every fetch request from the CPU results in a read of the flash memory. This setting may use significantly more power than when buffering is enabled."
            name="NO_BUFFER"
            value="0"/>
      <enum description="One buffer is used for all instruction fetches." name="ONE_BUFFER"
            value="0x1"/>
      <enum description="All buffers may be used for instruction fetches."
            name="ALL_BUFFERS"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e4407">
      <enum description="Data accesses from flash are not buffered. Every data access from the CPU results in a read of the flash memory."
            name="NOT_BUFFERED"
            value="0"/>
      <enum description="One buffer is used for all data accesses." name="ONE_BUFFER"
            value="0x1"/>
      <enum description="All buffers may be used for data accesses." name="ALL_BUFFERS"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e4465">
      <enum description="Flash acceleration is disabled. Every flash read (including those fulfilled from a buffer) takes FLASHTIM + 1 system clocks. This allows more determinism at a cost of performance."
            name="DISABLED"
            value="0"/>
      <enum description="Flash acceleration is enabled. Performance is enhanced, dependent on other FLASHCFG settings."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e4511">
      <enum description="No instruction prefetch is performed." name="NO_PREFETCH"
            value="0"/>
      <enum description="If the FETCHCFG field is not 0, the next flash line following the current execution address is automatically prefetched if it is not already buffered."
            name="PREFETCH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e4557">
      <enum description="Any previously initiated prefetch will be completed."
            name="PREFETCH_COMPLETED"
            value="0"/>
      <enum description="Any previously initiated prefetch will be aborted, and the next flash line following the current execution address will be prefetched if not already buffered."
            name="PREFETCH_ABORT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e4604">
      <enum description="1 system clock flash access time (for system clock rates up to 12 MHz)."
            name="N_1_CLOCK_CYCLE"
            value="0"/>
      <enum description="2 system clocks flash access time (for system clock rates up to 30 MHz)."
            name="N_2_CLOCK_CYCLES"
            value="0x1"/>
      <enum description="3 system clocks flash access time (for system clock rates up to 60 MHz)."
            name="N_3_CLOCK_CYCLES"
            value="0x2"/>
      <enum description="4 system clocks flash access time (for system clock rates up to 85 MHz)."
            name="N_4_CLOCK_CYCLES"
            value="0x3"/>
      <enum description="5 system clocks flash access time (for system clock rates up to 100 MHz)."
            name="N_5_CLOCK_CYCLES"
            value="0x4"/>
   </enumeration>
   <enumeration id="d1e4714">
      <enum description="Falling edge of the USB_NEED_CLK triggers the USB wake-up (default)."
            name="FALLING_EDGE"
            value="0"/>
      <enum description="Rising edge of the USB_NEED_CLK triggers the USB wake-up."
            name="RISING_EDGE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e4788">
      <enum description="Low" name="LOW" value="0"/>
      <enum description="High" name="HIGH" value="0x1"/>
   </enumeration>
   <enumeration id="d1e4927">
      <enum description="The MCLK function is an input." name="INPUT" value="0"/>
      <enum description="The MCLK function is an output." name="OUTPUT" value="0x1"/>
   </enumeration>
   <enumeration id="d1e5019">
      <enum description="48 MHz" name="FRQ_48_MHZ" value="0"/>
      <enum description="96 MHz" name="FRQ_96_MHZ" value="0x1"/>
   </enumeration>
   <enumeration id="d1e5083">
      <enum description="Normal operation." name="NORMAL" value="0"/>
      <enum description="Automatic USB rate adjustment mode. If the USB FS device peripheral is enabled and connected to a USB host, it provides clock adjustment information to the FRO based on SOF packets. USB rate adjustment requires a number of cycles to take place. the USBMODCHG bit (see below) indicates when initial adjustment is complete, and when later adjustments are in progress. software must not alter TRIM and FREQTRIM while USBCLKADJ = 1. see USBCLKADJ usage notes below this table."
            name="AUTO_USB_ADJUST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e5148">
      <enum description="The high-speed FRO output is disabled." name="DISABLED" value="0"/>
      <enum description="The selected high-speed FRO output (48 MHz or 96 MHz) is enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e5304">
      <enum description="Disabled. RTC clock off." name="DISABLED" value="0"/>
      <enum description="Enabled. RTC clock on." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e5432">
      <enum description="Bypass disabled. PLL CCO is sent to the PLL post-dividers."
            name="DISABLED"
            value="0"/>
      <enum description="Bypass enabled. PLL input clock is sent directly to the PLL output (default)."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e5478">
      <enum description="Divide by 2. The CCO feedback clock is divided by 2 in addition to the programmed M divide."
            name="DIVIDE_BY_2"
            value="0"/>
      <enum description="Bypass. The CCO feedback clock is divided only by the programmed M divide."
            name="BYPASS"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e5525">
      <enum description="Normal mode." name="NORMAL" value="0"/>
      <enum description="Upper frequency limiter disabled." name="DISABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e5571">
      <enum description="SSCG control. The PLL filter uses the parameters derived from the spread spectrum controller."
            name="SSCG_CONTROL"
            value="0"/>
      <enum description="MDEC control. The PLL filter uses the programmable fields SELP, SELR, and SELI in this register to control the filter constants."
            name="MDEC_CONTROL"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e5617">
      <enum description="Disabled. The PLL input divider (N divider) output is used to drive the PLL CCO."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The PLL input divider (N divider) is bypassed. the PLL input clock is used directly to drive the PLL CCO input."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e5663">
      <enum description="Disabled. The PLL output divider (P divider) is used to create the PLL output."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The PLL output divider (P divider) is bypassed, the PLL CCO output is used as the PLL output."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e6085">
      <enum description="Enabled. Spread spectrum controller is enabled" name="ENABLED"
            value="0"/>
      <enum description="Disabled. Spread spectrum controller is disabled." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e6131">
      <enum description="Fixed. Fixed modulation frequency." name="FIXED" value="0"/>
      <enum description="Dither. Randomly dither between two modulation frequencies."
            name="DITHER"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e7732">
      <enum description="M0+. Cortex-M0+ is the master CPU." name="M0PL" value="0"/>
      <enum description="M4. Cortex-M4 is the master CPU." name="M4" value="0x1"/>
   </enumeration>
   <enumeration id="d1e7778">
      <enum description="Disabled. The Cortex-M4 clock is not enabled" name="DISABLED"
            value="0"/>
      <enum description="Enabled. The Cortex-M4 clock is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e7824">
      <enum description="Disabled. The Cortex-M0+ clock is not enabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The Cortex-M0+ clock is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e7870">
      <enum description="Disabled. The Cortex-M4 is not being reset." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The Cortex-M4 is being reset." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e7916">
      <enum description="Disabled. The Cortex-M0+ is not being reset." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The Cortex-M0+ is being reset." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e7963">
      <enum description="M0+. Cortex-M0+ is the owner of reduced power mode control."
            name="M0PL"
            value="0"/>
      <enum description="M4. Cortex-M4 is the owner of reduced power mode control."
            name="M4"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e8450">
      <enum description="Level 0: 1.5 V" name="LEVEL0" value="0"/>
      <enum description="Level 1: 1.85 V" name="LEVEL1" value="0x1"/>
      <enum description="Level 2: 2.0 V" name="LEVEL2" value="0x2"/>
      <enum description="Level 3: 2.3 V" name="LEVEL3" value="0x3"/>
   </enumeration>
   <enumeration id="d1e8520">
      <enum description="Disable reset function." name="DISABLE" value="0"/>
      <enum description="Enable reset function." name="ENABLE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e8566">
      <enum description="Level 0: 2.05 V" name="LEVEL0" value="0"/>
      <enum description="Level 1: 2.45 V" name="LEVEL1" value="0x1"/>
      <enum description="Level 2: 2.75 V" name="LEVEL2" value="0x2"/>
      <enum description="Level 3: 3.05 V" name="LEVEL3" value="0x3"/>
   </enumeration>
   <enumeration id="d1e8636">
      <enum description="Disable interrupt function." name="DISABLE" value="0"/>
      <enum description="Enable interrupt function." name="ENABLE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e8778">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e8897">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e8967">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e9013">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e9059">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e9106">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e9152">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e9226">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e9345">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e9415">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e9461">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e9507">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e9554">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e9600">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e9674">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e9793">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e9863">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e9909">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e9955">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10002">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10048">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10122">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e10241">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e10311">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e10357">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e10403">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10450">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10496">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10570">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e10689">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e10759">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e10805">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e10851">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10898">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e10944">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e11019">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e11138">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e11208">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e11254">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e11300">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e11347">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e11393">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e11467">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e11586">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e11656">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e11702">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e11748">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e11795">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e11841">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e11915">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e12034">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e12104">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e12150">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e12196">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e12243">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e12289">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e12363">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e12482">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e12552">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e12598">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e12644">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e12691">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e12737">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e12811">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e12930">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e13000">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e13046">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e13092">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e13139">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e13185">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e13259">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e13378">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e13448">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e13494">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e13540">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e13587">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e13633">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e13708">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e13827">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e13897">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e13943">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e13989">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14036">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14082">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14156">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e14275">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e14345">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e14391">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e14437">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14484">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14530">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14604">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e14723">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e14793">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e14839">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e14885">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14932">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e14978">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e15052">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e15171">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e15241">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e15287">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e15333">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e15380">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e15426">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e15500">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e15619">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e15689">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e15735">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e15781">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e15828">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e15874">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e15948">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e16067">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e16137">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e16183">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e16229">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e16276">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e16322">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e16397">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e16516">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e16586">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e16632">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e16678">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e16725">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e16771">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e16845">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e16964">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e17034">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e17080">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e17126">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e17173">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e17219">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e17293">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e17412">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e17482">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e17528">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e17574">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e17621">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e17667">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e17741">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e17860">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e17930">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e17976">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e18022">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e18069">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e18115">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e18189">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e18308">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e18378">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e18424">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e18470">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e18517">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e18563">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e18637">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e18756">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e18826">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e18872">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e18918">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e18965">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19011">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19086">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e19205">
      <enum description="I2C mode." name="I2C_MODE" value="0"/>
      <enum description="GPIO mode." name="GPIO_MODE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e19251">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e19297">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e19343">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19390">
      <enum description="Low drive. Output drive sink is 4 mA. This is sufficient for standard and fast mode I2C."
            name="LOW"
            value="0"/>
      <enum description="High drive. Output drive sink is 20 mA. This is needed for Fast Mode Plus I 2C. Refer to the appropriate specific device data sheet for details."
            name="HIGH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19436">
      <enum description="Enabled. I2C 50 ns glitch filter enabled." name="ENABLED"
            value="0"/>
      <enum description="Disabled. I2C 50 ns glitch filter disabled." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19510">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e19629">
      <enum description="I2C mode." name="I2C_MODE" value="0"/>
      <enum description="GPIO mode." name="GPIO_MODE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e19675">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e19721">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e19767">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19814">
      <enum description="Low drive. Output drive sink is 4 mA. This is sufficient for standard and fast mode I2C."
            name="LOW"
            value="0"/>
      <enum description="High drive. Output drive sink is 20 mA. This is needed for Fast Mode Plus I 2C. Refer to the appropriate specific device data sheet for details."
            name="HIGH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19860">
      <enum description="Enabled. I2C 50 ns glitch filter enabled." name="ENABLED"
            value="0"/>
      <enum description="Disabled. I2C 50 ns glitch filter disabled." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e19934">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e20053">
      <enum description="I2C mode." name="I2C_MODE" value="0"/>
      <enum description="GPIO mode." name="GPIO_MODE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e20099">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e20145">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e20191">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e20238">
      <enum description="Low drive. Output drive sink is 4 mA. This is sufficient for standard and fast mode I2C."
            name="LOW"
            value="0"/>
      <enum description="High drive. Output drive sink is 20 mA. This is needed for Fast Mode Plus I 2C. Refer to the appropriate specific device data sheet for details."
            name="HIGH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e20284">
      <enum description="Enabled. I2C 50 ns glitch filter enabled." name="ENABLED"
            value="0"/>
      <enum description="Disabled. I2C 50 ns glitch filter disabled." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e20358">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e20477">
      <enum description="I2C mode." name="I2C_MODE" value="0"/>
      <enum description="GPIO mode." name="GPIO_MODE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e20523">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e20569">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e20615">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e20662">
      <enum description="Low drive. Output drive sink is 4 mA. This is sufficient for standard and fast mode I2C."
            name="LOW"
            value="0"/>
      <enum description="High drive. Output drive sink is 20 mA. This is needed for Fast Mode Plus I 2C. Refer to the appropriate specific device data sheet for details."
            name="HIGH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e20708">
      <enum description="Enabled. I2C 50 ns glitch filter enabled." name="ENABLED"
            value="0"/>
      <enum description="Disabled. I2C 50 ns glitch filter disabled." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e20782">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e20901">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e20971">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e21017">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e21063">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e21110">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e21156">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e21230">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e21349">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e21419">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e21465">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e21511">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e21558">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e21604">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e21679">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e21798">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e21868">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e21914">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e21960">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e22007">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e22081">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e22200">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e22270">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e22316">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e22362">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e22409">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e22483">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e22602">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e22672">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e22718">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e22764">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e22811">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e22885">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e23004">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e23074">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e23120">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e23166">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e23213">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e23287">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e23406">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e23476">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e23522">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e23568">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e23615">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e23689">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e23808">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e23878">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e23924">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e23970">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e24017">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e24092">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e24211">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e24281">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e24327">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e24373">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e24420">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e24494">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e24613">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e24683">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e24729">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e24775">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e24822">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e24896">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e25015">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e25085">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e25131">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e25177">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e25224">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e25298">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e25417">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e25487">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e25533">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e25579">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e25626">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e25700">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e25819">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e25889">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e25935">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e25981">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e26028">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e26102">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e26221">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e26291">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e26337">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e26383">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e26430">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e26505">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e26624">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e26694">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e26740">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e26786">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e26833">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e26879">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e26953">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e27072">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e27142">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e27188">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e27234">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e27281">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e27327">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e27401">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e27520">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e27590">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e27636">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e27682">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e27729">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e27775">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e27849">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e27968">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e28038">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e28084">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e28130">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e28177">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e28223">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e28297">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e28416">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e28486">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e28532">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e28578">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e28625">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e28671">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e28745">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e28864">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e28934">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e28980">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e29026">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e29073">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e29119">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e29194">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e29313">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e29383">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e29429">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e29475">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e29522">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e29568">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e29642">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e29761">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e29831">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e29877">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e29923">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e29970">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30016">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30090">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e30209">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e30279">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e30325">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e30371">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30418">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30464">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30538">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e30657">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e30727">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e30773">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e30819">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30866">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30912">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e30986">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e31105">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e31175">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e31221">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e31267">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e31314">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e31360">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e31434">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e31553">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e31623">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e31669">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e31715">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e31762">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e31808">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e31883">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e32002">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e32072">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e32118">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e32164">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e32211">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e32257">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e32331">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e32450">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e32520">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e32566">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e32612">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e32659">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e32705">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e32779">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e32898">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e32968">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e33014">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e33060">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e33107">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e33153">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e33227">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e33346">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e33416">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e33462">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e33508">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e33555">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e33601">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e33675">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e33794">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e33864">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e33910">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e33956">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34003">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34049">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34123">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e34242">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e34312">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e34358">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e34404">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34451">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34497">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34572">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e34691">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e34761">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e34807">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e34853">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34900">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e34946">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e35020">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e35139">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e35209">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e35255">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e35301">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e35348">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e35394">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e35468">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e35587">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e35657">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e35703">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e35749">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e35796">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e35842">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e35916">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e36035">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e36105">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e36151">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e36197">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36244">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36290">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36364">
      <enum description="Alternative connection 0." name="ALT0" value="0"/>
      <enum description="Alternative connection 1." name="ALT1" value="0x1"/>
      <enum description="Alternative connection 2." name="ALT2" value="0x2"/>
      <enum description="Alternative connection 3." name="ALT3" value="0x3"/>
      <enum description="Alternative connection 4." name="ALT4" value="0x4"/>
      <enum description="Alternative connection 5." name="ALT5" value="0x5"/>
      <enum description="Alternative connection 6." name="ALT6" value="0x6"/>
      <enum description="Alternative connection 7." name="ALT7" value="0x7"/>
   </enumeration>
   <enumeration id="d1e36483">
      <enum description="Inactive. Inactive (no pull-down/pull-up resistor enabled)."
            name="INACTIVE"
            value="0"/>
      <enum description="Pull-down. Pull-down resistor enabled." name="PULL_DOWN"
            value="0x1"/>
      <enum description="Pull-up. Pull-up resistor enabled." name="PULL_UP" value="0x2"/>
      <enum description="Repeater. Repeater mode." name="REPEATER" value="0x3"/>
   </enumeration>
   <enumeration id="d1e36553">
      <enum description="Disabled. Input function is not inverted." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Input is function inverted." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e36599">
      <enum description="Analog mode." name="ANALOG" value="0"/>
      <enum description="Digital mode." name="DIGITAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e36645">
      <enum description="Filter enabled. Noise pulses below approximately 10 ns are filtered out."
            name="ENABLED"
            value="0"/>
      <enum description="Filter disabled. No input filtering is done." name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36692">
      <enum description="Standard mode, output slew rate control is enabled. More outputs can be switched simultaneously."
            name="STANDARD"
            value="0"/>
      <enum description="Fast mode, slew rate control is disabled. Refer to the appropriate specific device data sheet for details."
            name="FAST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36738">
      <enum description="Normal. Normal push-pull output" name="NORMAL" value="0"/>
      <enum description="Open-drain. Simulated open-drain output (high drive disabled)."
            name="OPEN_DRAIN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36855">
      <enum description="No request. No interrupt request is pending." name="NO_REQUEST"
            value="0"/>
      <enum description="Request active. Interrupt request is active."
            name="REQUEST_ACTIVE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36901">
      <enum description="Or. OR functionality: A grouped interrupt is generated when any one of the enabled inputs is active (based on its programmed polarity)."
            name="OR"
            value="0"/>
      <enum description="And. AND functionality: An interrupt is generated when all enabled bits are active (based on their programmed polarity)."
            name="AND"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e36947">
      <enum description="Edge-triggered." name="EDGE_TRIGGERED" value="0"/>
      <enum description="Level-triggered." name="LEVEL_TRIGGERED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e37690">
      <enum description="Pin interrupt. Interrupts are driven in response to the standard pin interrupt function."
            name="PIN_INTERRUPT"
            value="0"/>
      <enum description="Pattern match. Interrupts are driven in response to pattern matches."
            name="PATTERN_MATCH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e37736">
      <enum description="Disabled. RXEV output to the CPU is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. RXEV output to the CPU is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e37829">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 0."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 0."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 0."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 0."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 0."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 0."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 0."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 0."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e37948">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 1."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 1."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 1."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 1."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 1."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 1."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 1."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 1."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e38067">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 2."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 2."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 2."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 2."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 2."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 2."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 2."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 2."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e38186">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 3."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 3."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 3."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 3."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 3."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 3."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 3."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 3."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e38305">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 4."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 4."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 4."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 4."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 4."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 4."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 4."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 4."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e38425">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 5."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 5."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 5."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 5."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 5."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 5."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 5."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 5."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e38544">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 6."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 6."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 6."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 6."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 6."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 6."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 6."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 6."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e38663">
      <enum description="Input 0. Selects the pin selected in the PINTSEL0 register as the source to bit slice 7."
            name="INPUT0"
            value="0"/>
      <enum description="Input 1. Selects the pin selected in the PINTSEL1 register as the source to bit slice 7."
            name="INPUT1"
            value="0x1"/>
      <enum description="Input 2. Selects the pin selected in the PINTSEL2 register as the source to bit slice 7."
            name="INPUT2"
            value="0x2"/>
      <enum description="Input 3. Selects the pin selected in the PINTSEL3 register as the source to bit slice 7."
            name="INPUT3"
            value="0x3"/>
      <enum description="Input 4. Selects the pin selected in the PINTSEL4 register as the source to bit slice 7."
            name="INPUT4"
            value="0x4"/>
      <enum description="Input 5. Selects the pin selected in the PINTSEL5 register as the source to bit slice 7."
            name="INPUT5"
            value="0x5"/>
      <enum description="Input 6. Selects the pin selected in the PINTSEL6 register as the source to bit slice 7."
            name="INPUT6"
            value="0x6"/>
      <enum description="Input 7. Selects the pin selected in the PINTSEL7 register as the source to bit slice 7."
            name="INPUT7"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e38810">
      <enum description="No effect. Slice 0 is not an endpoint." name="NO_EFFECT" value="0"/>
      <enum description="endpoint. Slice 0 is the endpoint of a product term (minterm). Pin interrupt 0 in the NVIC is raised if the minterm evaluates as true."
            name="ENDPOINT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e38856">
      <enum description="No effect. Slice 1 is not an endpoint." name="NO_EFFECT" value="0"/>
      <enum description="endpoint. Slice 1 is the endpoint of a product term (minterm). Pin interrupt 1 in the NVIC is raised if the minterm evaluates as true."
            name="ENDPOINT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e38902">
      <enum description="No effect. Slice 2 is not an endpoint." name="NO_EFFECT" value="0"/>
      <enum description="endpoint. Slice 2 is the endpoint of a product term (minterm). Pin interrupt 2 in the NVIC is raised if the minterm evaluates as true."
            name="ENDPOINT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e38948">
      <enum description="No effect. Slice 3 is not an endpoint." name="NO_EFFECT" value="0"/>
      <enum description="endpoint. Slice 3 is the endpoint of a product term (minterm). Pin interrupt 3 in the NVIC is raised if the minterm evaluates as true."
            name="ENDPOINT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e38994">
      <enum description="No effect. Slice 4 is not an endpoint." name="NO_EFFECT" value="0"/>
      <enum description="endpoint. Slice 4 is the endpoint of a product term (minterm). Pin interrupt 4 in the NVIC is raised if the minterm evaluates as true."
            name="ENDPOINT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e39041">
      <enum description="No effect. Slice 5 is not an endpoint." name="NO_EFFECT" value="0"/>
      <enum description="endpoint. Slice 5 is the endpoint of a product term (minterm). Pin interrupt 5 in the NVIC is raised if the minterm evaluates as true."
            name="ENDPOINT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e39087">
      <enum description="No effect. Slice 6 is not an endpoint." name="NO_EFFECT" value="0"/>
      <enum description="endpoint. Slice 6 is the endpoint of a product term (minterm). Pin interrupt 6 in the NVIC is raised if the minterm evaluates as true."
            name="ENDPOINT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e39133">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e39252">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e39371">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e39490">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e39610">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e39729">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e39848">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e39967">
      <enum description="Constant HIGH. This bit slice always contributes to a product term match."
            name="CONSTANT_HIGH"
            value="0"/>
      <enum description="Sticky rising edge. Match occurs if a rising edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_EDGE"
            value="0x1"/>
      <enum description="Sticky falling edge. Match occurs if a falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_FALLING_EDGE"
            value="0x2"/>
      <enum description="Sticky rising or falling edge. Match occurs if either a rising or falling edge on the specified input has occurred since the last time the edge detection for this bit slice was cleared. This bit is only cleared when the PMCFG or the PMSRC registers are written to."
            name="STICKY_RISING_FALLING_EDGE"
            value="0x3"/>
      <enum description="High level. Match (for this bit slice) occurs when there is a high level on the input specified for this bit slice in the PMSRC register."
            name="HIGH_LEVEL"
            value="0x4"/>
      <enum description="Low level. Match occurs when there is a low level on the specified input."
            name="LOW_LEVEL"
            value="0x5"/>
      <enum description="Constant 0. This bit slice never contributes to a match (should be used to disable any unused bit slices)."
            name="CONSTANT_ZERO"
            value="0x6"/>
      <enum description="Event. Non-sticky rising or falling edge. Match occurs on an event - i.e. when either a rising or falling edge is first detected on the specified input (this is a non-sticky version of value 0x3) . This bit is cleared after one clock cycle."
            name="EVENT"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e40610">
      <enum description="Disabled.The counters are disabled." name="DISABLED" value="0"/>
      <enum description="Enabled. The Timer Counter and Prescale Counter are enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e40656">
      <enum description="Disabled. Do nothing." name="DISABLED" value="0"/>
      <enum description="Enabled. The Timer Counter and the Prescale Counter are synchronously reset on the next positive edge of the APB bus clock. The counters remain reset until TCR[1] is returned to zero."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e41537">
      <enum description="Do Nothing." name="DO_NOTHING" value="0"/>
      <enum description="Clear. Clear the corresponding External Match bit/output to 0 (MAT0 pin is LOW if pinned out)."
            name="CLEAR"
            value="0x1"/>
      <enum description="Set. Set the corresponding External Match bit/output to 1 (MAT0 pin is HIGH if pinned out)."
            name="SET"
            value="0x2"/>
      <enum description="Toggle. Toggle the corresponding External Match bit/output."
            name="TOGGLE"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e41608">
      <enum description="Do Nothing." name="DO_NOTHING" value="0"/>
      <enum description="Clear. Clear the corresponding External Match bit/output to 0 (MAT1 pin is LOW if pinned out)."
            name="CLEAR"
            value="0x1"/>
      <enum description="Set. Set the corresponding External Match bit/output to 1 (MAT1 pin is HIGH if pinned out)."
            name="SET"
            value="0x2"/>
      <enum description="Toggle. Toggle the corresponding External Match bit/output."
            name="TOGGLE"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e41678">
      <enum description="Do Nothing." name="DO_NOTHING" value="0"/>
      <enum description="Clear. Clear the corresponding External Match bit/output to 0 (MAT2 pin is LOW if pinned out)."
            name="CLEAR"
            value="0x1"/>
      <enum description="Set. Set the corresponding External Match bit/output to 1 (MAT2 pin is HIGH if pinned out)."
            name="SET"
            value="0x2"/>
      <enum description="Toggle. Toggle the corresponding External Match bit/output."
            name="TOGGLE"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e41748">
      <enum description="Do Nothing." name="DO_NOTHING" value="0"/>
      <enum description="Clear. Clear the corresponding External Match bit/output to 0 (MAT3 pin is LOW if pinned out)."
            name="CLEAR"
            value="0x1"/>
      <enum description="Set. Set the corresponding External Match bit/output to 1 (MAT3 pin is HIGH if pinned out)."
            name="SET"
            value="0x2"/>
      <enum description="Toggle. Toggle the corresponding External Match bit/output."
            name="TOGGLE"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e41846">
      <enum description="Timer Mode. Incremented every rising APB bus clock edge."
            name="TIMER"
            value="0"/>
      <enum description="Counter Mode rising edge. TC is incremented on rising edges on the CAP input selected by bits 3:2."
            name="COUNTER_RISING_EDGE"
            value="0x1"/>
      <enum description="Counter Mode falling edge. TC is incremented on falling edges on the CAP input selected by bits 3:2."
            name="COUNTER_FALLING_EDGE"
            value="0x2"/>
      <enum description="Counter Mode dual edge. TC is incremented on both edges on the CAP input selected by bits 3:2."
            name="COUNTER_DUAL_EDGE"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e41916">
      <enum description="Channel 0. CAPn.0 for CTIMERn" name="CHANNEL_0" value="0"/>
      <enum description="Channel 1. CAPn.1 for CTIMERn" name="CHANNEL_1" value="0x1"/>
      <enum description="Channel 2. CAPn.2 for CTIMERn" name="CHANNEL_2" value="0x2"/>
      <enum description="Channel 3. CAPn.3 for CTIMERn" name="CHANNEL_3" value="0x3"/>
   </enumeration>
   <enumeration id="d1e42004">
      <enum description="Channel 0 Rising Edge. Rising edge of the signal on capture channel 0 clears the timer (if bit 4 is set)."
            name="CHANNEL_0_RISING"
            value="0"/>
      <enum description="Channel 0 Falling Edge. Falling edge of the signal on capture channel 0 clears the timer (if bit 4 is set)."
            name="CHANNEL_0_FALLING"
            value="0x1"/>
      <enum description="Channel 1 Rising Edge. Rising edge of the signal on capture channel 1 clears the timer (if bit 4 is set)."
            name="CHANNEL_1_RISING"
            value="0x2"/>
      <enum description="Channel 1 Falling Edge. Falling edge of the signal on capture channel 1 clears the timer (if bit 4 is set)."
            name="CHANNEL_1_FALLING"
            value="0x3"/>
      <enum description="Channel 2 Rising Edge. Rising edge of the signal on capture channel 2 clears the timer (if bit 4 is set)."
            name="CHANNEL_2_RISING"
            value="0x4"/>
      <enum description="Channel 2 Falling Edge. Falling edge of the signal on capture channel 2 clears the timer (if bit 4 is set)."
            name="CHANNEL_2_FALLING"
            value="0x5"/>
   </enumeration>
   <enumeration id="d1e42128">
      <enum description="Match. CTIMERn_MAT0 is controlled by EM0." name="MATCH" value="0"/>
      <enum description="PWM. PWM mode is enabled for CTIMERn_MAT0." name="PWM" value="0x1"/>
   </enumeration>
   <enumeration id="d1e42174">
      <enum description="Match. CTIMERn_MAT01 is controlled by EM1." name="MATCH" value="0"/>
      <enum description="PWM. PWM mode is enabled for CTIMERn_MAT1." name="PWM" value="0x1"/>
   </enumeration>
   <enumeration id="d1e42220">
      <enum description="Match. CTIMERn_MAT2 is controlled by EM2." name="MATCH" value="0"/>
      <enum description="PWM. PWM mode is enabled for CTIMERn_MAT2." name="PWM" value="0x1"/>
   </enumeration>
   <enumeration id="d1e42266">
      <enum description="Match. CTIMERn_MAT3 is controlled by EM3." name="MATCH" value="0"/>
      <enum description="PWM. PWM mode is enabled for CT132Bn_MAT3." name="PWM" value="0x1"/>
   </enumeration>
   <enumeration id="d1e42509">
      <enum description="Stop. The watchdog timer is stopped." name="STOP" value="0"/>
      <enum description="Run. The watchdog timer is running." name="RUN" value="0x1"/>
   </enumeration>
   <enumeration id="d1e42555">
      <enum description="Interrupt. A watchdog time-out will not cause a chip reset."
            name="INTERRUPT"
            value="0"/>
      <enum description="Reset. A watchdog time-out will cause a chip reset." name="RESET"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e42637">
      <enum description="Flexible. The watchdog time-out value (TC) can be changed at any time."
            name="FLEXIBLE"
            value="0"/>
      <enum description="Threshold. The watchdog time-out value (TC) can be changed only after the counter is below the value of WDWARNINT and WDWINDOW."
            name="THRESHOLD"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e43037">
      <enum description="No force load. The load from the INTVALn register to the TIMERn register is processed at the end of the time interval if the repeat mode is selected."
            name="NO_FORCE_LOAD"
            value="0"/>
      <enum description="Force load. The INTVALn interval value IVALUE -1 is immediately loaded into the TIMERn register while TIMERn is running."
            name="FORCE_LOAD"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e43157">
      <enum description="Disabled. TIMERn interrupt is disabled." name="DISABLED" value="0"/>
      <enum description="Enabled. TIMERn interrupt is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e43203">
      <enum description="Repeat interrupt mode." name="REPEAT_INTERRUPT_MODE" value="0"/>
      <enum description="One-shot interrupt mode." name="ONE_SHOT_INTERRUPT_MODE"
            value="0x1"/>
      <enum description="One-shot stall mode." name="ONE_SHOT_STALL_MODE" value="0x2"/>
   </enumeration>
   <enumeration id="d1e43289">
      <enum description="No pending interrupt. Writing a zero is equivalent to no operation."
            name="NO_PENDING_INTERRUPT"
            value="0"/>
      <enum description="Pending interrupt. The interrupt is pending because TIMERn has reached the end of the time interval. If the INTEN bit in the CONTROLn is also set to 1, the interrupt for timer channel n and the global interrupt are raised. Writing a 1 to this bit clears the interrupt request."
            name="PENDING_INTERRUPT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e43335">
      <enum description="Idle state. TIMERn is stopped." name="IDLE_STATE" value="0"/>
      <enum description="Running. TIMERn is running." name="RUNNING" value="0x1"/>
   </enumeration>
   <enumeration id="d1e43381">
      <enum description="This channel is not in use." name="NO" value="0"/>
      <enum description="This channel is in use." name="YES" value="0x1"/>
   </enumeration>
   <enumeration id="d1e43492">
      <enum description="Hardware status mode. In this mode, the INUSE(n) flags for all channels are reset."
            name="HARDWARE_STATUS_MODE"
            value="0"/>
      <enum description="Multi-task mode." name="MULTI_TASK_MODE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e43612">
      <enum description="No pending interrupt. Writing a zero is equivalent to no operation."
            name="NO_PENDING_INTERRUPT"
            value="0"/>
      <enum description="Pending interrupt. The interrupt is pending because TIMER0 has reached the end of the time interval. If the INTEN bit in the CONTROL0 register is also set to 1, the interrupt for timer channel 0 and the global interrupt are raised. Writing a 1 to this bit clears the interrupt request."
            name="PENDING_INTERRUPT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e44291">
      <enum description="Not in reset. The RTC is not held in reset. This bit must be cleared prior to configuring or initiating any operation of the RTC."
            name="NOT_IN_RESET"
            value="0"/>
      <enum description="In reset. The RTC is held in reset. All register bits within the RTC will be forced to their reset value except the OFD bit. This bit must be cleared before writing to any register in the RTC - including writes to set any of the other bits within this register. Do not attempt to write to any bits of this register at the same time that the reset bit is being cleared."
            name="IN_RESET"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e44337">
      <enum description="No match. No match has occurred on the 1 Hz RTC timer. Writing a 0 has no effect."
            name="NO_MATCH"
            value="0"/>
      <enum description="Match. A match condition has occurred on the 1 Hz RTC timer. This flag generates an RTC alarm interrupt request RTC_ALARM which can also wake up the part from any low power mode. Writing a 1 clears this bit."
            name="MATCH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e44383">
      <enum description="Run. The RTC 1 kHz timer is running. Writing a 0 has no effect."
            name="RUN"
            value="0"/>
      <enum description="Time-out. The 1 kHz high-resolution/wake-up timer has timed out. This flag generates an RTC wake-up interrupt request RTC-WAKE which can also wake up the part from any low power mode. Writing a 1 clears this bit."
            name="TIMEOUT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e44429">
      <enum description="Disable. A match on the 1 Hz RTC timer will not bring the part out of Deep power-down mode."
            name="DISABLE"
            value="0"/>
      <enum description="Enable. A match on the 1 Hz RTC timer bring the part out of Deep power-down mode."
            name="ENABLE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e44475">
      <enum description="Disable. A match on the 1 kHz RTC timer will not bring the part out of Deep power-down mode."
            name="DISABLE"
            value="0"/>
      <enum description="Enable. A match on the 1 kHz RTC timer bring the part out of Deep power-down mode."
            name="ENABLE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e44522">
      <enum description="Disable. A match on the 1 kHz RTC timer will not bring the part out of Deep power-down mode."
            name="DISABLE"
            value="0"/>
      <enum description="Enable. The 1 kHz RTC timer is enabled." name="ENABLE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e44568">
      <enum description="Disable. The RTC 1 Hz and 1 kHz clocks are shut down and the RTC operation is disabled. This bit should be 0 when writing to load a value in the RTC counter register."
            name="DISABLE"
            value="0"/>
      <enum description="Enable. The 1 Hz RTC clock is running and RTC operation is enabled. This bit must be set to initiate operation of the RTC. The first clock to the RTC counter occurs 1 s after this bit is set. To also enable the high-resolution, 1 kHz clock, set bit 6 in this register."
            name="ENABLE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e44614">
      <enum description="See RTC_OSC_BYPASS" name="POWER_UP" value="0"/>
      <enum description="RTC oscillator is powered-down." name="POWERED_DOWN" value="0x1"/>
   </enumeration>
   <enumeration id="d1e44660">
      <enum description="RTC oscillator is in normal crystal oscillation mode."
            name="NORMAL"
            value="0"/>
      <enum description="RTC oscillator is bypassed. RTCXIN may be driven by an external clock."
            name="BYPASSED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e45216">
      <enum description="Main clock" name="MAIN_CLOCK" value="0"/>
      <enum description="FRO 12 MHz" name="FRO_12_MHZ" value="0x1"/>
   </enumeration>
   <enumeration id="d1e45393">
      <enum description="SCK LOW. The SPIFI drives SCK low after the rising edge at which the last bit of each command is captured, and keeps it low while CS is HIGH."
            name="SCK_LOW"
            value="0"/>
      <enum description="SCK HIGH. the SPIFI keeps SCK high after the rising edge for the last bit of each command and while CS is HIGH, and drives it low after it drives CS LOW. (Known serial flash devices can handle either mode, but some devices may require a particular mode for proper operation.) MODE3, RFCLK, and FBCLK should not all be 1, because in this case there is no final falling edge on SCK on which to sample the last data bit of the frame."
            name="SCK_HIGH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e45440">
      <enum description="Enable. Cache prefetching enabled." name="ENABLE" value="0"/>
      <enum description="Disable. Disables prefetching of cache lines." name="DISABLE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e45486">
      <enum description="Quad protocol. This protocol uses IO3:0." name="QUAD" value="0"/>
      <enum description="Dual protocol. This protocol uses IO1:0." name="DUAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e45532">
      <enum description="Rising edge. Read data is sampled on rising edges on the clock, as in classic SPI operation."
            name="RISING_EDGE"
            value="0"/>
      <enum description="Falling edge. Read data is sampled on falling edges of the clock, allowing a full serial clock of of time in order to maximize the serial clock frequency. MODE3, RFCLK, and FBCLK should not all be 1, because in this case there is no final falling edge on SCK on which to sample the last data bit of the frame."
            name="FALLING_EDGE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e45578">
      <enum description="Internal clock. The SPIFI samples read data using an internal clock."
            name="INTERNAL_CLOCK"
            value="0"/>
      <enum description="Feedback clock. Read data is sampled using a feedback clock from the SCK pin. This allows slightly more time for each received bit. MODE3, RFCLK, and FBCLK should not all be 1, because in this case there is no final falling edge on SCK on which to sample the last data bit of the frame."
            name="FEEDBACK_CLOCK"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e45706">
      <enum description="Input from serial flash." name="INPUT" value="0"/>
      <enum description="Output to serial flash." name="OUTPUT" value="0x1"/>
   </enumeration>
   <enumeration id="d1e45770">
      <enum description="All serial. All fields of the command are serial."
            name="ALL_SERIAL"
            value="0"/>
      <enum description="Quad/dual data. Data field is quad/dual, other fields are serial."
            name="QUAD_DUAL_DATA"
            value="0x1"/>
      <enum description="Serial opcode. Opcode field is serial. Other fields are quad/dual."
            name="SERIAL_OPCODE"
            value="0x2"/>
      <enum description="All quad/dual. All fields of the command are in quad/dual format."
            name="ALL_QUAD_DUAL"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e45841">
      <enum description="Opcode. Opcode only, no address." name="OPCODE" value="0x1"/>
      <enum description="Opcode one byte. Opcode, least significant byte of address."
            name="OPCODE_1_BYTE"
            value="0x2"/>
      <enum description="Opcode two bytes. Opcode, two least significant bytes of address."
            name="OPCODE_2_BYTES"
            value="0x3"/>
      <enum description="Opcode three bytes. Opcode, three least significant bytes of address."
            name="OPCODE_3_BYTES"
            value="0x4"/>
      <enum description="Opcode four bytes. Opcode, 4 bytes of address."
            name="OPCODE_4_BYTES"
            value="0x5"/>
      <enum description="No opcode three bytes. No opcode, 3 least significant bytes of address."
            name="NO_OPCODE_3_BYTES"
            value="0x6"/>
      <enum description="No opcode four bytes. No opcode, 4 bytes of address."
            name="NO_OPCODE_4_BYTES"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e46233">
      <enum description="All serial. All fields of the command are serial."
            name="ALL_SERIAL"
            value="0"/>
      <enum description="Quad/dual data. Data field is quad/dual, other fields are serial."
            name="QUAD_DUAL_DATA"
            value="0x1"/>
      <enum description="Serial opcode. Opcode field is serial. Other fields are quad/dual."
            name="SERIAL_OPCODE"
            value="0x2"/>
      <enum description="All quad/dual. All fields of the command are in quad/dual format."
            name="ALL_QUAD_DUAL"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e46303">
      <enum description="Opcode. Opcode only, no address." name="OPCODE" value="0x1"/>
      <enum description="Opcode one byte. Opcode, least-significant byte of address."
            name="OPCODE_1_BYTE"
            value="0x2"/>
      <enum description="Opcode two bytes. Opcode, 2 least-significant bytes of address."
            name="OPCODE_2_BYTES"
            value="0x3"/>
      <enum description="Opcode three bytes. Opcode, 3 least-significant bytes of address."
            name="OPCODE_3_BYTES"
            value="0x4"/>
      <enum description="Opcode four bytes. Opcode, 4 bytes of address."
            name="OPCODE_4_BYTES"
            value="0x5"/>
      <enum description="No opcode three bytes. No opcode, 3 least-significant bytes of address."
            name="NO_OPCODE_3_BYTES"
            value="0x6"/>
      <enum description="No opcode, 4 bytes of address." name="NO_OPCODE_4_BYTES"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e46616">
      <enum description="Disabled. The DMA controller is disabled. This clears any triggers that were asserted at the point when disabled, but does not prevent re-triggering when the DMA controller is re-enabled."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The DMA controller is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e46690">
      <enum description="Not pending. No enabled interrupts are pending."
            name="NOT_PENDING"
            value="0"/>
      <enum description="Pending. At least one enabled interrupt is pending."
            name="PENDING"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e46736">
      <enum description="Not pending. No error interrupts are pending." name="NOT_PENDING"
            value="0"/>
      <enum description="Pending. At least one error interrupt is pending." name="PENDING"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47428">
      <enum description="Disabled. Peripheral DMA requests are disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Peripheral DMA requests are enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47474">
      <enum description="Disabled. Hardware triggering is not used." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Use hardware triggering." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e47520">
      <enum description="Active low - falling edge. Hardware trigger is active low or falling edge triggered, based on TRIGTYPE."
            name="ACTIVE_LOW_FALLING"
            value="0"/>
      <enum description="Active high - rising edge. Hardware trigger is active high or rising edge triggered, based on TRIGTYPE."
            name="ACTIVE_HIGH_RISING"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47566">
      <enum description="Edge. Hardware trigger is edge triggered. Transfers will be initiated and completed, as specified for a single trigger."
            name="EDGE"
            value="0"/>
      <enum description="Level. Hardware trigger is level triggered. Note that when level triggering without burst (BURSTPOWER = 0) is selected, only hardware triggers should be used on that channel. Transfers continue as long as the trigger level is asserted. Once the trigger is de-asserted, the transfer will be paused until the trigger is, again, asserted. However, the transfer will not be paused until any remaining transfers within the current BURSTPOWER length are completed."
            name="LEVEL"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47612">
      <enum description="Single transfer. Hardware trigger causes a single transfer."
            name="SINGLE"
            value="0"/>
      <enum description="Burst transfer. When the trigger for this channel is set to edge triggered, a hardware trigger causes a burst transfer, as defined by BURSTPOWER. When the trigger for this channel is set to level triggered, a hardware trigger causes transfers to continue as long as the trigger is asserted, unless the transfer is complete."
            name="BURST"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47677">
      <enum description="Disabled. Source burst wrapping is not enabled for this DMA channel."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. Source burst wrapping is enabled for this DMA channel."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47723">
      <enum description="Disabled. Destination burst wrapping is not enabled for this DMA channel."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. Destination burst wrapping is enabled for this DMA channel."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47815">
      <enum description="No effect. No effect on DMA operation." name="NO_EFFECT" value="0"/>
      <enum description="Valid pending." name="VALID_PENDING" value="0x1"/>
   </enumeration>
   <enumeration id="d1e47861">
      <enum description="Not triggered. The trigger for this DMA channel is not set. DMA operations will not be carried out."
            name="NOT_TRIGGERED"
            value="0"/>
      <enum description="Triggered. The trigger for this DMA channel is set. DMA operations will be carried out."
            name="TRIGGERED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47935">
      <enum description="Not valid. The channel descriptor is not considered valid until validated by an associated SETVALID0 setting."
            name="NOT_VALID"
            value="0"/>
      <enum description="Valid. The current channel descriptor is considered valid."
            name="VALID"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e47981">
      <enum description="Disabled. Do not reload the channels' control structure when the current descriptor is exhausted."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. Reload the channels' control structure when the current descriptor is exhausted."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48027">
      <enum description="Not set. When written by software, the trigger for this channel is not set. A new trigger, as defined by the HWTRIGEN, TRIGPOL, and TRIGTYPE will be needed to start the channel."
            name="NOT_SET"
            value="0"/>
      <enum description="Set. When written by software, the trigger for this channel is set immediately. This feature should not be used with level triggering when TRIGBURST = 0."
            name="SET"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48073">
      <enum description="Not cleared. The trigger is not cleared when this descriptor is exhausted. If there is a reload, the next descriptor will be started."
            name="NOT_CLEARED"
            value="0"/>
      <enum description="Cleared. The trigger is cleared when this descriptor is exhausted"
            name="CLEARED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48119">
      <enum description="No effect." name="NO_EFFECT" value="0"/>
      <enum description="Set. The INTA flag for this channel will be set when the current descriptor is exhausted."
            name="SET"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48166">
      <enum description="No effect." name="NO_EFFECT" value="0"/>
      <enum description="Set. The INTB flag for this channel will be set when the current descriptor is exhausted."
            name="SET"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48212">
      <enum description="8-bit. 8-bit transfers are performed (8-bit source reads and destination writes)."
            name="BIT_8"
            value="0"/>
      <enum description="16-bit. 6-bit transfers are performed (16-bit source reads and destination writes)."
            name="BIT_16"
            value="0x1"/>
      <enum description="32-bit. 32-bit transfers are performed (32-bit source reads and destination writes)."
            name="BIT_32"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e48270">
      <enum description="No increment. The source address is not incremented for each transfer. This is the usual case when the source is a peripheral device."
            name="NO_INCREMENT"
            value="0"/>
      <enum description="1 x width. The source address is incremented by the amount specified by Width for each transfer. This is the usual case when the source is memory."
            name="WIDTH_X_1"
            value="0x1"/>
      <enum description="2 x width. The source address is incremented by 2 times the amount specified by Width for each transfer."
            name="WIDTH_X_2"
            value="0x2"/>
      <enum description="4 x width. The source address is incremented by 4 times the amount specified by Width for each transfer."
            name="WIDTH_X_4"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e48340">
      <enum description="No increment. The destination address is not incremented for each transfer. This is the usual case when the destination is a peripheral device."
            name="NO_INCREMENT"
            value="0"/>
      <enum description="1 x width. The destination address is incremented by the amount specified by Width for each transfer. This is the usual case when the destination is memory."
            name="WIDTH_X_1"
            value="0x1"/>
      <enum description="2 x width. The destination address is incremented by 2 times the amount specified by Width for each transfer."
            name="WIDTH_X_2"
            value="0x2"/>
      <enum description="4 x width. The destination address is incremented by 4 times the amount specified by Width for each transfer."
            name="WIDTH_X_4"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e48560">
      <enum description="USB_NEEDCLK has normal function." name="NORMAL" value="0"/>
      <enum description="USB_NEEDCLK always 1. Clock will not be stopped in case of suspend."
            name="ALWAYS_ON"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48606">
      <enum description="LPM not supported." name="NO" value="0"/>
      <enum description="LPM supported." name="YES" value="0x1"/>
   </enumeration>
   <enumeration id="d1e48653">
      <enum description="Only acknowledged packets generate an interrupt" name="DISABLED"
            value="0"/>
      <enum description="Both acknowledged and NAKed packets generate interrupts."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48699">
      <enum description="Only acknowledged packets generate an interrupt" name="DISABLED"
            value="0"/>
      <enum description="Both acknowledged and NAKed packets generate interrupts."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48745">
      <enum description="Only acknowledged packets generate an interrupt" name="DISABLED"
            value="0"/>
      <enum description="Both acknowledged and NAKed packets generate interrupts."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e48791">
      <enum description="Only acknowledged packets generate an interrupt" name="DISABLED"
            value="0"/>
      <enum description="Both acknowledged and NAKed packets generate interrupts."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e49028">
      <enum description="No error" name="NO_ERROR" value="0"/>
      <enum description="PID encoding error" name="PID_ENCODING_ERROR" value="0x1"/>
      <enum description="PID unknown" name="PID_UNKNOWN" value="0x2"/>
      <enum description="Packet unexpected" name="PACKET_UNEXPECTED" value="0x3"/>
      <enum description="Token CRC error" name="TOKEN_CRC_ERROR" value="0x4"/>
      <enum description="Data CRC error" name="DATA_CRC_ERROR" value="0x5"/>
      <enum description="Time out" name="TIMEOUT" value="0x6"/>
      <enum description="Babble" name="BABBLE" value="0x7"/>
      <enum description="Truncated EOP" name="TRUNCATED_EOP" value="0x8"/>
      <enum description="Sent/Received NAK" name="SENT_RECEIVED_NAK" value="0x9"/>
      <enum description="Sent Stall" name="SENT_STALL" value="0xa"/>
      <enum description="Overrun" name="OVERRUN" value="0xb"/>
      <enum description="Sent empty packet" name="SENT_EMPTY_PACKET" value="0xc"/>
      <enum description="Bitstuff error" name="BITSTUFF_ERROR" value="0xd"/>
      <enum description="Sync error" name="SYNC_ERROR" value="0xe"/>
      <enum description="Wrong data toggle" name="WRONG_DATA_TOGGLE" value="0xf"/>
   </enumeration>
   <enumeration id="d1e50082">
      <enum description="The SCT operates as two 16-bit counters named COUNTER_L and COUNTER_H."
            name="DUAL_COUNTER"
            value="0"/>
      <enum description="The SCT operates as a unified 32-bit counter."
            name="UNIFIED_COUNTER"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e50128">
      <enum description="System Clock Mode. The system clock clocks the entire SCT module including the counter(s) and counter prescalers."
            name="SYSTEM_CLOCK_MODE"
            value="0"/>
      <enum description="Sampled System Clock Mode. The system clock clocks the SCT module, but the counter and prescalers are only enabled to count when the designated edge is detected on the input selected by the CKSEL field. The minimum pulse width on the selected clock-gate input is 1 bus clock period. This mode is the high-performance, sampled-clock mode."
            name="SAMPLED_SYSTEM_CLOCK_MODE"
            value="0x1"/>
      <enum description="SCT Input Clock Mode. The input/edge selected by the CKSEL field clocks the SCT module, including the counters and prescalers, after first being synchronized to the system clock. The minimum pulse width on the clock input is 1 bus clock period. This mode is the low-power, sampled-clock mode."
            name="SCT_INPUT_CLOCK_MODE"
            value="0x2"/>
      <enum description="Asynchronous Mode. The entire SCT module is clocked directly by the input/edge selected by the CKSEL field. In this mode, the SCT outputs are switched synchronously to the SCT input clock - not the system clock. The input clock rate must be at least half the system clock rate and can be the same or faster than the system clock."
            name="ASYNCHRONOUS_MODE"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e50198">
      <enum description="Rising edges on input 0." name="INPUT_0_RISING_EDGES" value="0"/>
      <enum description="Falling edges on input 0." name="INPUT_0_FALLING_EDGE" value="0x1"/>
      <enum description="Rising edges on input 1." name="INPUT_1_RISING_EDGES" value="0x2"/>
      <enum description="Falling edges on input 1." name="INPUT_1_FALLING_EDGE" value="0x3"/>
      <enum description="Rising edges on input 2." name="INPUT_2_RISING_EDGES" value="0x4"/>
      <enum description="Falling edges on input 2." name="INPUT_2_FALLING_EDGE" value="0x5"/>
      <enum description="Rising edges on input 3." name="INPUT_3_RISING_EDGES" value="0x6"/>
      <enum description="Falling edges on input 3." name="INPUT_3_FALLING_EDGE" value="0x7"/>
   </enumeration>
   <enumeration id="d1e50508">
      <enum description="Up. The counter counts up to a limit condition, then is cleared to zero."
            name="UP"
            value="0"/>
      <enum description="Up-down. The counter counts up to a limit, then counts down to a limit condition or to 0."
            name="UP_DOWN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e50645">
      <enum description="The H counter counts up to its limit condition, then is cleared to zero."
            name="UP"
            value="0"/>
      <enum description="The H counter counts up to its limit, then counts down to a limit condition or to 0."
            name="UP_DOWN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e51843">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e51901">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e51959">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52017">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52075">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52134">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52192">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52250">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52308">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52366">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52424">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52483">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52541">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52599">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52657">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52715">
      <enum description="Set and clear do not depend on the direction of any counter."
            name="INDEPENDENT"
            value="0"/>
      <enum description="Set and clear are reversed when counter L or the unified counter is counting down."
            name="L_REVERSED"
            value="0x1"/>
      <enum description="Set and clear are reversed when counter H is counting down. Do not use if UNIFY = 1."
            name="H_REVERSED"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e52801">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR0 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR0 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e52871">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR1 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR1 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e52941">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR2 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output n (or set based on the SETCLR2 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53011">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR3 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR3 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53081">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR4 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR4 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53152">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR5 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR5 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53222">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR6 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR6 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53292">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR7 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output n (or set based on the SETCLR7 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53362">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR8 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR8 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53432">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR9 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR9 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53502">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR10 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR10 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53573">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR11 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR11 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53643">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR12 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR12 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53713">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR13 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR13 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53783">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR14 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR14 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e53853">
      <enum description="No change." name="NO_CHANGE" value="0"/>
      <enum description="Set output (or clear based on the SETCLR15 field in the OUTPUTDIRCTRL register)."
            name="SET"
            value="0x1"/>
      <enum description="Clear output (or set based on the SETCLR15 field)." name="CLEAR"
            value="0x2"/>
      <enum description="Toggle output." name="TOGGLE_OUTPUT" value="0x3"/>
   </enumeration>
   <enumeration id="d1e54711">
      <enum description="Selects the L state and the L match register selected by MATCHSEL."
            name="L_COUNTER"
            value="0"/>
      <enum description="Selects the H state and the H match register selected by MATCHSEL."
            name="H_COUNTER"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e54757">
      <enum description="Selects the inputs selected by IOSEL." name="INPUT" value="0"/>
      <enum description="Selects the outputs selected by IOSEL." name="OUTPUT" value="0x1"/>
   </enumeration>
   <enumeration id="d1e54821">
      <enum description="LOW" name="LOW" value="0"/>
      <enum description="Rise" name="RISE" value="0x1"/>
      <enum description="Fall" name="FALL" value="0x2"/>
      <enum description="HIGH" name="HIGH" value="0x3"/>
   </enumeration>
   <enumeration id="d1e54892">
      <enum description="OR. The event occurs when either the specified match or I/O condition occurs."
            name="OR"
            value="0"/>
      <enum description="MATCH. Uses the specified match only." name="MATCH" value="0x1"/>
      <enum description="IO. Uses the specified I/O condition only." name="IO" value="0x2"/>
      <enum description="AND. The event occurs when the specified match and I/O condition occur simultaneously."
            name="AND"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e54962">
      <enum description="STATEV value is added into STATE (the carry-out is ignored)."
            name="ADD"
            value="0"/>
      <enum description="STATEV value is loaded into STATE." name="LOAD" value="0x1"/>
   </enumeration>
   <enumeration id="d1e55044">
      <enum description="Direction independent. This event is triggered regardless of the count direction."
            name="DIRECTION_INDEPENDENT"
            value="0"/>
      <enum description="Counting up. This event is triggered only during up-counting when BIDIR = 1."
            name="COUNTING_UP"
            value="0x1"/>
      <enum description="Counting down. This event is triggered only during down-counting when BIDIR = 1."
            name="COUNTING_DOWN"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e55310">
      <enum description="No peripheral selected." name="NO_PERIPH_SELECTED" value="0"/>
      <enum description="USART function selected." name="USART" value="0x1"/>
      <enum description="SPI function selected." name="SPI" value="0x2"/>
      <enum description="I2C function selected." name="I2C" value="0x3"/>
      <enum description="I2S transmit function selected." name="I2S_TRANSMIT" value="0x4"/>
      <enum description="I2S receive function selected." name="I2S_RECEIVE" value="0x5"/>
   </enumeration>
   <enumeration id="d1e55405">
      <enum description="Peripheral select can be changed by software." name="UNLOCKED"
            value="0"/>
      <enum description="Peripheral select is locked and cannot be changed until this Flexcomm or the entire device is reset."
            name="LOCKED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e55451">
      <enum description="This Flexcomm does not include the USART function."
            name="NOT_PRESENT"
            value="0"/>
      <enum description="This Flexcomm includes the USART function." name="PRESENT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e55497">
      <enum description="This Flexcomm does not include the SPI function."
            name="NOT_PRESENT"
            value="0"/>
      <enum description="This Flexcomm includes the SPI function." name="PRESENT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e55543">
      <enum description="This Flexcomm does not include the I2C function."
            name="NOT_PRESENT"
            value="0"/>
      <enum description="This Flexcomm includes the I2C function." name="PRESENT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e55590">
      <enum description="This Flexcomm does not include the I2S function."
            name="NOT_PRESENT"
            value="0"/>
      <enum description="This Flexcomm includes the I2S function." name="PRESENT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56070">
      <enum description="Disabled. The I2C Master function is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The I2C Master function is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56116">
      <enum description="Disabled. The I2C slave function is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The I2C slave function is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56162">
      <enum description="Disabled. The I2C Monitor function is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The I2C Monitor function is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56208">
      <enum description="Disabled. Time-out function is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. Time-out function is enabled. Both types of time-out flags will be generated and will cause interrupts if they are enabled. Typically, only one time-out will be used in a system."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56254">
      <enum description="Disabled. The Monitor function will not perform clock stretching. Software or DMA may not always be able to read data provided by the Monitor function before it is overwritten. This mode may be used when non-invasive monitoring is critical."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The Monitor function will perform clock stretching in order to ensure that software or DMA can read all incoming data supplied by the Monitor function."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56301">
      <enum description="Fast-mode plus. The I 2C interface will support Standard-mode, Fast-mode, and Fast-mode Plus, to the extent that the pin electronics support these modes. Any changes that need to be made to the pin controls, such as changing the drive strength or filtering, must be made by software via the IOCON register associated with each I2C pin,"
            name="FAST_MODE_PLUS"
            value="0"/>
      <enum description="High-speed. In addition to Standard-mode, Fast-mode, and Fast-mode Plus, the I 2C interface will support High-speed mode to the extent that the pin electronics support these modes. See Section 25.7.2.2 for more information."
            name="HIGH_SPEED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56375">
      <enum description="In progress. Communication is in progress and the Master function is busy and cannot currently accept a command."
            name="IN_PROGRESS"
            value="0"/>
      <enum description="Pending. The Master function needs software service or is in the idle state. If the master is not in the idle state, it is waiting to receive or transmit data or the NACK bit."
            name="PENDING"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56421">
      <enum description="Idle. The Master function is available to be used for a new transaction."
            name="IDLE"
            value="0"/>
      <enum description="Receive ready. Received data available (Master Receiver mode). Address plus Read was previously sent and Acknowledged by slave."
            name="RECEIVE_READY"
            value="0x1"/>
      <enum description="Transmit ready. Data can be transmitted (Master Transmitter mode). Address plus Write was previously sent and Acknowledged by slave."
            name="TRANSMIT_READY"
            value="0x2"/>
      <enum description="NACK Address. Slave NACKed address." name="NACK_ADDRESS"
            value="0x3"/>
      <enum description="NACK Data. Slave NACKed transmitted data." name="NACK_DATA"
            value="0x4"/>
   </enumeration>
   <enumeration id="d1e56503">
      <enum description="No Arbitration Loss has occurred." name="NO_LOSS" value="0"/>
      <enum description="Arbitration loss. The Master function has experienced an Arbitration Loss. At this point, the Master function has already stopped driving the bus and gone to an idle state. Software can respond by doing nothing, or by sending a Start in order to attempt to gain control of the bus when it next becomes idle."
            name="ARBITRATION_LOSS"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56549">
      <enum description="No Start/Stop Error has occurred." name="NO_ERROR" value="0"/>
      <enum description="The Master function has experienced a Start/Stop Error. A Start or Stop was detected at a time when it is not allowed by the I2C specification. The Master interface has stopped driving the bus and gone to an idle state, no action is required. A request for a Start could be made, or software could attempt to insure that the bus has not stalled."
            name="ERROR"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56595">
      <enum description="In progress. The Slave function does not currently need service."
            name="IN_PROGRESS"
            value="0"/>
      <enum description="Pending. The Slave function needs service. Information on what is needed can be found in the adjacent SLVSTATE field."
            name="PENDING"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56642">
      <enum description="Slave address. Address plus R/W received. At least one of the four slave addresses has been matched by hardware."
            name="SLAVE_ADDRESS"
            value="0"/>
      <enum description="Slave receive. Received data is available (Slave Receiver mode)."
            name="SLAVE_RECEIVE"
            value="0x1"/>
      <enum description="Slave transmit. Data can be transmitted (Slave Transmitter mode)."
            name="SLAVE_TRANSMIT"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e56700">
      <enum description="Stretching. The slave function is currently stretching the I2C bus clock. Deep-Sleep or Power-down mode cannot be entered at this time."
            name="STRETCHING"
            value="0"/>
      <enum description="Not stretching. The slave function is not currently stretching the I 2C bus clock. Deep-sleep or Power-down mode could be entered at this time."
            name="NOT_STRETCHING"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56746">
      <enum description="Address 0. Slave address 0 was matched." name="ADDRESS0" value="0"/>
      <enum description="Address 1. Slave address 1 was matched." name="ADDRESS1"
            value="0x1"/>
      <enum description="Address 2. Slave address 2 was matched." name="ADDRESS2"
            value="0x2"/>
      <enum description="Address 3. Slave address 3 was matched." name="ADDRESS3"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e56816">
      <enum description="Not selected. The Slave function is not currently selected."
            name="NOT_SELECTED"
            value="0"/>
      <enum description="Selected. The Slave function is currently selected."
            name="SELECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56862">
      <enum description="Not deselected. The Slave function has not become deselected. This does not mean that it is currently selected. That information can be found in the SLVSEL flag."
            name="NOT_DESELECTED"
            value="0"/>
      <enum description="Deselected. The Slave function has become deselected. This is specifically caused by the SLVSEL flag changing from 1 to 0. See the description of SLVSEL for details on when that event occurs."
            name="DESELECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56908">
      <enum description="No data. The Monitor function does not currently have data available."
            name="NO_DATA"
            value="0"/>
      <enum description="Data waiting. The Monitor function has data waiting to be read."
            name="DATA_WAITING"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e56955">
      <enum description="No overrun. Monitor data has not overrun." name="NO_OVERRUN"
            value="0"/>
      <enum description="Overrun. A Monitor data overrun has occurred. This can only happen when Monitor clock stretching not enabled via the MONCLKSTR bit in the CFG register. Writing 1 to this bit clears the flag."
            name="OVERRUN"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57001">
      <enum description="Inactive. The Monitor function considers the I2C bus to be inactive."
            name="INACTIVE"
            value="0"/>
      <enum description="Active. The Monitor function considers the I2C bus to be active."
            name="ACTIVE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57047">
      <enum description="Not idle. The I2C bus is not idle, or this flag has been cleared by software."
            name="NOT_IDLE"
            value="0"/>
      <enum description="Idle. The I2C bus has gone idle at least once since the last time this flag was cleared by software."
            name="IDLE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57093">
      <enum description="No time-out. I2C bus events have not caused a time-out."
            name="NO_TIMEOUT"
            value="0"/>
      <enum description="Event time-out. The time between I2C bus events has been longer than the time specified by the TIMEOUT register."
            name="EVEN_TIMEOUT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57139">
      <enum description="No time-out. SCL low time has not caused a time-out."
            name="NO_TIMEOUT"
            value="0"/>
      <enum description="Time-out. SCL low time has caused a time-out." name="TIMEOUT"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57213">
      <enum description="Disabled. The MstPending interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The MstPending interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57259">
      <enum description="Disabled. The MstArbLoss interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The MstArbLoss interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57305">
      <enum description="Disabled. The MstStStpErr interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The MstStStpErr interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57351">
      <enum description="Disabled. The SlvPending interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The SlvPending interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57397">
      <enum description="Disabled. The SlvNotStr interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The SlvNotStr interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57444">
      <enum description="Disabled. The SlvDeSel interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The SlvDeSel interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57490">
      <enum description="Disabled. The MonRdy interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The MonRdy interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57536">
      <enum description="Disabled. The MonOv interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The MonOv interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57582">
      <enum description="Disabled. The MonIdle interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The MonIdle interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57628">
      <enum description="Disabled. The Event time-out interrupt is disabled."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The Event time-out interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e57674">
      <enum description="Disabled. The SCL time-out interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The SCL time-out interrupt is enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58313">
      <enum description="No effect." name="NO_EFFECT" value="0"/>
      <enum description="Continue. Informs the Master function to continue to the next operation. This must done after writing transmit data, reading received data, or any other housekeeping related to the next bus operation."
            name="CONTINUE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58359">
      <enum description="No effect." name="NO_EFFECT" value="0"/>
      <enum description="Start. A Start will be generated on the I2C bus at the next allowed time."
            name="START"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58405">
      <enum description="No effect." name="NO_EFFECT" value="0"/>
      <enum description="Stop. A Stop will be generated on the I2C bus at the next allowed time, preceded by a NACK to the slave if the master is receiving data from the slave (Master Receiver mode)."
            name="STOP"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58451">
      <enum description="Disable. No DMA requests are generated for master operation."
            name="DISABLED"
            value="0"/>
      <enum description="Enable. A DMA request is generated for I2C master data operations. When this I2C master is generating Acknowledge bits in Master Receiver mode, the acknowledge is generated automatically."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58525">
      <enum description="2 clocks. Minimum SCL low time is 2 clocks of the I2C clock pre-divider."
            name="CLOCKS_2"
            value="0"/>
      <enum description="3 clocks. Minimum SCL low time is 3 clocks of the I2C clock pre-divider."
            name="CLOCKS_3"
            value="0x1"/>
      <enum description="4 clocks. Minimum SCL low time is 4 clocks of the I2C clock pre-divider."
            name="CLOCKS_4"
            value="0x2"/>
      <enum description="5 clocks. Minimum SCL low time is 5 clocks of the I2C clock pre-divider."
            name="CLOCKS_5"
            value="0x3"/>
      <enum description="6 clocks. Minimum SCL low time is 6 clocks of the I2C clock pre-divider."
            name="CLOCKS_6"
            value="0x4"/>
      <enum description="7 clocks. Minimum SCL low time is 7 clocks of the I2C clock pre-divider."
            name="CLOCKS_7"
            value="0x5"/>
      <enum description="8 clocks. Minimum SCL low time is 8 clocks of the I2C clock pre-divider."
            name="CLOCKS_8"
            value="0x6"/>
      <enum description="9 clocks. Minimum SCL low time is 9 clocks of the I2C clock pre-divider."
            name="CLOCKS_9"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e58644">
      <enum description="2 clocks. Minimum SCL high time is 2 clock of the I2C clock pre-divider."
            name="CLOCKS_2"
            value="0"/>
      <enum description="3 clocks. Minimum SCL high time is 3 clocks of the I2C clock pre-divider ."
            name="CLOCKS_3"
            value="0x1"/>
      <enum description="4 clocks. Minimum SCL high time is 4 clock of the I2C clock pre-divider."
            name="CLOCKS_4"
            value="0x2"/>
      <enum description="5 clocks. Minimum SCL high time is 5 clock of the I2C clock pre-divider."
            name="CLOCKS_5"
            value="0x3"/>
      <enum description="6 clocks. Minimum SCL high time is 6 clock of the I2C clock pre-divider."
            name="CLOCKS_6"
            value="0x4"/>
      <enum description="7 clocks. Minimum SCL high time is 7 clock of the I2C clock pre-divider."
            name="CLOCKS_7"
            value="0x5"/>
      <enum description="8 clocks. Minimum SCL high time is 8 clock of the I2C clock pre-divider."
            name="CLOCKS_8"
            value="0x6"/>
      <enum description="9 clocks. Minimum SCL high time is 9 clocks of the I2C clock pre-divider."
            name="CLOCKS_9"
            value="0x7"/>
   </enumeration>
   <enumeration id="d1e58837">
      <enum description="No effect." name="NO_EFFECT" value="0"/>
      <enum description="Continue. Informs the Slave function to continue to the next operation, by clearing the SLVPENDING flag in the STAT register. This must be done after writing transmit data, reading received data, or any other housekeeping related to the next bus operation. Automatic Operation has different requirements. SLVCONTINUE should not be set unless SLVPENDING = 1."
            name="CONTINUE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58883">
      <enum description="No effect." name="NO_EFFECT" value="0"/>
      <enum description="NACK. Causes the Slave function to NACK the master when the slave is receiving data from the master (Slave Receiver mode)."
            name="NACK"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58929">
      <enum description="Disabled. No DMA requests are issued for Slave mode operation."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. DMA requests are issued for I2C slave data transmission and reception."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e58975">
      <enum description="Normal, non-automatic operation. If AUTONACK = 0, an SlvPending interrupt is generated when a matching address is received. If AUTONACK = 1, received addresses are NACKed (ignored)."
            name="NORMAL"
            value="0"/>
      <enum description="A header with matching SLVADR0 and matching direction as set by AUTOMATCHREAD will be ACKed immediately, allowing the master to move on to the data bytes. If the address matches SLVADR0, but the direction does not match AUTOMATCHREAD, the behavior will depend on the AUTONACK bit in the SLVADR0 register: if AUTONACK is set, then it will be Nacked; else if AUTONACK is clear, then a SlvPending interrupt is generated."
            name="AUTOMATIC_ACK"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59021">
      <enum description="The expected next operation in Automatic Mode is an I2C write."
            name="I2C_WRITE"
            value="0"/>
      <enum description="The expected next operation in Automatic Mode is an I2C read."
            name="I2C_READ"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59148">
      <enum description="Enabled. Slave Address n is enabled." name="ENABLED" value="0"/>
      <enum description="Ignored Slave Address n is ignored." name="DISABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e59212">
      <enum description="Normal operation, matching I2C addresses are not ignored."
            name="NORMAL"
            value="0"/>
      <enum description="Automatic-only mode. All incoming addresses are ignored (NACKed), unless AUTOACK is set, it matches SLVADRn, and AUTOMATCHREAD matches the direction."
            name="AUTOMATIC"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59286">
      <enum description="Mask. The SLVQUAL0 field is used as a logical mask for matching address 0."
            name="MASK"
            value="0"/>
      <enum description="Extend. The SLVQUAL0 field is used to extend address 0 matching in a range of addresses."
            name="EXTEND"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59396">
      <enum description="No start detected. The Monitor function has not detected a Start event on the I2C bus."
            name="NO_START_DETECTED"
            value="0"/>
      <enum description="Start detected. The Monitor function has detected a Start event on the I2C bus."
            name="START_DETECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59442">
      <enum description="No repeated start detected. The Monitor function has not detected a Repeated Start event on the I2C bus."
            name="NOT_DETECTED"
            value="0"/>
      <enum description="Repeated start detected. The Monitor function has detected a Repeated Start event on the I2C bus."
            name="DETECTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59488">
      <enum description="Acknowledged. The data currently being provided by the Monitor function was acknowledged by at least one master or slave receiver."
            name="ACKNOWLEDGED"
            value="0"/>
      <enum description="Not acknowledged. The data currently being provided by the Monitor function was not acknowledged by any receiver."
            name="NOT_ACKNOWLEDGED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59890">
      <enum description="Disabled. The SPI is disabled and the internal state machine and counters are reset."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The SPI is enabled for operation." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59936">
      <enum description="Slave mode. The SPI will operate in slave mode. SCK, MOSI, and the SSEL signals are inputs, MISO is an output."
            name="SLAVE_MODE"
            value="0"/>
      <enum description="Master mode. The SPI will operate in master mode. SCK, MOSI, and the SSEL signals are outputs, MISO is an input."
            name="MASTER_MODE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e59982">
      <enum description="Standard. Data is transmitted and received in standard MSB first order."
            name="STANDARD"
            value="0"/>
      <enum description="Reverse. Data is transmitted and received in reverse order (LSB first)."
            name="REVERSE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e60028">
      <enum description="Change. The SPI captures serial data on the first clock transition of the transfer (when the clock changes away from the rest state). Data is changed on the following edge."
            name="CHANGE"
            value="0"/>
      <enum description="Capture. The SPI changes serial data on the first clock transition of the transfer (when the clock changes away from the rest state). Data is captured on the following edge."
            name="CAPTURE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e60074">
      <enum description="Low. The rest state of the clock (between transfers) is low."
            name="LOW"
            value="0"/>
      <enum description="High. The rest state of the clock (between transfers) is high."
            name="HIGH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e60121">
      <enum description="Disabled." name="DISABLED" value="0"/>
      <enum description="Enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e60167">
      <enum description="Low. The SSEL0 pin is active low." name="LOW" value="0"/>
      <enum description="High. The SSEL0 pin is active high." name="HIGH" value="0x1"/>
   </enumeration>
   <enumeration id="d1e60213">
      <enum description="Low. The SSEL1 pin is active low." name="LOW" value="0"/>
      <enum description="High. The SSEL1 pin is active high." name="HIGH" value="0x1"/>
   </enumeration>
   <enumeration id="d1e60259">
      <enum description="Low. The SSEL2 pin is active low." name="LOW" value="0"/>
      <enum description="High. The SSEL2 pin is active high." name="HIGH" value="0x1"/>
   </enumeration>
   <enumeration id="d1e60305">
      <enum description="Low. The SSEL3 pin is active low." name="LOW" value="0"/>
      <enum description="High. The SSEL3 pin is active high." name="HIGH" value="0x1"/>
   </enumeration>
   <enumeration id="d1e60597">
      <enum description="Disabled. No interrupt will be generated when any Slave Select transitions from deasserted to asserted."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. An interrupt will be generated when any Slave Select transitions from deasserted to asserted."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e60643">
      <enum description="Disabled. No interrupt will be generated when all asserted Slave Selects transition to deasserted."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. An interrupt will be generated when all asserted Slave Selects transition to deasserted."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e60689">
      <enum description="No interrupt will be generated when the SPI master function is idle."
            name="DISABLED"
            value="0"/>
      <enum description="An interrupt will be generated when the SPI master function is fully idle."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e60974">
      <enum description="The transmit FIFO is not enabled." name="DISABLED" value="0"/>
      <enum description="The transmit FIFO is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e61020">
      <enum description="The receive FIFO is not enabled." name="DISABLED" value="0"/>
      <enum description="The receive FIFO is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e61084">
      <enum description="DMA is not used for the transmit function." name="DISABLED"
            value="0"/>
      <enum description="Trigger DMA for the transmit function if the FIFO is not full. Generally, data interrupts would be disabled if DMA is enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61130">
      <enum description="DMA is not used for the receive function." name="DISABLED"
            value="0"/>
      <enum description="Trigger DMA for the receive function if the FIFO is not empty. Generally, data interrupts would be disabled if DMA is enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61177">
      <enum description="Only enabled interrupts will wake up the device form reduced power modes."
            name="DISABLED"
            value="0"/>
      <enum description="A device wake-up for DMA will occur if the transmit FIFO level reaches the value specified by TXLVL in FIFOTRIG, even when the TXLVL interrupt is not enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61223">
      <enum description="Only enabled interrupts will wake up the device form reduced power modes."
            name="DISABLED"
            value="0"/>
      <enum description="A device wake-up for DMA will occur if the receive FIFO level reaches the value specified by RXLVL in FIFOTRIG, even when the RXLVL interrupt is not enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61524">
      <enum description="Transmit FIFO level does not generate a FIFO level trigger."
            name="DISABLED"
            value="0"/>
      <enum description="An trigger will be generated if the transmit FIFO level reaches the value specified by the TXLVL field in this register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61570">
      <enum description="Receive FIFO level does not generate a FIFO level trigger."
            name="DISABLED"
            value="0"/>
      <enum description="An trigger will be generated if the receive FIFO level reaches the value specified by the RXLVL field in this register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61680">
      <enum description="No interrupt will be generated for a transmit error."
            name="DISABLED"
            value="0"/>
      <enum description="An interrupt will be generated when a transmit error occurs."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61726">
      <enum description="No interrupt will be generated for a receive error."
            name="DISABLED"
            value="0"/>
      <enum description="An interrupt will be generated when a receive error occurs."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61772">
      <enum description="No interrupt will be generated based on the TX FIFO level."
            name="DISABLED"
            value="0"/>
      <enum description="If TXLVLENA in the FIFOTRIG register = 1, an interrupt will be generated when the TX FIFO level decreases to the level specified by TXLVL in the FIFOTRIG register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e61818">
      <enum description="No interrupt will be generated based on the RX FIFO level."
            name="DISABLED"
            value="0"/>
      <enum description="If RXLVLENA in the FIFOTRIG register = 1, an interrupt will be generated when the when the RX FIFO level increases to the level specified by RXLVL in the FIFOTRIG register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e62129">
      <enum description="SSEL0 asserted." name="ASSERTED" value="0"/>
      <enum description="SSEL0 not asserted." name="NOT_ASSERTED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e62175">
      <enum description="SSEL1 asserted." name="ASSERTED" value="0"/>
      <enum description="SSEL1 not asserted." name="NOT_ASSERTED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e62221">
      <enum description="SSEL2 asserted." name="ASSERTED" value="0"/>
      <enum description="SSEL2 not asserted." name="NOT_ASSERTED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e62267">
      <enum description="SSEL3 asserted." name="ASSERTED" value="0"/>
      <enum description="SSEL3 not asserted." name="NOT_ASSERTED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e62314">
      <enum description="SSEL not deasserted. This piece of data is not treated as the end of a transfer. SSEL will not be deasserted at the end of this data."
            name="NOT_DEASSERTED"
            value="0"/>
      <enum description="SSEL deasserted. This piece of data is treated as the end of a transfer. SSEL will be deasserted at the end of this piece of data."
            name="DEASSERTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e62360">
      <enum description="Data not EOF. This piece of data transmitted is not treated as the end of a frame."
            name="NOT_EOF"
            value="0"/>
      <enum description="Data EOF. This piece of data is treated as the end of a frame, causing the Frame_delay time to be inserted before subsequent data is transmitted."
            name="EOF"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e62406">
      <enum description="Read received data. Received data must be read in order to allow transmission to progress. SPI transmit will halt when the receive data FIFO is full. In slave mode, an overrun error will occur if received data is not read before new data is received."
            name="READ"
            value="0"/>
      <enum description="Ignore received data. Received data is ignored, allowing transmission without reading unneeded received data. No receiver flags are generated."
            name="IGNORE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63099">
      <enum description="Disabled. The USART is disabled and the internal state machine and counters are reset. While Enable = 0, all USART interrupts and DMA transfers are disabled. When Enable is set again, CFG and most other control bits remain unchanged. When re-enabled, the USART will immediately be ready to transmit because the transmitter has been reset and is therefore available."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The USART is enabled for operation." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63145">
      <enum description="7 bit Data length." name="BIT_7" value="0"/>
      <enum description="8 bit Data length." name="BIT_8" value="0x1"/>
      <enum description="9 bit data length. The 9th bit is commonly used for addressing in multidrop mode. See the ADDRDET bit in the CTL register."
            name="BIT_9"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e63203">
      <enum description="No parity." name="NO_PARITY" value="0"/>
      <enum description="Even parity. Adds a bit to each character such that the number of 1s in a transmitted character is even, and the number of 1s in a received character is expected to be even."
            name="EVEN_PARITY"
            value="0x2"/>
      <enum description="Odd parity. Adds a bit to each character such that the number of 1s in a transmitted character is odd, and the number of 1s in a received character is expected to be odd."
            name="ODD_PARITY"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e63261">
      <enum description="1 stop bit." name="BIT_1" value="0"/>
      <enum description="2 stop bits. This setting should only be used for asynchronous communication."
            name="BITS_2"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63307">
      <enum description="Disabled. USART uses standard clocking." name="DISABLED" value="0"/>
      <enum description="Enabled. USART uses the 32 kHz clock from the RTC oscillator as the clock source to the BRG, and uses a special bit clocking scheme."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63354">
      <enum description="Disabled. Break detect and generate is configured for normal operation."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. Break detect and generate is configured for LIN bus operation."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63400">
      <enum description="No flow control. The transmitter does not receive any automatic flow control signal."
            name="DISABLED"
            value="0"/>
      <enum description="Flow control enabled. The transmitter uses the CTS input (or RTS output in loopback mode) for flow control purposes."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63446">
      <enum description="Asynchronous mode." name="ASYNCHRONOUS_MODE" value="0"/>
      <enum description="Synchronous mode." name="SYNCHRONOUS_MODE" value="0x1"/>
   </enumeration>
   <enumeration id="d1e63492">
      <enum description="Falling edge. Un_RXD is sampled on the falling edge of SCLK."
            name="FALLING_EDGE"
            value="0"/>
      <enum description="Rising edge. Un_RXD is sampled on the rising edge of SCLK."
            name="RISING_EDGE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63538">
      <enum description="Slave. When synchronous mode is enabled, the USART is a slave."
            name="SLAVE"
            value="0"/>
      <enum description="Master. When synchronous mode is enabled, the USART is a master."
            name="MASTER"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63584">
      <enum description="Normal operation." name="NORMAL" value="0"/>
      <enum description="Loopback mode. This provides a mechanism to perform diagnostic loopback testing for USART data. Serial data from the transmitter (Un_TXD) is connected internally to serial input of the receive (Un_RXD). Un_TXD and Un_RTS activity will also appear on external pins if these functions are configured to appear on device pins. The receiver RTS signal is also looped back to CTS and performs flow control if enabled by CTSEN."
            name="LOOPBACK"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63631">
      <enum description="Standard. USART output and input operate in standard fashion."
            name="STANDARD"
            value="0"/>
      <enum description="IrDA. USART output and input operate in IrDA mode." name="IRDA"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63677">
      <enum description="Disabled. If selected by OESEL, the Output Enable signal deasserted at the end of the last stop bit of a transmission."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. If selected by OESEL, the Output Enable signal remains asserted for one character time after the end of the last stop bit of a transmission. OE will also remain asserted if another transmit begins before it is deasserted."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63723">
      <enum description="Disabled. When addressing is enabled by ADDRDET, address matching is done by software. This provides the possibility of versatile addressing (e.g. respond to more than one address)."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. When addressing is enabled by ADDRDET, address matching is done by hardware, using the value in the ADDR register as the address to match."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63769">
      <enum description="Standard. The RTS signal is used as the standard flow control function."
            name="STANDARD"
            value="0"/>
      <enum description="RS-485. The RTS signal configured to provide an output enable signal to control an RS-485 transceiver."
            name="RS_485"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63815">
      <enum description="Low. If selected by OESEL, the output enable is active low."
            name="LOW"
            value="0"/>
      <enum description="High. If selected by OESEL, the output enable is active high."
            name="HIGH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63861">
      <enum description="Standard. The RX signal is used as it arrives from the pin. This means that the RX rest value is 1, start bit is 0, data is not inverted, and the stop bit is 1."
            name="STANDARD"
            value="0"/>
      <enum description="Inverted. The RX signal is inverted before being used by the USART. This means that the RX rest value is 0, start bit is 1, data is inverted, and the stop bit is 0."
            name="INVERTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63908">
      <enum description="Standard. The TX signal is sent out without change. This means that the TX rest value is 1, start bit is 0, data is not inverted, and the stop bit is 1."
            name="STANDARD"
            value="0"/>
      <enum description="Inverted. The TX signal is inverted by the USART before being sent out. This means that the TX rest value is 0, start bit is 1, data is inverted, and the stop bit is 0."
            name="INVERTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e63982">
      <enum description="Normal operation." name="NORMAL" value="0"/>
      <enum description="Continuous break. Continuous break is sent immediately when this bit is set, and remains until this bit is cleared. A break may be sent without danger of corrupting any currently transmitting character if the transmitter is first disabled (TXDIS in CTL is set) and then waiting for the transmitter to be disabled (TXDISINT in STAT = 1) before writing 1 to TXBRKEN."
            name="CONTINOUS"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e64028">
      <enum description="Disabled. The USART presents all incoming data." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The USART receiver ignores incoming data that does not have the most significant bit of the data (typically the 9th bit) = 1. When the data MSB bit = 1, the receiver treats the incoming data normally, generating a received data interrupt. Software can then check the data to see if this is an address that should be handled. If it is, the ADDRDET bit is cleared by software and further incoming data is handled normally."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e64074">
      <enum description="Not disabled. USART transmitter is not disabled." name="ENABLED"
            value="0"/>
      <enum description="Disabled. USART transmitter is disabled after any character currently being transmitted is complete. This feature can be used to facilitate software flow control."
            name="DISABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e64120">
      <enum description="Clock on character. In synchronous mode, SCLK cycles only when characters are being sent on Un_TXD or to complete a character that is being received."
            name="CLOCK_ON_CHARACTER"
            value="0"/>
      <enum description="Continuous clock. SCLK runs continuously in synchronous mode, allowing characters to be received on Un_RxD independently from transmission on Un_TXD)."
            name="CONTINOUS_CLOCK"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e64166">
      <enum description="No effect. No effect on the CC bit." name="NO_EFFECT" value="0"/>
      <enum description="Auto-clear. The CC bit is automatically cleared when a complete character has been received. This bit is cleared at the same time."
            name="AUTO_CLEAR"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e64213">
      <enum description="Disabled. USART is in normal operating mode." name="DISABLED"
            value="0"/>
      <enum description="Enabled. USART is in autobaud mode. This bit should only be set when the USART receiver is idle. The first start bit of RX is measured and used the update the BRG register to match the received data rate. AUTOBAUD is cleared once this process is complete, or if there is an AERR."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65245">
      <enum description="The transmit FIFO is not enabled." name="DISABLED" value="0"/>
      <enum description="The transmit FIFO is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e65291">
      <enum description="The receive FIFO is not enabled." name="DISABLED" value="0"/>
      <enum description="The receive FIFO is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e65355">
      <enum description="DMA is not used for the transmit function." name="DISABLED"
            value="0"/>
      <enum description="Trigger DMA for the transmit function if the FIFO is not full. Generally, data interrupts would be disabled if DMA is enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65401">
      <enum description="DMA is not used for the receive function." name="DISABLED"
            value="0"/>
      <enum description="Trigger DMA for the receive function if the FIFO is not empty. Generally, data interrupts would be disabled if DMA is enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65448">
      <enum description="Only enabled interrupts will wake up the device form reduced power modes."
            name="DISABLED"
            value="0"/>
      <enum description="A device wake-up for DMA will occur if the transmit FIFO level reaches the value specified by TXLVL in FIFOTRIG, even when the TXLVL interrupt is not enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65494">
      <enum description="Only enabled interrupts will wake up the device form reduced power modes."
            name="DISABLED"
            value="0"/>
      <enum description="A device wake-up for DMA will occur if the receive FIFO level reaches the value specified by RXLVL in FIFOTRIG, even when the RXLVL interrupt is not enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65796">
      <enum description="Transmit FIFO level does not generate a FIFO level trigger."
            name="DISABLED"
            value="0"/>
      <enum description="An trigger will be generated if the transmit FIFO level reaches the value specified by the TXLVL field in this register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65842">
      <enum description="Receive FIFO level does not generate a FIFO level trigger."
            name="DISABLED"
            value="0"/>
      <enum description="An trigger will be generated if the receive FIFO level reaches the value specified by the RXLVL field in this register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65952">
      <enum description="No interrupt will be generated for a transmit error."
            name="DISABLED"
            value="0"/>
      <enum description="An interrupt will be generated when a transmit error occurs."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e65998">
      <enum description="No interrupt will be generated for a receive error."
            name="DISABLED"
            value="0"/>
      <enum description="An interrupt will be generated when a receive error occurs."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e66044">
      <enum description="No interrupt will be generated based on the TX FIFO level."
            name="DISABLED"
            value="0"/>
      <enum description="If TXLVLENA in the FIFOTRIG register = 1, an interrupt will be generated when the TX FIFO level decreases to the level specified by TXLVL in the FIFOTRIG register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e66090">
      <enum description="No interrupt will be generated based on the RX FIFO level."
            name="DISABLED"
            value="0"/>
      <enum description="If RXLVLENA in the FIFOTRIG register = 1, an interrupt will be generated when the when the RX FIFO level increases to the level specified by RXLVL in the FIFOTRIG register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e68108">
      <enum description="FIFO is not enabled. Enabling a DMIC channel with the FIFO disabled could be useful while data is being streamed to the I2S, or in order to avoid a filter settling delay when a channel is re-enabled after a period when the data was not needed."
            name="DISABLED"
            value="0"/>
      <enum description="FIFO is enabled. The FIFO must be enabled in order for the CPU or DMA to read data from the DMIC via the FIFODATA register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e68154">
      <enum description="Reset the FIFO." name="RESET" value="0"/>
      <enum description="Normal operation" name="NORMAL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e68200">
      <enum description="FIFO level interrupts are not enabled." name="DISABLED" value="0"/>
      <enum description="FIFO level interrupts are enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e68246">
      <enum description="DMA requests are not enabled." name="DISABLED" value="0"/>
      <enum description="DMA requests based on FIFO level are enabled." name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e68467">
      <enum description="Capture PDM_DATA on the rising edge of PDM_CLK."
            name="RISING_EDGE"
            value="0"/>
      <enum description="Capture PDM_DATA on the falling edge of PDM_CLK."
            name="FALLING_EDGE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e68513">
      <enum description="Standard half rate sampling. The clock to the DMIC is sent at the same rate as the decimator is providing."
            name="STANDARD"
            value="0"/>
      <enum description="Use half rate sampling. The clock to the DMIC is sent at half the rate as the decimator is providing."
            name="HALF_RATE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e68587">
      <enum description="Flat response, no filter." name="FLAT_RESPONSE" value="0"/>
      <enum description="155 Hz." name="HZ_155" value="0x1"/>
      <enum description="78 Hz." name="HZ_78" value="0x2"/>
      <enum description="39 Hz" name="HZ_39" value="0x3"/>
   </enumeration>
   <enumeration id="d1e68675">
      <enum description="Results roll over if out range and do not saturate."
            name="DO_NOT_SATURATE"
            value="0"/>
      <enum description="If the result overflows, it saturates at 0xFFFF for positive overflow and 0x8000 for negative overflow."
            name="SATURATE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e68896">
      <enum description="Use 1FS output for PCM data." name="USE_1FS" value="0"/>
      <enum description="Use 2FS output for PCM data." name="USE_2FS" value="0x1"/>
   </enumeration>
   <enumeration id="d1e69017">
      <enum description="First filter by-pass." name="BYPASS" value="0"/>
      <enum description="High pass filter with -3dB cut-off at 1750Hz."
            name="HIGH_PASS_1750HZ"
            value="0x1"/>
      <enum description="High pass filter with -3dB cut-off at 215Hz."
            name="HIGH_PASS_215HZ"
            value="0x2"/>
   </enumeration>
   <enumeration id="d1e69103">
      <enum description="Normal operation, waiting for HWVAD trigger event (stage 0)."
            name="NORMAL"
            value="0"/>
      <enum description="Reset internal interrupt flag by writing a '1' pulse."
            name="RESET"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e69747">
      <enum description="All I 2S channel pairs in this Flexcomm are disabled and the internal state machines, counters, and flags are reset. No other channel pairs can be enabled."
            name="DISABLED"
            value="0"/>
      <enum description="This I 2S channel pair is enabled. Other channel pairs in this Flexcomm may be enabled in their individual PAIRENABLE bits."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e69793">
      <enum description="Normal operation, or resuming normal operation at the next frame if the I2S has already been paused."
            name="NORMAL"
            value="0"/>
      <enum description="A pause in the data flow is being requested. It is in effect when DATAPAUSED in STAT = 1."
            name="PAUSE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e69839">
      <enum description="1 I2S channel pairs in this flexcomm" name="PAIRS_1" value="0"/>
      <enum description="2 I2S channel pairs in this flexcomm" name="PAIRS_2" value="0x1"/>
      <enum description="3 I2S channel pairs in this flexcomm" name="PAIRS_3" value="0x2"/>
      <enum description="4 I2S channel pairs in this flexcomm" name="PAIRS_4" value="0x3"/>
   </enumeration>
   <enumeration id="d1e69909">
      <enum description="Normal slave mode, the default mode. SCK and WS are received from a master and used to transmit or receive data."
            name="NORMAL_SLAVE_MODE"
            value="0"/>
      <enum description="WS synchronized master. WS is received from another master and used to synchronize the generation of SCK, when divided from the Flexcomm function clock."
            name="WS_SYNC_MASTER"
            value="0x1"/>
      <enum description="Master using an existing SCK. SCK is received and used directly to generate WS, as well as transmitting or receiving data."
            name="MASTER_USING_SCK"
            value="0x2"/>
      <enum description="Normal master mode. SCK and WS are generated so they can be sent to one or more slave devices."
            name="NORMAL_MASTER"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e69979">
      <enum description="I2S mode a.k.a. 'classic' mode. WS has a 50% duty cycle, with (for each enabled channel pair) one piece of left channel data occurring during the first phase, and one pieces of right channel data occurring during the second phase. In this mode, the data region begins one clock after the leading WS edge for the frame. For a 50% WS duty cycle, FRAMELEN must define an even number of I2S clocks for the frame. If FRAMELEN defines an odd number of clocks per frame, the extra clock will occur on the right."
            name="CLASSIC_MODE"
            value="0"/>
      <enum description="DSP mode where WS has a 50% duty cycle. See remark for mode 0."
            name="DSP_MODE_WS_50_DUTYCYCLE"
            value="0x1"/>
      <enum description="DSP mode where WS has a one clock long pulse at the beginning of each data frame."
            name="DSP_MODE_WS_1_CLOCK"
            value="0x2"/>
      <enum description="DSP mode where WS has a one data slot long pulse at the beginning of each data frame."
            name="DSP_MODE_WS_1_DATA"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e70050">
      <enum description="The right channel is taken from the high part of the FIFO data. For example, when data is 16 bits, FIFO bits 31:16 are used for the right channel."
            name="RIGHT_HIGH"
            value="0"/>
      <enum description="The right channel is taken from the low part of the FIFO data. For example, when data is 16 bits, FIFO bits 15:0 are used for the right channel."
            name="RIGHT_LOW"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70096">
      <enum description="Data is transferred between the FIFO and the I2S serializer/deserializer right justified, i.e. starting from bit 0 and continuing to the position defined by DATALEN. This would correspond to right justified data in the stream on the data bus."
            name="RIGHT_JUSTIFIED"
            value="0"/>
      <enum description="Data is transferred between the FIFO and the I2S serializer/deserializer left justified, i.e. starting from the MSB of the FIFO entry and continuing for the number of bits defined by DATALEN. This would correspond to left justified data in the stream on the data bus."
            name="LEFT_JUSTIFIED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70142">
      <enum description="I2S data for this channel pair is treated as left and right channels."
            name="DUAL_CHANNEL"
            value="0"/>
      <enum description="I2S data for this channel pair is treated as a single channel, functionally the left channel for this pair. In mode 0 only, the right side of the frame begins at POSITION = 0x100. This is because mode 0 makes a clear distinction between the left and right sides of the frame. When ONECHANNEL = 1, the single channel of data may be placed on the right by setting POSITION to 0x100 + the data position within the right side (e.g. 0x108 would place data starting at the 8th clock after the middle of the frame). In other modes, data for the single channel of data is placed at the clock defined by POSITION."
            name="SINGLE_CHANNEL"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70188">
      <enum description="Normal operation, data is transferred to or from the Flexcomm FIFO."
            name="NORMAL"
            value="0"/>
      <enum description="The data source is the D-Mic subsystem. When PDMDATA = 1, only the primary channel pair can be used in this Flexcomm. If ONECHANNEL = 1, only the PDM left data is used. the WS rate must match the Fs (sample rate) of the D-Mic decimator. A rate mismatch will at some point cause the I2S to overrun or underrun."
            name="DMIC_SUBSYSTEM"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70234">
      <enum description="Data is launched on SCK falling edges and sampled on SCK rising edges (standard for I2S)."
            name="FALLING_EDGE"
            value="0"/>
      <enum description="Data is launched on SCK rising edges and sampled on SCK falling edges."
            name="RISING_EDGE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70280">
      <enum description="Data frames begin at a falling edge of WS (standard for classic I2S)."
            name="NOT_INVERTED"
            value="0"/>
      <enum description="WS is inverted, resulting in a data frame beginning at a rising edge of WS (standard for most 'non-classic' variations of I2S)."
            name="INVERTED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70437">
      <enum description="The transmitter/receiver for channel pair is currently idle."
            name="IDLE"
            value="0"/>
      <enum description="The transmitter/receiver for channel pair is currently processing data."
            name="BUSY"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70483">
      <enum description="No error has been recorded." name="NO_ERROR" value="0"/>
      <enum description="An error has been recorded for some channel pair that is operating in slave mode. ERROR is cleared by writing a 1 to this bit position."
            name="ERROR"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70529">
      <enum description="Left channel." name="LEFT_CHANNEL" value="0"/>
      <enum description="Right channel." name="RIGHT_CHANNEL" value="0x1"/>
   </enumeration>
   <enumeration id="d1e70575">
      <enum description="Data is not currently paused. A data pause may have been requested but is not yet in force, waiting for an allowed pause point. Refer to the description of the DATAPAUSE control bit in the CFG1 register."
            name="NOT_PAUSED"
            value="0"/>
      <enum description="A data pause has been requested and is now in force."
            name="PAUSED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70695">
      <enum description="The transmit FIFO is not enabled." name="DISABLED" value="0"/>
      <enum description="The transmit FIFO is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e70741">
      <enum description="The receive FIFO is not enabled." name="DISABLED" value="0"/>
      <enum description="The receive FIFO is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e70787">
      <enum description="If the TX FIFO becomes empty, the last value is sent. This setting may be used when the data length is 24 bits or less, or when MONO = 1 for this channel pair."
            name="LAST_VALUE"
            value="0"/>
      <enum description="If the TX FIFO becomes empty, 0 is sent. Use if the data length is greater than 24 bits or if zero fill is preferred."
            name="ZERO"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70833">
      <enum description="48-bit I2S FIFO entries are handled as all 24-bit values."
            name="BIT_24"
            value="0"/>
      <enum description="48-bit I2S FIFO entries are handled as alternating 32-bit and 16-bit values."
            name="BIT_32_16"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70898">
      <enum description="DMA is not used for the transmit function." name="DISABLED"
            value="0"/>
      <enum description="Trigger DMA for the transmit function if the FIFO is not full. Generally, data interrupts would be disabled if DMA is enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70944">
      <enum description="DMA is not used for the receive function." name="DISABLED"
            value="0"/>
      <enum description="Trigger DMA for the receive function if the FIFO is not empty. Generally, data interrupts would be disabled if DMA is enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e70990">
      <enum description="Only enabled interrupts will wake up the device form reduced power modes."
            name="DISABLED"
            value="0"/>
      <enum description="A device wake-up for DMA will occur if the transmit FIFO level reaches the value specified by TXLVL in FIFOTRIG, even when the TXLVL interrupt is not enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e71036">
      <enum description="Only enabled interrupts will wake up the device form reduced power modes."
            name="DISABLED"
            value="0"/>
      <enum description="A device wake-up for DMA will occur if the receive FIFO level reaches the value specified by RXLVL in FIFOTRIG, even when the RXLVL interrupt is not enabled."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e71119">
      <enum description="Debug reads of the FIFO do not pop the FIFO." name="DO_NOT_POP"
            value="0"/>
      <enum description="A debug read will cause the FIFO to pop." name="POP" value="0x1"/>
   </enumeration>
   <enumeration id="d1e71385">
      <enum description="Transmit FIFO level does not generate a FIFO level trigger."
            name="DISABLED"
            value="0"/>
      <enum description="An trigger will be generated if the transmit FIFO level reaches the value specified by the TXLVL field in this register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e71431">
      <enum description="Receive FIFO level does not generate a FIFO level trigger."
            name="DISABLED"
            value="0"/>
      <enum description="An trigger will be generated if the receive FIFO level reaches the value specified by the RXLVL field in this register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e71541">
      <enum description="No interrupt will be generated for a transmit error."
            name="DISABLED"
            value="0"/>
      <enum description="An interrupt will be generated when a transmit error occurs."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e71587">
      <enum description="No interrupt will be generated for a receive error."
            name="DISABLED"
            value="0"/>
      <enum description="An interrupt will be generated when a receive error occurs."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e71633">
      <enum description="No interrupt will be generated based on the TX FIFO level."
            name="DISABLED"
            value="0"/>
      <enum description="If TXLVLENA in the FIFOTRIG register = 1, an interrupt will be generated when the TX FIFO level decreases to the level specified by TXLVL in the FIFOTRIG register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e71679">
      <enum description="No interrupt will be generated based on the RX FIFO level."
            name="DISABLED"
            value="0"/>
      <enum description="If RXLVLENA in the FIFOTRIG register = 1, an interrupt will be generated when the when the RX FIFO level increases to the level specified by RXLVL in the FIFOTRIG register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e72364">
      <enum description="Synchronous mode. The ADC clock is derived from the system clock based on the divide value selected in the CLKDIV field. The ADC clock will be started in a controlled fashion in response to a trigger to eliminate any uncertainty in the launching of an ADC conversion in response to any synchronous (on-chip) trigger. In Synchronous mode with the SYNCBYPASS bit (in a sequence control register) set, sampling of the ADC input and start of conversion will initiate 2 system clocks after the leading edge of a (synchronous) trigger pulse."
            name="SYNCHRONOUS_MODE"
            value="0"/>
      <enum description="Asynchronous mode. The ADC clock is based on the output of the ADC clock divider ADCCLKSEL in the SYSCON block."
            name="ASYNCHRONOUS_MODE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e72410">
      <enum description="6-bit resolution. An ADC conversion requires 9 ADC clocks, plus any clocks specified by the TSAMP field."
            name="RESOLUTION_6_BIT"
            value="0"/>
      <enum description="8-bit resolution. An ADC conversion requires 11 ADC clocks, plus any clocks specified by the TSAMP field."
            name="RESOLUTION_8_BIT"
            value="0x1"/>
      <enum description="10-bit resolution. An ADC conversion requires 13 ADC clocks, plus any clocks specified by the TSAMP field."
            name="RESOLUTION_10_BIT"
            value="0x2"/>
      <enum description="12-bit resolution. An ADC conversion requires 15 ADC clocks, plus any clocks specified by the TSAMP field."
            name="RESOLUTION_12_BIT"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e72480">
      <enum description="Calibrate. The stored calibration value will be applied to the ADC during conversions to compensated for offset error. A calibration cycle must be performed each time the chip is powered-up. Re-calibration may be warranted periodically - especially if operating conditions have changed."
            name="CALIBRATE"
            value="0"/>
      <enum description="Bypass calibration. Calibration is not utilized. Less time is required when enabling the ADC - particularly following chip power-up. Attempts to launch a calibration cycle are blocked when this bit is set."
            name="BYPASS_CALIBRATION"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e72572">
      <enum description="ADC0_IN0 function." name="ADC0_IN0" value="0"/>
      <enum description="Internal temperature sensor." name="TEMPERATURE_SENSOR"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e72691">
      <enum description="Negative edge. A negative edge launches the conversion sequence on the selected trigger input."
            name="NEGATIVE_EDGE"
            value="0"/>
      <enum description="Positive edge. A positive edge launches the conversion sequence on the selected trigger input."
            name="POSITIVE_EDGE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e72737">
      <enum description="Enable trigger synchronization. The hardware trigger bypass is not enabled."
            name="ENABLE_TRIGGER_SYNCH"
            value="0"/>
      <enum description="Bypass trigger synchronization. The hardware trigger bypass is enabled."
            name="BYPASS_TRIGGER_SYNCH"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e72838">
      <enum description="Low priority. Any B trigger which occurs while an A conversion sequence is active will be ignored and lost."
            name="LOW_PRIORITY"
            value="0"/>
      <enum description="High priority. Setting this bit to a 1 will permit any enabled B sequence trigger (including a B sequence software start) to immediately interrupt sequence A and launch a B sequence in it's place. The conversion currently in progress will be terminated. The A sequence that was interrupted will automatically resume after the B sequence completes. The channel whose conversion was terminated will be re-sampled and the conversion sequence will resume from that point."
            name="HIGH_PRIORITY"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e72884">
      <enum description="End of conversion. The sequence A interrupt/DMA trigger will be set at the end of each individual ADC conversion performed under sequence A. This flag will mirror the DATAVALID bit in the SEQA_GDAT register. The OVERRUN bit in the SEQA_GDAT register will contribute to generation of an overrun interrupt/DMA trigger if enabled."
            name="END_OF_CONVERSION"
            value="0"/>
      <enum description="End of sequence. The sequence A interrupt/DMA trigger will be set when the entire set of sequence-A conversions completes. This flag will need to be explicitly cleared by software or by the DMA-clear signal in this mode. The OVERRUN bit in the SEQA_GDAT register will NOT contribute to generation of an overrun interrupt/DMA trigger since it is assumed this register may not be utilized in this mode."
            name="END_OF_SEQUENCE"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e72930">
      <enum description="Disabled. Sequence n is disabled. Sequence n triggers are ignored. If this bit is cleared while sequence n is in progress, the sequence will be halted at the end of the current conversion. After the sequence is re-enabled, a new trigger will be required to restart the sequence beginning with the next enabled channel."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. Sequence n is enabled." name="ENABLED" value="0x1"/>
   </enumeration>
   <enumeration id="d1e73478">
      <enum description="Threshold 0. Results for this channel will be compared against the threshold levels indicated in the THR0_LOW and THR0_HIGH registers."
            name="THRESHOLD0"
            value="0"/>
      <enum description="Threshold 1. Results for this channel will be compared against the threshold levels indicated in the THR1_LOW and THR1_HIGH registers."
            name="THRESHOLD1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e73752">
      <enum description="Disabled. The sequence A interrupt/DMA trigger is disabled."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The sequence A interrupt/DMA trigger is enabled and will be asserted either upon completion of each individual conversion performed as part of sequence A, or upon completion of the entire A sequence of conversions, depending on the MODE bit in the SEQA_CTRL register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e73798">
      <enum description="Disabled. The sequence B interrupt/DMA trigger is disabled."
            name="DISABLED"
            value="0"/>
      <enum description="Enabled. The sequence B interrupt/DMA trigger is enabled and will be asserted either upon completion of each individual conversion performed as part of sequence B, or upon completion of the entire B sequence of conversions, depending on the MODE bit in the SEQB_CTRL register."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e73844">
      <enum description="Disabled. The overrun interrupt is disabled." name="DISABLED"
            value="0"/>
      <enum description="Enabled. The overrun interrupt is enabled. Detection of an overrun condition on any of the 12 channel data registers will cause an overrun interrupt/DMA trigger. In addition, if the MODE bit for a particular sequence is 0, then an overrun in the global data register for that sequence will also cause this interrupt/DMA trigger to be asserted."
            name="ENABLED"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e73890">
      <enum description="Disabled." name="DISABLED" value="0"/>
      <enum description="Outside threshold." name="OUTSIDE_THRESHOLD" value="0x1"/>
      <enum description="Crossing threshold." name="CROSSING_THRESHOLD" value="0x2"/>
   </enumeration>
   <enumeration id="d1e78170">
      <enum description="Disabled." name="ITMENA_0" value="0"/>
      <enum description="Enabled." name="ITMENA_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e78216">
      <enum description="Disabled." name="TSENA_0" value="0"/>
      <enum description="Enabled." name="TSENA_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e78262">
      <enum description="Disabled." name="SYNCENA_0" value="0"/>
      <enum description="Enabled." name="SYNCENA_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e78308">
      <enum description="Disabled." name="TXENA_0" value="0"/>
      <enum description="Enabled." name="TXENA_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e78354">
      <enum description="Timestamp counter uses the processor system clock."
            name="SWOENA_0"
            value="0"/>
      <enum description="Timestamp counter uses asynchronous clock from the TPIU interface."
            name="SWOENA_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e78401">
      <enum description="No prescaling." name="TSPrescale_0" value="0"/>
      <enum description="Divide by 4." name="TSPrescale_1" value="0x1"/>
      <enum description="Divide by 16." name="TSPrescale_2" value="0x2"/>
      <enum description="Divide by 64." name="TSPrescale_3" value="0x3"/>
   </enumeration>
   <enumeration id="d1e78471">
      <enum description="Disable generation of global timestamps." name="GTSFREQ_0"
            value="0"/>
      <enum description="Generate timestamp request whenever the ITM detects a change in global timestamp counter bits [47:7]. This is approximately every 128 cycles."
            name="GTSFREQ_1"
            value="0x1"/>
      <enum description="Generate timestamp request whenever the ITM detects a change in global timestamp counter bits [47:13]. This is approximately every 8192 cycles."
            name="GTSFREQ_2"
            value="0x2"/>
      <enum description="Generate a timestamp after every packet, if the output FIFO is empty."
            name="GTSFREQ_3"
            value="0x3"/>
   </enumeration>
   <enumeration id="d1e78559">
      <enum description="ITM is not processing any events." name="BUSY_0" value="0"/>
      <enum description="ITM events present and beeing drained." name="BUSY_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e79204">
      <enum description="ROM table." name="ComponentClass_1" value="0x1"/>
      <enum description="CoreSight component." name="ComponentClass_9" value="0x9"/>
      <enum description="PrimeCell of system component with no standardized register layout, for backward compatibility."
            name="ComponentClass_15"
            value="0xf"/>
   </enumeration>
   <enumeration id="d1e79616">
      <enum description="there are preempted active exceptions to execute"
            name="RETTOBASE_0"
            value="0"/>
      <enum description="there are no active exceptions, or the currently-executing exception is the only active exception"
            name="RETTOBASE_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e79698">
      <enum description="Will not service" name="ISRPREEMPT_0" value="0"/>
      <enum description="Will service a pending exception" name="ISRPREEMPT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e79745">
      <enum description="no effect" name="PENDSTCLR_0" value="0"/>
      <enum description="removes the pending state from the SysTick exception"
            name="PENDSTCLR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e79791">
      <enum description="write: no effect; read: SysTick exception is not pending"
            name="PENDSTSET_0"
            value="0"/>
      <enum description="write: changes SysTick exception state to pending; read: SysTick exception is pending"
            name="PENDSTSET_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e79837">
      <enum description="no effect" name="PENDSVCLR_0" value="0"/>
      <enum description="removes the pending state from the PendSV exception"
            name="PENDSVCLR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e79883">
      <enum description="write: no effect; read: PendSV exception is not pending"
            name="PENDSVSET_0"
            value="0"/>
      <enum description="write: changes PendSV exception state to pending; read: PendSV exception is pending"
            name="PENDSVSET_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e79929">
      <enum description="write: no effect; read: NMI exception is not pending"
            name="NMIPENDSET_0"
            value="0"/>
      <enum description="write: changes NMI exception state to pending; read: NMI exception is pending"
            name="NMIPENDSET_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e80085">
      <enum description="no system reset request" name="SYSRESETREQ_0" value="0"/>
      <enum description="asserts a signal to the outer system that requests a reset"
            name="SYSRESETREQ_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e80149">
      <enum description="Little-endian" name="ENDIANNESS_0" value="0"/>
      <enum description="Big-endian" name="ENDIANNESS_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e80243">
      <enum description="o not sleep when returning to Thread mode" name="SLEEPONEXIT_0"
            value="0"/>
      <enum description="enter sleep, or deep sleep, on return from an ISR"
            name="SLEEPONEXIT_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e80289">
      <enum description="sleep" name="SLEEPDEEP_0" value="0"/>
      <enum description="deep sleep" name="SLEEPDEEP_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e80335">
      <enum description="only enabled interrupts or events can wakeup the processor, disabled interrupts are excluded"
            name="SEVONPEND_0"
            value="0"/>
      <enum description="enabled events and all interrupts, including disabled interrupts, can wakeup the processor"
            name="SEVONPEND_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e80409">
      <enum description="processor can enter Thread mode only when no exception is active"
            name="NONBASETHRDENA_0"
            value="0"/>
      <enum description="processor can enter Thread mode from any level under the control of an EXC_RETURN value"
            name="NONBASETHRDENA_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e80455">
      <enum description="disable" name="USERSETMPEND_0" value="0"/>
      <enum description="enable" name="USERSETMPEND_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e80501">
      <enum description="do not trap unaligned halfword and word accesses"
            name="UNALIGN_TRP_0"
            value="0"/>
      <enum description="trap unaligned halfword and word accesses" name="UNALIGN_TRP_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e80547">
      <enum description="do not trap divide by 0" name="DIV_0_TRP_0" value="0"/>
      <enum description="trap divide by 0" name="DIV_0_TRP_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e80593">
      <enum description="data bus faults caused by load and store instructions cause a lock-up"
            name="BFHFNMIGN_0"
            value="0"/>
      <enum description="handlers running at priority -1 and -2 ignore data bus faults caused by load and store instructions"
            name="BFHFNMIGN_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e80640">
      <enum description="4-byte aligned" name="STKALIGN_0" value="0"/>
      <enum description="8-byte aligned" name="STKALIGN_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e80906">
      <enum description="exception is not active" name="MEMFAULTACT_0" value="0"/>
      <enum description="exception is active" name="MEMFAULTACT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e80952">
      <enum description="exception is not active" name="BUSFAULTACT_0" value="0"/>
      <enum description="exception is active" name="BUSFAULTACT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e80998">
      <enum description="exception is not active" name="USGFAULTACT_0" value="0"/>
      <enum description="exception is active" name="USGFAULTACT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81044">
      <enum description="exception is not active" name="SVCALLACT_0" value="0"/>
      <enum description="exception is active" name="SVCALLACT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81090">
      <enum description="exception is not active" name="MONITORACT_0" value="0"/>
      <enum description="exception is active" name="MONITORACT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81137">
      <enum description="exception is not active" name="PENDSVACT_0" value="0"/>
      <enum description="exception is active" name="PENDSVACT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81183">
      <enum description="exception is not active" name="SYSTICKACT_0" value="0"/>
      <enum description="exception is active" name="SYSTICKACT_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81229">
      <enum description="exception is not pending" name="USGFAULTPENDED_0" value="0"/>
      <enum description="exception is pending" name="USGFAULTPENDED_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81275">
      <enum description="exception is not pending" name="MEMFAULTPENDED_0" value="0"/>
      <enum description="exception is pending" name="MEMFAULTPENDED_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81321">
      <enum description="exception is not pending" name="BUSFAULTPENDED_0" value="0"/>
      <enum description="exception is pending" name="BUSFAULTPENDED_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81367">
      <enum description="exception is not pending" name="SVCALLPENDED_0" value="0"/>
      <enum description="exception is pending" name="SVCALLPENDED_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81414">
      <enum description="disable the exception" name="MEMFAULTENA_0" value="0"/>
      <enum description="enable the exception" name="MEMFAULTENA_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81460">
      <enum description="disable the exception" name="BUSFAULTENA_0" value="0"/>
      <enum description="enable the exception" name="BUSFAULTENA_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81506">
      <enum description="disable the exception" name="USGFAULTENA_0" value="0"/>
      <enum description="enable the exception" name="USGFAULTENA_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81581">
      <enum description="no instruction access violation fault" name="IACCVIOL_0" value="0"/>
      <enum description="the processor attempted an instruction fetch from a location that does not permit execution"
            name="IACCVIOL_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e81627">
      <enum description="no data access violation fault" name="DACCVIOL_0" value="0"/>
      <enum description="the processor attempted a load or store at a location that does not permit the operation"
            name="DACCVIOL_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e81673">
      <enum description="no unstacking fault" name="MUNSTKERR_0" value="0"/>
      <enum description="unstack for an exception return has caused one or more access violations"
            name="MUNSTKERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e81719">
      <enum description="no stacking fault" name="MSTKERR_0" value="0"/>
      <enum description="stacking for an exception entry has caused one or more access violations"
            name="MSTKERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e81765">
      <enum description="No MemManage fault occurred during floating-point lazy state preservation"
            name="MLSPERR_0"
            value="0"/>
      <enum description="A MemManage fault occurred during floating-point lazy state preservation"
            name="MLSPERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e81812">
      <enum description="value in MMAR is not a valid fault address" name="MMARVALID_0"
            value="0"/>
      <enum description="MMAR holds a valid fault address" name="MMARVALID_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81858">
      <enum description="no instruction bus error" name="IBUSERR_0" value="0"/>
      <enum description="instruction bus error" name="IBUSERR_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e81904">
      <enum description="no precise data bus error" name="PRECISERR_0" value="0"/>
      <enum description="a data bus error has occurred, and the PC value stacked for the exception return points to the instruction that caused the fault"
            name="PRECISERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e81950">
      <enum description="no imprecise data bus error" name="IMPRECISERR_0" value="0"/>
      <enum description="a data bus error has occurred, but the return address in the stack frame is not related to the instruction that caused the error"
            name="IMPRECISERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e81996">
      <enum description="no unstacking fault" name="UNSTKERR_0" value="0"/>
      <enum description="unstack for an exception return has caused one or more BusFaults"
            name="UNSTKERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82042">
      <enum description="no stacking fault" name="STKERR_0" value="0"/>
      <enum description="stacking for an exception entry has caused one or more BusFaults"
            name="STKERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82089">
      <enum description="No bus fault occurred during floating-point lazy state preservation"
            name="LSPERR_0"
            value="0"/>
      <enum description="A bus fault occurred during floating-point lazy state preservation"
            name="LSPERR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82135">
      <enum description="value in BFAR is not a valid fault address" name="BFARVALID_0"
            value="0"/>
      <enum description="BFAR holds a valid fault address" name="BFARVALID_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e82181">
      <enum description="no undefined instruction UsageFault" name="UNDEFINSTR_0" value="0"/>
      <enum description="the processor has attempted to execute an undefined instruction"
            name="UNDEFINSTR_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82227">
      <enum description="no invalid state UsageFault" name="INVSTATE_0" value="0"/>
      <enum description="the processor has attempted to execute an instruction that makes illegal use of the EPSR"
            name="INVSTATE_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82273">
      <enum description="no invalid PC load UsageFault" name="INVPC_0" value="0"/>
      <enum description="the processor has attempted an illegal load of EXC_RETURN to the PC"
            name="INVPC_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82319">
      <enum description="no UsageFault caused by attempting to access a coprocessor"
            name="NOCP_0"
            value="0"/>
      <enum description="the processor has attempted to access a coprocessor" name="NOCP_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82366">
      <enum description="no unaligned access fault, or unaligned access trapping not enabled"
            name="UNALIGNED_0"
            value="0"/>
      <enum description="the processor has made an unaligned memory access"
            name="UNALIGNED_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82412">
      <enum description="no divide by zero fault, or divide by zero trapping not enabled"
            name="DIVBYZERO_0"
            value="0"/>
      <enum description="the processor has executed an SDIV or UDIV instruction with a divisor of 0"
            name="DIVBYZERO_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82486">
      <enum description="no BusFault on vector table read" name="VECTTBL_0" value="0"/>
      <enum description="BusFault on vector table read" name="VECTTBL_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e82532">
      <enum description="no forced HardFault" name="FORCED_0" value="0"/>
      <enum description="forced HardFault" name="FORCED_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e82624">
      <enum description="No active halt request debug event" name="HALTED_0" value="0"/>
      <enum description="Halt request debug event active" name="HALTED_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e82670">
      <enum description="No current breakpoint debug event" name="BKPT_0" value="0"/>
      <enum description="At least one current breakpoint debug event" name="BKPT_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82716">
      <enum description="No current debug events generated by the DWT" name="DWTTRAP_0"
            value="0"/>
      <enum description="At least one current debug event generated by the DWT"
            name="DWTTRAP_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e82762">
      <enum description="No Vector catch triggered" name="VCATCH_0" value="0"/>
      <enum description="Vector catch triggered" name="VCATCH_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e82808">
      <enum description="No EDBGRQ debug event" name="EXTERNAL_0" value="0"/>
      <enum description="EDBGRQ debug event" name="EXTERNAL_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e83054">
      <enum description="counter disabled" name="ENABLE_0" value="0"/>
      <enum description="counter enabled" name="ENABLE_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e83100">
      <enum description="counting down to 0 does not assert the SysTick exception request"
            name="TICKINT_0"
            value="0"/>
      <enum description="counting down to 0 asserts the SysTick exception request"
            name="TICKINT_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e83146">
      <enum description="external clock" name="CLKSOURCE_0" value="0"/>
      <enum description="processor clock" name="CLKSOURCE_1" value="0x1"/>
   </enumeration>
   <enumeration id="d1e83348">
      <enum description="10ms calibration value is exact" name="SKEW_0" value="0"/>
      <enum description="10ms calibration value is inexact, because of the clock frequency"
            name="SKEW_1"
            value="0x1"/>
   </enumeration>
   <enumeration id="d1e83394">
      <enum description="The reference clock is provided" name="NOREF_0" value="0"/>
      <enum description="The reference clock is not provided" name="NOREF_1" value="0x1"/>
   </enumeration>
   <peripheral defRegSize="4" description="LPC5411x System configuration (SYSCON)" id="SYSCON"
               size="0x20048">
      <register description="System Remap register" format="hex0x" id="SYSCON@SYSMEMREMAP"
                offset="0x0"
                size="4"/>
      <register description="AHB multilayer matrix priority control" format="hex0x"
                id="SYSCON@AHBMATPRIO"
                offset="0x10"
                size="4">
         <field description="Cortex-M4 I-Code bus priority. Should typically be lower than PRI_DCODE for best operation."
                format="hex0x"
                id="SYSCON@AHBMATPRIO@PRI-ICODE"
                offset="[1:0]"/>
         <field description="Cortex M4 D-Code bus priority." format="hex0x"
                id="SYSCON@AHBMATPRIO@PRI-DCODE"
                offset="[3:2]"/>
         <field description="Cortex M4 System bus priority." format="hex0x"
                id="SYSCON@AHBMATPRIO@PRI-SYS"
                offset="[5:4]"/>
         <field description="Cortex-M0+ bus priority. Present on selected devices."
                format="hex0x"
                id="SYSCON@AHBMATPRIO@PRI-M0"
                offset="[7:6]"/>
         <field description="USB interface priority." format="hex0x"
                id="SYSCON@AHBMATPRIO@PRI-USB"
                offset="[9:8]"/>
         <field description="DMA controller priority." format="hex0x"
                id="SYSCON@AHBMATPRIO@PRI-DMA"
                offset="[11:10]"/>
      </register>
      <register description="System tick counter calibration" format="hex0x"
                id="SYSCON@SYSTCKCAL"
                offset="0x40"
                size="4">
         <field description="System tick timer calibration value." format="hex0x"
                id="SYSCON@SYSTCKCAL@CAL"
                offset="[23:0]"/>
         <field description="Initial value for the Systick timer." format="hex0x"
                id="SYSCON@SYSTCKCAL@SKEW"
                offset="[24]"/>
         <field description="Initial value for the Systick timer." format="hex0x"
                id="SYSCON@SYSTCKCAL@NOREF"
                offset="[25]"/>
      </register>
      <register description="NMI Source Select" format="hex0x" id="SYSCON@NMISRC" offset="0x48"
                size="4">
         <field description="The IRQ number of the interrupt that acts as the Non-Maskable Interrupt (NMI) for the Cortex-M4, if enabled by NMIENM4."
                format="hex0x"
                id="SYSCON@NMISRC@IRQM4"
                offset="[5:0]"/>
         <field description="The IRQ number of the interrupt that acts as the Non-Maskable Interrupt (NMI) for the Cortex-M0+, if enabled by NMIENM0. Present on selected devices."
                format="hex0x"
                id="SYSCON@NMISRC@IRQM0"
                offset="[13:8]"/>
         <field description="Write a 1 to this bit to enable the Non-Maskable Interrupt (NMI) source selected by IRQM0. Present on selected devices."
                format="hex0x"
                id="SYSCON@NMISRC@NMIENM0"
                offset="[30]"/>
         <field description="Write a 1 to this bit to enable the Non-Maskable Interrupt (NMI) source selected by IRQM4."
                format="hex0x"
                id="SYSCON@NMISRC@NMIENM4"
                offset="[31]"/>
      </register>
      <register description="Asynchronous APB Control" format="hex0x" id="SYSCON@ASYNCAPBCTRL"
                offset="0x4c"
                size="4">
         <field description="Enables the asynchronous APB bridge and subsystem." format="enum"
                enum="d1e472"
                id="SYSCON@ASYNCAPBCTRL@ENABLE"
                offset="[0]"/>
      </register>
      <register description="POR captured value of port n" format="hex0x"
                id="SYSCON@PIOPORCAP0"
                offset="0xc0"
                readOnly="true"
                size="4">
         <field description="State of PIOn_31 through PIOn_0 at power-on reset" format="hex0x"
                id="SYSCON@PIOPORCAP0@PIOPORCAP"
                offset="[31:0]"/>
      </register>
      <register description="POR captured value of port n" format="hex0x"
                id="SYSCON@PIOPORCAP1"
                offset="0xc4"
                readOnly="true"
                size="4">
         <field description="State of PIOn_31 through PIOn_0 at power-on reset" format="hex0x"
                id="SYSCON@PIOPORCAP1@PIOPORCAP"
                offset="[31:0]"/>
      </register>
      <register description="Reset captured value of port n" format="hex0x"
                id="SYSCON@PIORESCAP0"
                offset="0xd0"
                readOnly="true"
                size="4">
         <field description="State of PIOn_31 through PIOn_0 for resets other than POR."
                format="hex0x"
                id="SYSCON@PIORESCAP0@PIORESCAP"
                offset="[31:0]"/>
      </register>
      <register description="Reset captured value of port n" format="hex0x"
                id="SYSCON@PIORESCAP1"
                offset="0xd4"
                readOnly="true"
                size="4">
         <field description="State of PIOn_31 through PIOn_0 for resets other than POR."
                format="hex0x"
                id="SYSCON@PIORESCAP1@PIORESCAP"
                offset="[31:0]"/>
      </register>
      <register description="Peripheral reset control n" format="hex0x" id="SYSCON@PRESETCTRL0"
                offset="0x100"
                size="4">
         <field description="Flash controller reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@FLASH-RST"
                offset="[7]"/>
         <field description="Flash accelerator reset control. Note that the FMC must not be reset while executing from flash, and must be reconfigured after reset. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@FMC-RST"
                offset="[8]"/>
         <field description="Input mux reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@MUX-RST"
                offset="[11]"/>
         <field description="IOCON reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@IOCON-RST"
                offset="[13]"/>
         <field description="GPIO0 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@GPIO0-RST"
                offset="[14]"/>
         <field description="GPIO1 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@GPIO1-RST"
                offset="[15]"/>
         <field description="Pin interrupt (PINT) reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@PINT-RST"
                offset="[18]"/>
         <field description="Grouped interrupt (GINT) reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@GINT-RST"
                offset="[19]"/>
         <field description="DMA0 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@DMA0-RST"
                offset="[20]"/>
         <field description="CRC generator reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@CRC-RST"
                offset="[21]"/>
         <field description="Watchdog timer reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@WWDT-RST"
                offset="[22]"/>
         <field description="ADC0 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL0@ADC0-RST"
                offset="[27]"/>
      </register>
      <register description="Peripheral reset control n" format="hex0x" id="SYSCON@PRESETCTRL1"
                offset="0x104"
                size="4">
         <field description="Multi-rate timer (MRT0) reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@MRT0-RST"
                offset="[0]"/>
         <field description="State configurable timer 0 (SCT0) reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@SCT0-RST"
                offset="[2]"/>
         <field description="Micro-tick Timer reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@UTICK0-RST"
                offset="[10]"/>
         <field description="Flexcomm 0 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC0-RST"
                offset="[11]"/>
         <field description="Flexcomm 1 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC1-RST"
                offset="[12]"/>
         <field description="Flexcomm 2 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC2-RST"
                offset="[13]"/>
         <field description="Flexcomm 3 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC3-RST"
                offset="[14]"/>
         <field description="Flexcomm 4 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC4-RST"
                offset="[15]"/>
         <field description="Flexcomm 5 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC5-RST"
                offset="[16]"/>
         <field description="Flexcomm 6 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC6-RST"
                offset="[17]"/>
         <field description="Flexcomm 7 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@FC7-RST"
                offset="[18]"/>
         <field description="Digital microphone interface reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@DMIC0-RST"
                offset="[19]"/>
         <field description="CTIMER2 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function"
                format="hex0x"
                id="SYSCON@PRESETCTRL1@CTIMER2-RST"
                offset="[22]"/>
         <field description="USB0 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@USB0-RST"
                offset="[25]"/>
         <field description="CTIMER0 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@CTIMER0-RST"
                offset="[26]"/>
         <field description="CTIMER1 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="SYSCON@PRESETCTRL1@CTIMER1-RST"
                offset="[27]"/>
      </register>
      <register description="Set bits in PRESETCTRLn" format="hex0x" id="SYSCON@PRESETCTRLSET0"
                offset="0x120"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the PRESETCTRLn register, if they are implemented. Bits that do not correspond to defined bits in PRESETCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PRESETCTRLSET0@RST-SET"
                offset="[31:0]"/>
      </register>
      <register description="Set bits in PRESETCTRLn" format="hex0x" id="SYSCON@PRESETCTRLSET1"
                offset="0x124"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the PRESETCTRLn register, if they are implemented. Bits that do not correspond to defined bits in PRESETCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PRESETCTRLSET1@RST-SET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in PRESETCTRLn" format="hex0x"
                id="SYSCON@PRESETCTRLCLR0"
                offset="0x140"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the PRESETCTRLn register, if they are implemented. Bits that do not correspond to defined bits in PRESETCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PRESETCTRLCLR0@RST-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in PRESETCTRLn" format="hex0x"
                id="SYSCON@PRESETCTRLCLR1"
                offset="0x144"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the PRESETCTRLn register, if they are implemented. Bits that do not correspond to defined bits in PRESETCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PRESETCTRLCLR1@RST-CLR"
                offset="[31:0]"/>
      </register>
      <register description="System reset status register" format="hex0x"
                id="SYSCON@SYSRSTSTAT"
                offset="0x1f0"
                size="4">
         <field description="POR reset status" format="enum" enum="d1e1320"
                id="SYSCON@SYSRSTSTAT@POR"
                offset="[0]"/>
         <field description="Status of the external RESET pin. External reset status"
                format="enum"
                enum="d1e1366"
                id="SYSCON@SYSRSTSTAT@EXTRST"
                offset="[1]"/>
         <field description="Status of the Watchdog reset" format="enum" enum="d1e1412"
                id="SYSCON@SYSRSTSTAT@WDT"
                offset="[2]"/>
         <field description="Status of the Brown-out detect reset" format="enum" enum="d1e1458"
                id="SYSCON@SYSRSTSTAT@BOD"
                offset="[3]"/>
         <field description="Status of the software system reset" format="enum" enum="d1e1504"
                id="SYSCON@SYSRSTSTAT@SYSRST"
                offset="[4]"/>
      </register>
      <register description="AHB Clock control n" format="hex0x" id="SYSCON@AHBCLKCTRL0"
                offset="0x200"
                size="4">
         <field description="Enables the clock for the Boot ROM. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@ROM"
                offset="[1]"/>
         <field description="Enables the clock for SRAM1. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@SRAM1"
                offset="[3]"/>
         <field description="Enables the clock for SRAM2. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@SRAM2"
                offset="[4]"/>
         <field description="Enables the clock for the flash controller. 0 = Disable; 1 = Enable. This clock is needed for flash programming, not for flash read."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@FLASH"
                offset="[7]"/>
         <field description="Enables the clock for the Flash accelerator. 0 = Disable; 1 = Enable. This clock is needed if the flash is being read."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@FMC"
                offset="[8]"/>
         <field description="Enables the clock for the input muxes. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@INPUTMUX"
                offset="[11]"/>
         <field description="Enables the clock for the IOCON block. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@IOCON"
                offset="[13]"/>
         <field description="Enables the clock for the GPIO0 port registers. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@GPIO0"
                offset="[14]"/>
         <field description="Enables the clock for the GPIO1 port registers. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@GPIO1"
                offset="[15]"/>
         <field description="Enables the clock for the pin interrupt block.0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@PINT"
                offset="[18]"/>
         <field description="Enables the clock for the grouped pin interrupt block. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@GINT"
                offset="[19]"/>
         <field description="Enables the clock for the DMA0 controller. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@DMA0"
                offset="[20]"/>
         <field description="Enables the clock for the CRC engine. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@CRC"
                offset="[21]"/>
         <field description="Enables the clock for the Watchdog Timer. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@WWDT"
                offset="[22]"/>
         <field description="Enables the bus clock for the RTC. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@RTC"
                offset="[23]"/>
         <field description="Enables the clock for the Mailbox. 0 = Disable; 1 = Enable. Present on selected devices"
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@MAILBOX"
                offset="[26]"/>
         <field description="Enables the clock for the ADC0 register interface. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL0@ADC0"
                offset="[27]"/>
      </register>
      <register description="AHB Clock control n" format="hex0x" id="SYSCON@AHBCLKCTRL1"
                offset="0x204"
                size="4">
         <field description="Enables the clock for the Multi-Rate Timer. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@MRT0"
                offset="[0]"/>
         <field description="Enables the clock for SCT0. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@SCT0"
                offset="[2]"/>
         <field description="Enables the clock for the Micro-tick Timer. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@UTICK0"
                offset="[10]"/>
         <field description="Enables the clock for Flexcomm 0. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM0"
                offset="[11]"/>
         <field description="Enables the clock for Flexcomm 1. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM1"
                offset="[12]"/>
         <field description="Enables the clock for Flexcomm 2. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM2"
                offset="[13]"/>
         <field description="Enables the clock for Flexcomm 3. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM3"
                offset="[14]"/>
         <field description="Enables the clock for Flexcomm 4. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM4"
                offset="[15]"/>
         <field description="Enables the clock for Flexcomm 5. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM5"
                offset="[16]"/>
         <field description="Enables the clock for Flexcomm 6. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM6"
                offset="[17]"/>
         <field description="Enables the clock for Flexcomm 7. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@FLEXCOMM7"
                offset="[18]"/>
         <field description="Enables the clock for the digital microphone interface. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@DMIC0"
                offset="[19]"/>
         <field description="Enables the clock for CTIMER 2. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@CTIMER2"
                offset="[22]"/>
         <field description="Enables the clock for the USB0 interface. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@USB0"
                offset="[25]"/>
         <field description="Enables the clock for timer CTIMER0. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@CTIMER0"
                offset="[26]"/>
         <field description="Enables the clock for timer CTIMER1. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="SYSCON@AHBCLKCTRL1@CTIMER1"
                offset="[27]"/>
      </register>
      <register description="Set bits in AHBCLKCTRLn" format="hex0x" id="SYSCON@AHBCLKCTRLSET0"
                offset="0x220"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the AHBCLKCTRLn register, if they are implemented. Bits that do not correspond to defined bits in AHBCLKCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@AHBCLKCTRLSET0@CLK-SET"
                offset="[31:0]"/>
      </register>
      <register description="Set bits in AHBCLKCTRLn" format="hex0x" id="SYSCON@AHBCLKCTRLSET1"
                offset="0x224"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the AHBCLKCTRLn register, if they are implemented. Bits that do not correspond to defined bits in AHBCLKCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@AHBCLKCTRLSET1@CLK-SET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in AHBCLKCTRLn" format="hex0x"
                id="SYSCON@AHBCLKCTRLCLR0"
                offset="0x240"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the AHBCLKCTRLn register, if they are implemented. Bits that do not correspond to defined bits in AHBCLKCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@AHBCLKCTRLCLR0@CLK-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in AHBCLKCTRLn" format="hex0x"
                id="SYSCON@AHBCLKCTRLCLR1"
                offset="0x244"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the AHBCLKCTRLn register, if they are implemented. Bits that do not correspond to defined bits in AHBCLKCTRLn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@AHBCLKCTRLCLR1@CLK-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Main clock source select A" format="hex0x" id="SYSCON@MAINCLKSELA"
                offset="0x280"
                size="4">
         <field description="Clock source for main clock source selector A" format="enum"
                enum="d1e2336"
                id="SYSCON@MAINCLKSELA@SEL"
                offset="[1:0]"/>
      </register>
      <register description="Main clock source select B" format="hex0x" id="SYSCON@MAINCLKSELB"
                offset="0x284"
                size="4">
         <field description="Clock source for main clock source selector B. Selects the clock source for the main clock."
                format="enum"
                enum="d1e2435"
                id="SYSCON@MAINCLKSELB@SEL"
                offset="[1:0]"/>
      </register>
      <register description="CLKOUT clock source select A" format="hex0x"
                id="SYSCON@CLKOUTSELA"
                offset="0x288"
                size="4">
         <field description="CLKOUT clock source selection" format="enum" enum="d1e2521"
                id="SYSCON@CLKOUTSELA@SEL"
                offset="[2:0]"/>
      </register>
      <register description="PLL clock source select" format="hex0x" id="SYSCON@SYSPLLCLKSEL"
                offset="0x290"
                size="4">
         <field description="System PLL clock source selection" format="enum" enum="d1e2668"
                id="SYSCON@SYSPLLCLKSEL@SEL"
                offset="[2:0]"/>
      </register>
      <register description="SPIFI clock source select" format="hex0x" id="SYSCON@SPIFICLKSEL"
                offset="0x2a0"
                size="4">
         <field description="System PLL clock source selection" format="enum" enum="d1e2778"
                id="SYSCON@SPIFICLKSEL@SEL"
                offset="[2:0]"/>
      </register>
      <register description="ADC clock source select" format="hex0x" id="SYSCON@ADCCLKSEL"
                offset="0x2a4"
                size="4">
         <field description="ADC clock source selection" format="enum" enum="d1e2876"
                id="SYSCON@ADCCLKSEL@SEL"
                offset="[2:0]"/>
      </register>
      <register description="USB clock source select" format="hex0x" id="SYSCON@USBCLKSEL"
                offset="0x2a8"
                size="4">
         <field description="USB device clock source selection" format="enum" enum="d1e2974"
                id="SYSCON@USBCLKSEL@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL0"
                offset="0x2b0"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL0@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL1"
                offset="0x2b4"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL1@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL2"
                offset="0x2b8"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL2@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL3"
                offset="0x2bc"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL3@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL4"
                offset="0x2c0"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL4@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL5"
                offset="0x2c4"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL5@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL6"
                offset="0x2c8"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL6@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Flexcomm 0 clock source select" format="hex0x"
                id="SYSCON@FXCOMCLKSEL7"
                offset="0x2cc"
                size="4">
         <field description="Flexcomm clock source selection. One per Flexcomm." format="enum"
                enum="d1e3079"
                id="SYSCON@FXCOMCLKSEL7@SEL"
                offset="[2:0]"/>
      </register>
      <register description="MCLK clock source select" format="hex0x" id="SYSCON@MCLKCLKSEL"
                offset="0x2e0"
                size="4">
         <field description="MCLK source select. This may be used by Flexcomms that support I2S, and/or by the digital microphone subsystem."
                format="enum"
                enum="d1e3202"
                id="SYSCON@MCLKCLKSEL@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Fractional Rate Generator clock source select" format="hex0x"
                id="SYSCON@FRGCLKSEL"
                offset="0x2e8"
                size="4">
         <field description="Fractional Rate Generator clock source select." format="enum"
                enum="d1e3300"
                id="SYSCON@FRGCLKSEL@SEL"
                offset="[2:0]"/>
      </register>
      <register description="Digital microphone (D-Mic) subsystem clock select" format="hex0x"
                id="SYSCON@DMICCLKSEL"
                offset="0x2ec"
                size="4">
         <field description="D-Mic subsystem clock source select." format="enum" enum="d1e3410"
                id="SYSCON@DMICCLKSEL@SEL"
                offset="[2:0]"/>
      </register>
      <register description="SYSTICK clock divider" format="hex0x" id="SYSCON@SYSTICKCLKDIV"
                offset="0x300"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@SYSTICKCLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@SYSTICKCLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@SYSTICKCLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="Trace clock divider" format="hex0x" id="SYSCON@TRACECLKDIV"
                offset="0x304"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@TRACECLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@TRACECLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@TRACECLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="AHB clock divider" format="hex0x" id="SYSCON@AHBCLKDIV"
                offset="0x380"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@AHBCLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@AHBCLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@AHBCLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="CLKOUT clock divider" format="hex0x" id="SYSCON@CLKOUTDIV"
                offset="0x384"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@CLKOUTDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@CLKOUTDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@CLKOUTDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="SPIFI clock divider" format="hex0x" id="SYSCON@SPIFICLKDIV"
                offset="0x390"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@SPIFICLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@SPIFICLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@SPIFICLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="ADC clock divider" format="hex0x" id="SYSCON@ADCCLKDIV"
                offset="0x394"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@ADCCLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@ADCCLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@ADCCLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="USB clock divider" format="hex0x" id="SYSCON@USBCLKDIV"
                offset="0x398"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@USBCLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@USBCLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@USBCLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="Fractional rate divider" format="hex0x" id="SYSCON@FRGCTRL"
                offset="0x3a0"
                size="4">
         <field description="Denominator of the fractional divider. DIV is equal to the programmed value +1. Always set to 0xFF to use with the fractional baud rate generator."
                format="hex0x"
                id="SYSCON@FRGCTRL@DIV"
                offset="[7:0]"/>
         <field description="Numerator of the fractional divider. MULT is equal to the programmed value."
                format="hex0x"
                id="SYSCON@FRGCTRL@MULT"
                offset="[15:8]"/>
      </register>
      <register description="DMIC clock divider" format="hex0x" id="SYSCON@DMICCLKDIV"
                offset="0x3a8"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@DMICCLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@DMICCLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@DMICCLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="I2S MCLK clock divider" format="hex0x" id="SYSCON@MCLKDIV"
                offset="0x3ac"
                size="4">
         <field description="Clock divider value. 0: Divide by 1 up to 255: Divide by 256."
                format="hex0x"
                id="SYSCON@MCLKDIV@DIV"
                offset="[7:0]"/>
         <field description="Resets the divider counter. Can be used to make sure a new divider value is used right away rather than completing the previous count."
                format="hex0x"
                id="SYSCON@MCLKDIV@RESET"
                offset="[29]"/>
         <field description="Halts the divider counter. The intent is to allow the divider clock source to be changed without the risk of a glitch at the output."
                format="hex0x"
                id="SYSCON@MCLKDIV@HALT"
                offset="[30]"/>
      </register>
      <register description="Flash wait states configuration" format="hex0x"
                id="SYSCON@FLASHCFG"
                offset="0x400"
                size="4">
         <field description="Instruction fetch configuration. This field determines how flash accelerator buffers are used for instruction fetches."
                format="enum"
                enum="d1e4349"
                id="SYSCON@FLASHCFG@FETCHCFG"
                offset="[1:0]"/>
         <field description="Data read configuration. This field determines how flash accelerator buffers are used for data accesses."
                format="enum"
                enum="d1e4407"
                id="SYSCON@FLASHCFG@DATACFG"
                offset="[3:2]"/>
         <field description="Acceleration enable." format="enum" enum="d1e4465"
                id="SYSCON@FLASHCFG@ACCEL"
                offset="[4]"/>
         <field description="Prefetch enable." format="enum" enum="d1e4511"
                id="SYSCON@FLASHCFG@PREFEN"
                offset="[5]"/>
         <field description="Prefetch override. This bit only applies when PREFEN = 1 and a buffered instruction is completing for which the next flash line is not already buffered or being prefetched."
                format="enum"
                enum="d1e4557"
                id="SYSCON@FLASHCFG@PREFOVR"
                offset="[6]"/>
         <field description="Flash memory access time. The number of system clocks used for flash accesses is equal to FLASHTIM +1."
                format="enum"
                enum="d1e4604"
                id="SYSCON@FLASHCFG@FLASHTIM"
                offset="[15:12]"/>
      </register>
      <register description="USB clock control" format="hex0x" id="SYSCON@USBCLKCTRL"
                offset="0x40c"
                size="4">
         <field description="USB_NEED_CLK polarity for triggering the USB wake-up interrupt"
                format="enum"
                enum="d1e4714"
                id="SYSCON@USBCLKCTRL@POL-CLK"
                offset="[1]"/>
      </register>
      <register description="USB clock status" format="hex0x" id="SYSCON@USBCLKSTAT"
                offset="0x410"
                size="4">
         <field description="USB_NEED_CLK signal status" format="enum" enum="d1e4788"
                id="SYSCON@USBCLKSTAT@NEED-CLKST"
                offset="[0]"/>
      </register>
      <register description="Frequency measure register" format="hex0x" id="SYSCON@FREQMECTRL"
                offset="0x418"
                size="4">
         <field description="Stores the capture result which is used to calculate the frequency of the target clock. This field is read-only."
                format="hex0x"
                id="SYSCON@FREQMECTRL@CAPVAL"
                offset="[13:0]"/>
         <field description="Set this bit to one to initiate a frequency measurement cycle. Hardware clears this bit when the measurement cycle has completed and there is valid capture data in the CAPVAL field (bits 13:0)."
                format="hex0x"
                id="SYSCON@FREQMECTRL@PROG"
                offset="[31]"/>
      </register>
      <register description="MCLK input/output control" format="hex0x" id="SYSCON@MCLKIO"
                offset="0x420"
                size="4">
         <field description="MCLK direction control." format="enum" enum="d1e4927"
                id="SYSCON@MCLKIO@DIR"
                offset="[0]"/>
      </register>
      <register description="FRO oscillator control" format="hex0x" id="SYSCON@FROCTRL"
                offset="0x500"
                size="4">
         <field description="This value is factory trimmed to account for bias and temperature compensation. The value should not be changed by software. Also see the WRTRIM bit description."
                format="hex0x"
                id="SYSCON@FROCTRL@TRIM"
                offset="[13:0]"/>
         <field description="Select the fro_hf output frequency. This bit can only be changed by software when the WRTRIM bit = 1. Note that the factory trim values are for the 96 MHz FRO only."
                format="enum"
                enum="d1e5019"
                id="SYSCON@FROCTRL@SEL"
                offset="[14]"/>
         <field description="Frequency trim. Boot code configures this to a device-specific factory trim value for the 96 MHz FRO. If USBCLKADJ = 1, this field is read-only and provides the value resulting from USB rate adjustment. See the USBMODCFG flag regarding reading this field. Application code may adjust this field when USBCLKADJ = 0. A single step of FREQTRIM is roughly equivalent to 0.1% of the selected FRO frequency."
                format="hex0x"
                id="SYSCON@FROCTRL@FREQTRIM"
                offset="[23:16]"/>
         <field description="USB clock adjust mode." format="enum" enum="d1e5083"
                id="SYSCON@FROCTRL@USBCLKADJ"
                offset="[24]"/>
         <field description="USB Mode value Change flag. When 1, indicates that the USB trim is currently being updated (or is still starting up) and software should wait to read FREQTRIM. Update occurs at most once per millisecond."
                format="hex0x"
                id="SYSCON@FROCTRL@USBMODCHG"
                offset="[25]"/>
         <field description="High speed clock disable. Allows disabling the highs-speed FRO output if it is not needed."
                format="enum"
                enum="d1e5148"
                id="SYSCON@FROCTRL@HSPDCLK"
                offset="[30]"/>
         <field description="Write Trim value. Must be written to 1 to modify the SEL or TRIM fields, during the same write. This bit always reads as 0."
                format="hex0x"
                id="SYSCON@FROCTRL@WRTRIM"
                offset="[31]"/>
      </register>
      <register description="Watchdog oscillator control" format="hex0x" id="SYSCON@WDTOSCCTRL"
                offset="0x508"
                size="4">
         <field description="Divider select. Selects the value of the divider that adjusts the output of the oscillator. 0x00 = divide by 2 0x01 = divide by 4 0x02 = divide by 6 up to 0x1E = divide by 62 0x1F = divide by 64"
                format="hex0x"
                id="SYSCON@WDTOSCCTRL@DIVSEL"
                offset="[4:0]"/>
         <field description="Frequency select. Selects the frequency of the oscillator. 0x00 = invalid setting when watchdog oscillator is running 0x01 = 0.4 MHz 0x02 = 0.6 MHz 0x03 = 0.75 MHz 0x04 = 0.9 MHz 0x05 = 1.0 MHz 0x06 = 1.2 MHz 0x07 = 1.3 MHz 0x08 = 1.4 MHz 0x09 = 1.5 MHz 0x0A = 1.6 MHz 0x0B = 1.7 MHz 0x0C = 1.8 MHz 0x0D = 1.9 MHz 0x0E = 2.0 MHz 0x0F = 2.05 MHz 0x10 = 2.1 MHz 0x11 = 2.2 MHz 0x12 = 2.25 MHz 0x13 = 2.3 MHz 0x14 = 2.4 MHz 0x15 = 2.45 MHz 0x16 = 2.5 MHz 0x17 = 2.6 MHz 0x18 = 2.65 MHz 0x19 = 2.7 MHz 0x1A = 2.8 MHz 0x1B = 2.85 MHz 0x1C = 2.9 MHz 0x1D = 2.95 MHz 0x1E = 3.0 MHz 0x1F = 3.05 MHz"
                format="hex0x"
                id="SYSCON@WDTOSCCTRL@FREQSEL"
                offset="[9:5]"/>
      </register>
      <register description="RTC oscillator 32 kHz output control" format="hex0x"
                id="SYSCON@RTCOSCCTRL"
                offset="0x50c"
                size="4">
         <field description="RTC 32 kHz clock enable." format="enum" enum="d1e5304"
                id="SYSCON@RTCOSCCTRL@EN"
                offset="[0]"/>
      </register>
      <register description="PLL control" format="hex0x" id="SYSCON@SYSPLLCTRL" offset="0x580"
                size="4">
         <field description="Bandwidth select R value" format="hex0x"
                id="SYSCON@SYSPLLCTRL@SELR"
                offset="[3:0]"/>
         <field description="Bandwidth select I value." format="hex0x"
                id="SYSCON@SYSPLLCTRL@SELI"
                offset="[9:4]"/>
         <field description="Bandwidth select P value" format="hex0x"
                id="SYSCON@SYSPLLCTRL@SELP"
                offset="[14:10]"/>
         <field description="PLL bypass control." format="enum" enum="d1e5432"
                id="SYSCON@SYSPLLCTRL@BYPASS"
                offset="[15]"/>
         <field description="Bypass feedback clock divide by 2." format="enum" enum="d1e5478"
                id="SYSCON@SYSPLLCTRL@BYPASSCCODIV2"
                offset="[16]"/>
         <field description="Disable upper frequency limiter." format="enum" enum="d1e5525"
                id="SYSCON@SYSPLLCTRL@UPLIMOFF"
                offset="[17]"/>
         <field description="PLL filter control. Set this bit to one when the spread spectrum controller is disabled or at low frequencies. For spread spectrum mode: SEL_EXT = 0, BANDSEL = 0, and UPLIMOFF = 1."
                format="enum"
                enum="d1e5571"
                id="SYSCON@SYSPLLCTRL@BANDSEL"
                offset="[18]"/>
         <field description="PLL0 direct input enable" format="enum" enum="d1e5617"
                id="SYSCON@SYSPLLCTRL@DIRECTI"
                offset="[19]"/>
         <field description="PLL0 direct output enable." format="enum" enum="d1e5663"
                id="SYSCON@SYSPLLCTRL@DIRECTO"
                offset="[20]"/>
      </register>
      <register description="PLL status" format="hex0x" id="SYSCON@SYSPLLSTAT" offset="0x584"
                readOnly="true"
                size="4">
         <field description="PLL0 lock indicator" format="hex0x" id="SYSCON@SYSPLLSTAT@LOCK"
                offset="[0]"/>
      </register>
      <register description="PLL N decoder" format="hex0x" id="SYSCON@SYSPLLNDEC"
                offset="0x588"
                size="4">
         <field description="Decoded N-divider coefficient value." format="hex0x"
                id="SYSCON@SYSPLLNDEC@NDEC"
                offset="[9:0]"/>
         <field description="NDEC reload request. When a 1 is written to this bit, the NDEC value is loaded into the PLL. Must be cleared by software for any subsequent load, or the PLL can be powered down and back up via the PDEN_SYS_PLL bit in the PDRUNCFG register if the NDEC value is changed."
                format="hex0x"
                id="SYSCON@SYSPLLNDEC@NREQ"
                offset="[10]"/>
      </register>
      <register description="PLL P decoder" format="hex0x" id="SYSCON@SYSPLLPDEC"
                offset="0x58c"
                size="4">
         <field description="Decoded P-divider coefficient value." format="hex0x"
                id="SYSCON@SYSPLLPDEC@PDEC"
                offset="[6:0]"/>
         <field description="PDEC reload request. When a 1 is written to this bit, the PDEC value is loaded into the PLL. Must be cleared by software for any subsequent load, or the PLL can be powered down and back up via the PDEN_SYS_PLL bit in the PDRUNCFG register if the PDEC value is changed."
                format="hex0x"
                id="SYSCON@SYSPLLPDEC@PREQ"
                offset="[7]"/>
      </register>
      <register description="PLL spread spectrum control 0" format="hex0x"
                id="SYSCON@SYSPLLSSCTRL0"
                offset="0x590"
                size="4">
         <field description="Decoded M-divider coefficient value." format="hex0x"
                id="SYSCON@SYSPLLSSCTRL0@MDEC"
                offset="[16:0]"/>
         <field description="MDEC reload request. When a 1 is written to this bit, the MDEC value is loaded into the PLL. Must be cleared by software for any subsequent load, or the PLL can be powered down and back up via the PDEN_SYS_PLL bit in the PDRUNCFG register if the MDEC value is changed."
                format="hex0x"
                id="SYSCON@SYSPLLSSCTRL0@MREQ"
                offset="[17]"/>
         <field description="Select spread spectrum mode. Selects the source of the feedback divider value. For normal mode, this must be the value from the MDEC field in this register. For spread spectrum mode: SEL_EXT = 0, BANDSEL = 0, and UPLIMOFF = 1."
                format="hex0x"
                id="SYSCON@SYSPLLSSCTRL0@SEL-EXT"
                offset="[18]"/>
      </register>
      <register description="PLL spread spectrum control 1" format="hex0x"
                id="SYSCON@SYSPLLSSCTRL1"
                offset="0x594"
                size="4">
         <field description="M- divider value with fraction. MD[18:11]: integer portion of the feedback divider value. MD[10:0]: fractional portion of the feedback divider value. In fractional mode, fcco = (2 - BYPASSCCODIV2) x (MD x 2^-11) x Fref"
                format="hex0x"
                id="SYSCON@SYSPLLSSCTRL1@MD"
                offset="[18:0]"/>
         <field description="MD reload request. When a 1 is written to this bit, the MD value is loaded into the PLL. This bit is cleared when the load is complete"
                format="hex0x"
                id="SYSCON@SYSPLLSSCTRL1@MDREQ"
                offset="[19]"/>
         <field description="Programmable modulation frequency fm = Fref/Nss with Fref = Fin/N 0b000 =&gt; Nss = 512 (fm _ 3.9 - 7.8 kHz) 0b001 =&gt; Nss _ 384 (fm _ 5.2 - 10.4 kHz) 0b010 =&gt; Nss = 256 (fm _ 7.8 - 15.6 kHz) 0b011 =&gt; Nss = 128 (fm _ 15.6 - 31.3 kHz) 0b100 =&gt; Nss = 64 (fm _ 32.3 - 64.5 kHz) 0b101 =&gt; Nss = 32 (fm _ 62.5- 125 kHz) 0b110 =&gt; Nss _ 24 (fm _ 83.3- 166.6 kHz) 0b111 =&gt; Nss = 16 (fm _ 125- 250 kHz)"
                format="hex0x"
                id="SYSCON@SYSPLLSSCTRL1@MF"
                offset="[22:20]"/>
         <field description="Programmable frequency modulation depth. 0 = no spread. _fmodpk-pk = Fref x k/Fcco = k/MDdec 0b000 -&gt; k = 0 (no spread spectrum) 0b001 =&gt; k _ 1 0b010 =&gt; k _ 1.5 0b011 =&gt; k _ 2 0b100 =&gt; k _ 3 0b101 =&gt; k _ 4 0b110 =&gt; k _ 6 0b111 =&gt; k _ 8"
                format="hex0x"
                id="SYSCON@SYSPLLSSCTRL1@MR"
                offset="[25:23]"/>
         <field description="Modulation waveform control. 0 = no compensation. Compensation for low pass filtering of the PLL to get a triangular modulation at the output of the PLL, giving a flat frequency spectrum. 0b00 =&gt; no compensation 0b10 =&gt; recommended setting 0b11 =&gt; max. compensation"
                format="hex0x"
                id="SYSCON@SYSPLLSSCTRL1@MC"
                offset="[27:26]"/>
         <field description="Spread spectrum power-down." format="enum" enum="d1e6085"
                id="SYSCON@SYSPLLSSCTRL1@PD"
                offset="[28]"/>
         <field description="Select modulation frequency." format="enum" enum="d1e6131"
                id="SYSCON@SYSPLLSSCTRL1@DITHER"
                offset="[29]"/>
      </register>
      <register description="Sleep configuration register n" format="hex0x"
                id="SYSCON@PDSLEEPCFG0"
                offset="0x600"
                size="4">
         <field description="See bit descriptions in the PDRUNCFGn register." format="hex0x"
                id="SYSCON@PDSLEEPCFG0@PD-SLEEP"
                offset="[31:0]"/>
      </register>
      <register description="Sleep configuration register n" format="hex0x"
                id="SYSCON@PDSLEEPCFG1"
                offset="0x604"
                size="4">
         <field description="See bit descriptions in the PDRUNCFGn register." format="hex0x"
                id="SYSCON@PDSLEEPCFG1@PD-SLEEP"
                offset="[31:0]"/>
      </register>
      <register description="Power configuration register n" format="hex0x"
                id="SYSCON@PDRUNCFG0"
                offset="0x610"
                size="4">
         <field description="FRO oscillator. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-FRO"
                offset="[4]"/>
         <field description="Part of flash power control." format="hex0x"
                id="SYSCON@PDRUNCFG0@PD-FLASH"
                offset="[5]"/>
         <field description="Temp sensor. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-TS"
                offset="[6]"/>
         <field description="Brown-out Detect reset. 0 = Powered; 1 = Powered down."
                format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-BOD-RST"
                offset="[7]"/>
         <field description="Brown-out Detect interrupt. 0 = Powered; 1 = Powered down."
                format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-BOD-INTR"
                offset="[8]"/>
         <field description="ADC0. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-ADC0"
                offset="[10]"/>
         <field description="Part of flash power control." format="hex0x"
                id="SYSCON@PDRUNCFG0@PD-VDDFLASH"
                offset="[11]"/>
         <field description="Part of flash power control." format="hex0x"
                id="SYSCON@PDRUNCFG0@LP-VDDFLASH"
                offset="[12]"/>
         <field description="SRAM0. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-SRAM0"
                offset="[13]"/>
         <field description="SRAM1. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-SRAM1"
                offset="[14]"/>
         <field description="SRAM2. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-SRAM2"
                offset="[15]"/>
         <field description="SRAMX. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-SRAMX"
                offset="[16]"/>
         <field description="ROM. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-ROM"
                offset="[17]"/>
         <field description="Part of flash power control." format="hex0x"
                id="SYSCON@PDRUNCFG0@PD-VDDHV-ENA"
                offset="[18]"/>
         <field description="Vdda to the ADC, must be enabled for the ADC to work. Also see bit 23. 0 = Powered; 1 = Powered down."
                format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-VDDA"
                offset="[19]"/>
         <field description="Watchdog oscillator. 0 = Powered; 1 = Powered down."
                format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-WDT-OSC"
                offset="[20]"/>
         <field description="USB pin interface. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-USB-PHY"
                offset="[21]"/>
         <field description="PLL0. 0 = Powered; 1 = Powered down." format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-SYS-PLL"
                offset="[22]"/>
         <field description="Vrefp to the ADC, must be enabled for the ADC to work. Also see bit 19. 0 = Powered; 1 = Powered down."
                format="hex0x"
                id="SYSCON@PDRUNCFG0@PDEN-VREFP"
                offset="[23]"/>
         <field description="Part of flash power control." format="hex0x"
                id="SYSCON@PDRUNCFG0@PD-FLASH-BG"
                offset="[25]"/>
      </register>
      <register description="Power configuration register n" format="hex0x"
                id="SYSCON@PDRUNCFG1"
                offset="0x614"
                size="4">
         <field description="Part of flash power control." format="hex0x"
                id="SYSCON@PDRUNCFG1@PD-ALT-FLASH-IBG"
                offset="[28]"/>
         <field description="Part of flash power control." format="hex0x"
                id="SYSCON@PDRUNCFG1@SEL-ALT-FLASH-IBG"
                offset="[29]"/>
      </register>
      <register description="Set bits in PDRUNCFGn" format="hex0x" id="SYSCON@PDRUNCFGSET0"
                offset="0x620"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the PDRUNCFG register, if they are implemented. Bits that do not correspond to defined bits in PDRUNCFG are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PDRUNCFGSET0@PD-SET"
                offset="[31:0]"/>
      </register>
      <register description="Set bits in PDRUNCFGn" format="hex0x" id="SYSCON@PDRUNCFGSET1"
                offset="0x624"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the PDRUNCFG register, if they are implemented. Bits that do not correspond to defined bits in PDRUNCFG are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PDRUNCFGSET1@PD-SET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in PDRUNCFGn" format="hex0x" id="SYSCON@PDRUNCFGCLR0"
                offset="0x630"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the PDRUNCFG register, if they are implemented. Bits that do not correspond to defined bits in PDRUNCFG are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PDRUNCFGCLR0@PD-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in PDRUNCFGn" format="hex0x" id="SYSCON@PDRUNCFGCLR1"
                offset="0x634"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the PDRUNCFG register, if they are implemented. Bits that do not correspond to defined bits in PDRUNCFG are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@PDRUNCFGCLR1@PD-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Start logic n wake-up enable register" format="hex0x"
                id="SYSCON@STARTERP0"
                offset="0x680"
                size="4">
         <field description="WWDT and BOD interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@WDT-BOD"
                offset="[0]"/>
         <field description="DMA0 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@DMA0"
                offset="[1]"/>
         <field description="Group interrupt 0 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@GINT0"
                offset="[2]"/>
         <field description="Group interrupt 1 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@GINT1"
                offset="[3]"/>
         <field description="GPIO pin interrupt 0 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP0@PIN-INT0"
                offset="[4]"/>
         <field description="GPIO pin interrupt 1 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP0@PIN-INT1"
                offset="[5]"/>
         <field description="GPIO pin interrupt 2 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP0@PIN-INT2"
                offset="[6]"/>
         <field description="GPIO pin interrupt 3 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP0@PIN-INT3"
                offset="[7]"/>
         <field description="Micro-tick Timer wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@UTICK0"
                offset="[8]"/>
         <field description="Multi-Rate Timer wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@MRT0"
                offset="[9]"/>
         <field description="Standard counter/timer CTIMER0 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@CTIMER0"
                offset="[10]"/>
         <field description="Standard counter/timer CTIMER1 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@CTIMER1"
                offset="[11]"/>
         <field description="SCT0 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@SCT0"
                offset="[12]"/>
         <field description="Standard counter/timer CTIMER3 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@CTIMER3"
                offset="[13]"/>
         <field description="Flexcomm0 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM0"
                offset="[14]"/>
         <field description="Flexcomm1 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM1"
                offset="[15]"/>
         <field description="Flexcomm2 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM2"
                offset="[16]"/>
         <field description="Flexcomm3 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM3"
                offset="[17]"/>
         <field description="Flexcomm4 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM4"
                offset="[18]"/>
         <field description="Flexcomm5 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM5"
                offset="[19]"/>
         <field description="Flexcomm6 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM6"
                offset="[20]"/>
         <field description="Flexcomm7 peripheral interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@FLEXCOMM7"
                offset="[21]"/>
         <field description="ADC0 sequence A interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@ADC0-SEQA"
                offset="[22]"/>
         <field description="ADC0 sequence B interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@ADC0-SEQB"
                offset="[23]"/>
         <field description="ADC0 threshold and error interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP0@ADC0-THCMP"
                offset="[24]"/>
         <field description="Digital microphone interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@DMIC0"
                offset="[25]"/>
         <field description="USB0 activity interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@USB0-NEEDCLK"
                offset="[27]"/>
         <field description="USB0 function interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@USB0"
                offset="[28]"/>
         <field description="RTC interrupt alarm and wake-up timer. 0 = Wake-up disabled. 1 = Wake-up enabled."
                format="hex0x"
                id="SYSCON@STARTERP0@RTC"
                offset="[29]"/>
         <field description="Mailbox interrupt wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.At least one CPU must be running in order for a mailbox interrupt to occur. Present on selected devices."
                format="hex0x"
                id="SYSCON@STARTERP0@MAILBOX"
                offset="[31]"/>
      </register>
      <register description="Start logic n wake-up enable register" format="hex0x"
                id="SYSCON@STARTERP1"
                offset="0x684"
                size="4">
         <field description="GPIO pin interrupt 4 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP1@PINT4"
                offset="[0]"/>
         <field description="GPIO pin interrupt 5 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP1@PINT5"
                offset="[1]"/>
         <field description="GPIO pin interrupt 6 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP1@PINT6"
                offset="[2]"/>
         <field description="GPIO pin interrupt 7 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled. Not for pattern match."
                format="hex0x"
                id="SYSCON@STARTERP1@PINT7"
                offset="[3]"/>
         <field description="Standard counter/timer CTIMER2 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP1@CTIMER2"
                offset="[4]"/>
         <field description="Standard counter/timer CTIMER4 wake-up. 0 = Wake-up disabled. 1 = Wake-up enabled.Typically used in sleep mode only since the peripheral clock must be running for it to function."
                format="hex0x"
                id="SYSCON@STARTERP1@CTIMER4"
                offset="[5]"/>
      </register>
      <register description="Set bits in STARTERn" format="hex0x" id="SYSCON@STARTERSET0"
                offset="0x6a0"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the STARTERn register, if they are implemented. Bits that do not correspond to defined bits in STARTERn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@STARTERSET0@START-SET"
                offset="[31:0]"/>
      </register>
      <register description="Set bits in STARTERn" format="hex0x" id="SYSCON@STARTERSET1"
                offset="0x6a4"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the STARTERn register, if they are implemented. Bits that do not correspond to defined bits in STARTERn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@STARTERSET1@START-SET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in STARTERn" format="hex0x" id="SYSCON@STARTERCLR0"
                offset="0x6c0"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the STARTERn register, if they are implemented. Bits that do not correspond to defined bits in STARTERn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@STARTERCLR0@START-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in STARTERn" format="hex0x" id="SYSCON@STARTERCLR1"
                offset="0x6c4"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the STARTERn register, if they are implemented. Bits that do not correspond to defined bits in STARTERn are reserved and only zeroes should be written to them."
                format="hex0x"
                id="SYSCON@STARTERCLR1@START-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Configures special cases of hardware wake-up" format="hex0x"
                id="SYSCON@HWWAKE"
                offset="0x780"
                size="4">
         <field description="Force peripheral clocking to stay on during Deep Sleep and Power-down modes. When 1, clocking to peripherals is prevented from being shut down when the CPU enters Deep Sleep and Power-down modes. This is intended to allow a coprocessor to continue operating while the main CPU(s) are shut down."
                format="hex0x"
                id="SYSCON@HWWAKE@FORCEWAKE"
                offset="[0]"/>
         <field description="Wake for Flexcomms. When 1, any Flexcomm FIFO reaching the level specified by its own TXLVL will cause peripheral clocking to wake up temporarily while the related status is asserted."
                format="hex0x"
                id="SYSCON@HWWAKE@FCWAKE"
                offset="[1]"/>
         <field description="Wake for Digital Microphone. When 1, the digital microphone input FIFO reaching the level specified by TRIGLVL of either channel will cause peripheral clocking to wake up temporarily while the related status is asserted."
                format="hex0x"
                id="SYSCON@HWWAKE@WAKEDMIC"
                offset="[2]"/>
         <field description="Wake for DMA. When 1, DMA being busy will cause peripheral clocking to remain running until DMA completes. This is generally used in conjunction with bit 1 and/or 2 in order to prevent peripheral clocking from being shut down as soon as the cause of wake-up is cleared, but before DMA has completed its related activity."
                format="hex0x"
                id="SYSCON@HWWAKE@WAKEDMA"
                offset="[3]"/>
      </register>
      <register description="CPU Control for multiple processors" format="hex0x"
                id="SYSCON@CPCTRL"
                offset="0x800"
                size="4">
         <field description="Indicates which CPU is considered the master. This is factory set assign the Cortex-M4 as the master. The master CPU cannot have its clock turned off via the related CMnCLKEN bit or be reset via the related CMxRSTEN in this register. The slave CPU wakes up briefly following device reset, then goes back to sleep until activated by the master CPU."
                format="enum"
                enum="d1e7732"
                id="SYSCON@CPCTRL@MASTERCPU"
                offset="[0]"/>
         <field description="Cortex-M4 clock enable" format="enum" enum="d1e7778"
                id="SYSCON@CPCTRL@CM4CLKEN"
                offset="[2]"/>
         <field description="Cortex-M0+ clock enable" format="enum" enum="d1e7824"
                id="SYSCON@CPCTRL@CM0CLKEN"
                offset="[3]"/>
         <field description="Cortex-M4 reset." format="enum" enum="d1e7870"
                id="SYSCON@CPCTRL@CM4RSTEN"
                offset="[4]"/>
         <field description="Cortex-M0+ reset." format="enum" enum="d1e7916"
                id="SYSCON@CPCTRL@CM0RSTEN"
                offset="[5]"/>
         <field description="Identifies the owner of reduced power mode control: which CPU can cause the device to enter Deep Sleep, Power-down, and Deep Power-down modes."
                format="enum"
                enum="d1e7963"
                id="SYSCON@CPCTRL@POWERCPU"
                offset="[6]"/>
      </register>
      <register description="Coprocessor Boot Address" format="hex0x" id="SYSCON@CPBOOT"
                offset="0x804"
                size="4">
         <field description="Slave processor boot address" format="hex0x"
                id="SYSCON@CPBOOT@BOOTADDR"
                offset="[31:0]"/>
      </register>
      <register description="Coprocessor Stack Address" format="hex0x" id="SYSCON@CPSTACK"
                offset="0x808"
                size="4">
         <field description="Slave processor stack address" format="hex0x"
                id="SYSCON@CPSTACK@STACKADDR"
                offset="[31:0]"/>
      </register>
      <register description="Coprocessor Status" format="hex0x" id="SYSCON@CPSTAT"
                offset="0x80c"
                readOnly="true"
                size="4">
         <field description="When 1, the Cortex-M4 CPU is sleeping" format="hex0x"
                id="SYSCON@CPSTAT@CM4SLEEPING"
                offset="[0]"/>
         <field description="When 1, the Cortex-M0+ CPU is sleeping" format="hex0x"
                id="SYSCON@CPSTAT@CM0SLEEPING"
                offset="[1]"/>
         <field description="When 1, the Cortex-M4 CPU is in lockup" format="hex0x"
                id="SYSCON@CPSTAT@CM4LOCKUP"
                offset="[2]"/>
         <field description="When 1, the Cortex-M0+ CPU is in lockup." format="hex0x"
                id="SYSCON@CPSTAT@CM0LOCKUP"
                offset="[3]"/>
      </register>
      <register description="Auto Clock-Gate Override Register" format="hex0x"
                id="SYSCON@AUTOCGOR"
                offset="0xe04"
                size="4">
         <field description="When 1, automatic clock gating for RAMX and RAM0 are turned off."
                format="hex0x"
                id="SYSCON@AUTOCGOR@RAM0X"
                offset="[1]"/>
         <field description="When 1, automatic clock gating for RAM1 is turned off."
                format="hex0x"
                id="SYSCON@AUTOCGOR@RAM1"
                offset="[2]"/>
         <field description="When 1, automatic clock gating for RAM2 is turned off."
                format="hex0x"
                id="SYSCON@AUTOCGOR@RAM2"
                offset="[3]"/>
      </register>
      <register description="JTAG ID code register" format="hex0x" id="SYSCON@JTAGIDCODE"
                offset="0xff4"
                readOnly="true"
                size="4">
         <field description="JTAG ID code." format="hex0x" id="SYSCON@JTAGIDCODE@JTAGID"
                offset="[31:0]"/>
      </register>
      <register description="Part ID register" format="hex0x" id="SYSCON@DEVICE-ID0"
                offset="0xff8"
                readOnly="true"
                size="4">
         <field description="Part ID" format="hex0x" id="SYSCON@DEVICE-ID0@PARTID"
                offset="[31:0]"/>
      </register>
      <register description="Boot ROM and die revision register" format="hex0x"
                id="SYSCON@DEVICE-ID1"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Revision." format="hex0x" id="SYSCON@DEVICE-ID1@REVID"
                offset="[31:0]"/>
      </register>
      <register description="Brown-Out Detect control" format="hex0x" id="SYSCON@BODCTRL"
                offset="0x20044"
                size="4">
         <field description="BOD reset level" format="enum" enum="d1e8450"
                id="SYSCON@BODCTRL@BODRSTLEV"
                offset="[1:0]"/>
         <field description="BOD reset enable" format="enum" enum="d1e8520"
                id="SYSCON@BODCTRL@BODRSTENA"
                offset="[2]"/>
         <field description="BOD interrupt level" format="enum" enum="d1e8566"
                id="SYSCON@BODCTRL@BODINTLEV"
                offset="[4:3]"/>
         <field description="BOD interrupt enable" format="enum" enum="d1e8636"
                id="SYSCON@BODCTRL@BODINTENA"
                offset="[5]"/>
         <field description="BOD reset status. When 1, a BOD reset has occurred. Cleared by writing 1 to this bit."
                format="hex0x"
                id="SYSCON@BODCTRL@BODRSTSTAT"
                offset="[6]"/>
         <field description="BOD interrupt status. When 1, a BOD interrupt has occurred. Cleared by writing 1 to this bit."
                format="hex0x"
                id="SYSCON@BODCTRL@BODINTSTAT"
                offset="[7]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I/O pin configuration (IOCON)" id="IOCON"
               size="0x100">
      <register description="Digital I/O control for port 0 pins PIO0_0" format="hex0x"
                id="IOCON@PIO00"
                offset="0x0"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e8778"
                id="IOCON@PIO00@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e8897"
                id="IOCON@PIO00@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e8967"
                id="IOCON@PIO00@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e9013"
                id="IOCON@PIO00@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e9059"
                id="IOCON@PIO00@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e9106"
                id="IOCON@PIO00@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e9152"
                id="IOCON@PIO00@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_1" format="hex0x"
                id="IOCON@PIO01"
                offset="0x4"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e9226"
                id="IOCON@PIO01@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e9345"
                id="IOCON@PIO01@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e9415"
                id="IOCON@PIO01@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e9461"
                id="IOCON@PIO01@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e9507"
                id="IOCON@PIO01@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e9554"
                id="IOCON@PIO01@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e9600"
                id="IOCON@PIO01@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_2" format="hex0x"
                id="IOCON@PIO02"
                offset="0x8"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e9674"
                id="IOCON@PIO02@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e9793"
                id="IOCON@PIO02@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e9863"
                id="IOCON@PIO02@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e9909"
                id="IOCON@PIO02@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e9955"
                id="IOCON@PIO02@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e10002"
                id="IOCON@PIO02@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e10048"
                id="IOCON@PIO02@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_3" format="hex0x"
                id="IOCON@PIO03"
                offset="0xc"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e10122"
                id="IOCON@PIO03@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e10241"
                id="IOCON@PIO03@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e10311"
                id="IOCON@PIO03@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e10357"
                id="IOCON@PIO03@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e10403"
                id="IOCON@PIO03@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e10450"
                id="IOCON@PIO03@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e10496"
                id="IOCON@PIO03@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_4" format="hex0x"
                id="IOCON@PIO04"
                offset="0x10"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e10570"
                id="IOCON@PIO04@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e10689"
                id="IOCON@PIO04@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e10759"
                id="IOCON@PIO04@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e10805"
                id="IOCON@PIO04@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e10851"
                id="IOCON@PIO04@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e10898"
                id="IOCON@PIO04@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e10944"
                id="IOCON@PIO04@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_5" format="hex0x"
                id="IOCON@PIO05"
                offset="0x14"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e11019"
                id="IOCON@PIO05@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e11138"
                id="IOCON@PIO05@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e11208"
                id="IOCON@PIO05@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e11254"
                id="IOCON@PIO05@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e11300"
                id="IOCON@PIO05@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e11347"
                id="IOCON@PIO05@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e11393"
                id="IOCON@PIO05@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_6" format="hex0x"
                id="IOCON@PIO06"
                offset="0x18"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e11467"
                id="IOCON@PIO06@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e11586"
                id="IOCON@PIO06@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e11656"
                id="IOCON@PIO06@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e11702"
                id="IOCON@PIO06@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e11748"
                id="IOCON@PIO06@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e11795"
                id="IOCON@PIO06@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e11841"
                id="IOCON@PIO06@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_7" format="hex0x"
                id="IOCON@PIO07"
                offset="0x1c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e11915"
                id="IOCON@PIO07@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e12034"
                id="IOCON@PIO07@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e12104"
                id="IOCON@PIO07@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e12150"
                id="IOCON@PIO07@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e12196"
                id="IOCON@PIO07@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e12243"
                id="IOCON@PIO07@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e12289"
                id="IOCON@PIO07@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_8" format="hex0x"
                id="IOCON@PIO08"
                offset="0x20"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e12363"
                id="IOCON@PIO08@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e12482"
                id="IOCON@PIO08@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e12552"
                id="IOCON@PIO08@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e12598"
                id="IOCON@PIO08@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e12644"
                id="IOCON@PIO08@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e12691"
                id="IOCON@PIO08@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e12737"
                id="IOCON@PIO08@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_9" format="hex0x"
                id="IOCON@PIO09"
                offset="0x24"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e12811"
                id="IOCON@PIO09@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e12930"
                id="IOCON@PIO09@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e13000"
                id="IOCON@PIO09@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e13046"
                id="IOCON@PIO09@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e13092"
                id="IOCON@PIO09@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e13139"
                id="IOCON@PIO09@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e13185"
                id="IOCON@PIO09@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_10" format="hex0x"
                id="IOCON@PIO010"
                offset="0x28"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e13259"
                id="IOCON@PIO010@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e13378"
                id="IOCON@PIO010@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e13448"
                id="IOCON@PIO010@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e13494"
                id="IOCON@PIO010@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e13540"
                id="IOCON@PIO010@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e13587"
                id="IOCON@PIO010@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e13633"
                id="IOCON@PIO010@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_11" format="hex0x"
                id="IOCON@PIO011"
                offset="0x2c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e13708"
                id="IOCON@PIO011@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e13827"
                id="IOCON@PIO011@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e13897"
                id="IOCON@PIO011@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e13943"
                id="IOCON@PIO011@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e13989"
                id="IOCON@PIO011@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e14036"
                id="IOCON@PIO011@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e14082"
                id="IOCON@PIO011@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_12" format="hex0x"
                id="IOCON@PIO012"
                offset="0x30"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e14156"
                id="IOCON@PIO012@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e14275"
                id="IOCON@PIO012@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e14345"
                id="IOCON@PIO012@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e14391"
                id="IOCON@PIO012@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e14437"
                id="IOCON@PIO012@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e14484"
                id="IOCON@PIO012@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e14530"
                id="IOCON@PIO012@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_13" format="hex0x"
                id="IOCON@PIO013"
                offset="0x34"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e14604"
                id="IOCON@PIO013@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e14723"
                id="IOCON@PIO013@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e14793"
                id="IOCON@PIO013@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e14839"
                id="IOCON@PIO013@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e14885"
                id="IOCON@PIO013@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e14932"
                id="IOCON@PIO013@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e14978"
                id="IOCON@PIO013@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_14" format="hex0x"
                id="IOCON@PIO014"
                offset="0x38"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e15052"
                id="IOCON@PIO014@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e15171"
                id="IOCON@PIO014@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e15241"
                id="IOCON@PIO014@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e15287"
                id="IOCON@PIO014@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e15333"
                id="IOCON@PIO014@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e15380"
                id="IOCON@PIO014@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e15426"
                id="IOCON@PIO014@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_15" format="hex0x"
                id="IOCON@PIO015"
                offset="0x3c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e15500"
                id="IOCON@PIO015@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e15619"
                id="IOCON@PIO015@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e15689"
                id="IOCON@PIO015@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e15735"
                id="IOCON@PIO015@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e15781"
                id="IOCON@PIO015@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e15828"
                id="IOCON@PIO015@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e15874"
                id="IOCON@PIO015@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_16" format="hex0x"
                id="IOCON@PIO016"
                offset="0x40"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e15948"
                id="IOCON@PIO016@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e16067"
                id="IOCON@PIO016@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e16137"
                id="IOCON@PIO016@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e16183"
                id="IOCON@PIO016@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e16229"
                id="IOCON@PIO016@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e16276"
                id="IOCON@PIO016@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e16322"
                id="IOCON@PIO016@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_17" format="hex0x"
                id="IOCON@PIO017"
                offset="0x44"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e16397"
                id="IOCON@PIO017@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e16516"
                id="IOCON@PIO017@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e16586"
                id="IOCON@PIO017@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e16632"
                id="IOCON@PIO017@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e16678"
                id="IOCON@PIO017@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e16725"
                id="IOCON@PIO017@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e16771"
                id="IOCON@PIO017@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_18" format="hex0x"
                id="IOCON@PIO018"
                offset="0x48"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e16845"
                id="IOCON@PIO018@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e16964"
                id="IOCON@PIO018@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e17034"
                id="IOCON@PIO018@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e17080"
                id="IOCON@PIO018@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e17126"
                id="IOCON@PIO018@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e17173"
                id="IOCON@PIO018@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e17219"
                id="IOCON@PIO018@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_19" format="hex0x"
                id="IOCON@PIO019"
                offset="0x4c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e17293"
                id="IOCON@PIO019@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e17412"
                id="IOCON@PIO019@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e17482"
                id="IOCON@PIO019@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e17528"
                id="IOCON@PIO019@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e17574"
                id="IOCON@PIO019@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e17621"
                id="IOCON@PIO019@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e17667"
                id="IOCON@PIO019@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_20" format="hex0x"
                id="IOCON@PIO020"
                offset="0x50"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e17741"
                id="IOCON@PIO020@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e17860"
                id="IOCON@PIO020@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e17930"
                id="IOCON@PIO020@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e17976"
                id="IOCON@PIO020@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e18022"
                id="IOCON@PIO020@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e18069"
                id="IOCON@PIO020@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e18115"
                id="IOCON@PIO020@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_21" format="hex0x"
                id="IOCON@PIO021"
                offset="0x54"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e18189"
                id="IOCON@PIO021@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e18308"
                id="IOCON@PIO021@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e18378"
                id="IOCON@PIO021@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e18424"
                id="IOCON@PIO021@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e18470"
                id="IOCON@PIO021@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e18517"
                id="IOCON@PIO021@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e18563"
                id="IOCON@PIO021@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_22" format="hex0x"
                id="IOCON@PIO022"
                offset="0x58"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e18637"
                id="IOCON@PIO022@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e18756"
                id="IOCON@PIO022@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e18826"
                id="IOCON@PIO022@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e18872"
                id="IOCON@PIO022@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e18918"
                id="IOCON@PIO022@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e18965"
                id="IOCON@PIO022@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e19011"
                id="IOCON@PIO022@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_23" format="hex0x"
                id="IOCON@PIO023"
                offset="0x5c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e19086"
                id="IOCON@PIO023@FUNC"
                offset="[2:0]"/>
         <field description="Controls slew rate of I2C pad." format="enum" enum="d1e19205"
                id="IOCON@PIO023@I2CSLEW"
                offset="[5]"/>
         <field description="Input polarity." format="enum" enum="d1e19251"
                id="IOCON@PIO023@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e19297"
                id="IOCON@PIO023@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e19343"
                id="IOCON@PIO023@FILTEROFF"
                offset="[8]"/>
         <field description="Controls the current sink capability of the pin." format="enum"
                enum="d1e19390"
                id="IOCON@PIO023@I2CDRIVE"
                offset="[9]"/>
         <field description="Configures I2C features for standard mode, fast mode, and Fast Mode Plus operation."
                format="enum"
                enum="d1e19436"
                id="IOCON@PIO023@I2CFILTER"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_24" format="hex0x"
                id="IOCON@PIO024"
                offset="0x60"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e19510"
                id="IOCON@PIO024@FUNC"
                offset="[2:0]"/>
         <field description="Controls slew rate of I2C pad." format="enum" enum="d1e19629"
                id="IOCON@PIO024@I2CSLEW"
                offset="[5]"/>
         <field description="Input polarity." format="enum" enum="d1e19675"
                id="IOCON@PIO024@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e19721"
                id="IOCON@PIO024@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e19767"
                id="IOCON@PIO024@FILTEROFF"
                offset="[8]"/>
         <field description="Controls the current sink capability of the pin." format="enum"
                enum="d1e19814"
                id="IOCON@PIO024@I2CDRIVE"
                offset="[9]"/>
         <field description="Configures I2C features for standard mode, fast mode, and Fast Mode Plus operation."
                format="enum"
                enum="d1e19860"
                id="IOCON@PIO024@I2CFILTER"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_25" format="hex0x"
                id="IOCON@PIO025"
                offset="0x64"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e19934"
                id="IOCON@PIO025@FUNC"
                offset="[2:0]"/>
         <field description="Controls slew rate of I2C pad." format="enum" enum="d1e20053"
                id="IOCON@PIO025@I2CSLEW"
                offset="[5]"/>
         <field description="Input polarity." format="enum" enum="d1e20099"
                id="IOCON@PIO025@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e20145"
                id="IOCON@PIO025@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e20191"
                id="IOCON@PIO025@FILTEROFF"
                offset="[8]"/>
         <field description="Controls the current sink capability of the pin." format="enum"
                enum="d1e20238"
                id="IOCON@PIO025@I2CDRIVE"
                offset="[9]"/>
         <field description="Configures I2C features for standard mode, fast mode, and Fast Mode Plus operation."
                format="enum"
                enum="d1e20284"
                id="IOCON@PIO025@I2CFILTER"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_26" format="hex0x"
                id="IOCON@PIO026"
                offset="0x68"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e20358"
                id="IOCON@PIO026@FUNC"
                offset="[2:0]"/>
         <field description="Controls slew rate of I2C pad." format="enum" enum="d1e20477"
                id="IOCON@PIO026@I2CSLEW"
                offset="[5]"/>
         <field description="Input polarity." format="enum" enum="d1e20523"
                id="IOCON@PIO026@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e20569"
                id="IOCON@PIO026@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e20615"
                id="IOCON@PIO026@FILTEROFF"
                offset="[8]"/>
         <field description="Controls the current sink capability of the pin." format="enum"
                enum="d1e20662"
                id="IOCON@PIO026@I2CDRIVE"
                offset="[9]"/>
         <field description="Configures I2C features for standard mode, fast mode, and Fast Mode Plus operation."
                format="enum"
                enum="d1e20708"
                id="IOCON@PIO026@I2CFILTER"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_27" format="hex0x"
                id="IOCON@PIO027"
                offset="0x6c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e20782"
                id="IOCON@PIO027@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e20901"
                id="IOCON@PIO027@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e20971"
                id="IOCON@PIO027@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e21017"
                id="IOCON@PIO027@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e21063"
                id="IOCON@PIO027@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e21110"
                id="IOCON@PIO027@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e21156"
                id="IOCON@PIO027@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_28" format="hex0x"
                id="IOCON@PIO028"
                offset="0x70"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e21230"
                id="IOCON@PIO028@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e21349"
                id="IOCON@PIO028@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e21419"
                id="IOCON@PIO028@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e21465"
                id="IOCON@PIO028@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e21511"
                id="IOCON@PIO028@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e21558"
                id="IOCON@PIO028@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e21604"
                id="IOCON@PIO028@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_29" format="hex0x"
                id="IOCON@PIO029"
                offset="0x74"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e21679"
                id="IOCON@PIO029@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e21798"
                id="IOCON@PIO029@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e21868"
                id="IOCON@PIO029@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e21914"
                id="IOCON@PIO029@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e21960"
                id="IOCON@PIO029@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e22007"
                id="IOCON@PIO029@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_30" format="hex0x"
                id="IOCON@PIO030"
                offset="0x78"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e22081"
                id="IOCON@PIO030@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e22200"
                id="IOCON@PIO030@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e22270"
                id="IOCON@PIO030@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e22316"
                id="IOCON@PIO030@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e22362"
                id="IOCON@PIO030@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e22409"
                id="IOCON@PIO030@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 0 pins PIO0_31" format="hex0x"
                id="IOCON@PIO031"
                offset="0x7c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e22483"
                id="IOCON@PIO031@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e22602"
                id="IOCON@PIO031@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e22672"
                id="IOCON@PIO031@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e22718"
                id="IOCON@PIO031@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e22764"
                id="IOCON@PIO031@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e22811"
                id="IOCON@PIO031@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_0" format="hex0x"
                id="IOCON@PIO10"
                offset="0x80"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e22885"
                id="IOCON@PIO10@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e23004"
                id="IOCON@PIO10@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e23074"
                id="IOCON@PIO10@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e23120"
                id="IOCON@PIO10@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e23166"
                id="IOCON@PIO10@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e23213"
                id="IOCON@PIO10@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_1" format="hex0x"
                id="IOCON@PIO11"
                offset="0x84"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e23287"
                id="IOCON@PIO11@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e23406"
                id="IOCON@PIO11@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e23476"
                id="IOCON@PIO11@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e23522"
                id="IOCON@PIO11@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e23568"
                id="IOCON@PIO11@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e23615"
                id="IOCON@PIO11@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_2" format="hex0x"
                id="IOCON@PIO12"
                offset="0x88"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e23689"
                id="IOCON@PIO12@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e23808"
                id="IOCON@PIO12@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e23878"
                id="IOCON@PIO12@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e23924"
                id="IOCON@PIO12@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e23970"
                id="IOCON@PIO12@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e24017"
                id="IOCON@PIO12@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_3" format="hex0x"
                id="IOCON@PIO13"
                offset="0x8c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e24092"
                id="IOCON@PIO13@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e24211"
                id="IOCON@PIO13@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e24281"
                id="IOCON@PIO13@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e24327"
                id="IOCON@PIO13@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e24373"
                id="IOCON@PIO13@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e24420"
                id="IOCON@PIO13@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_4" format="hex0x"
                id="IOCON@PIO14"
                offset="0x90"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e24494"
                id="IOCON@PIO14@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e24613"
                id="IOCON@PIO14@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e24683"
                id="IOCON@PIO14@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e24729"
                id="IOCON@PIO14@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e24775"
                id="IOCON@PIO14@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e24822"
                id="IOCON@PIO14@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_5" format="hex0x"
                id="IOCON@PIO15"
                offset="0x94"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e24896"
                id="IOCON@PIO15@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e25015"
                id="IOCON@PIO15@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e25085"
                id="IOCON@PIO15@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e25131"
                id="IOCON@PIO15@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e25177"
                id="IOCON@PIO15@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e25224"
                id="IOCON@PIO15@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_6" format="hex0x"
                id="IOCON@PIO16"
                offset="0x98"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e25298"
                id="IOCON@PIO16@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e25417"
                id="IOCON@PIO16@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e25487"
                id="IOCON@PIO16@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e25533"
                id="IOCON@PIO16@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e25579"
                id="IOCON@PIO16@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e25626"
                id="IOCON@PIO16@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_7" format="hex0x"
                id="IOCON@PIO17"
                offset="0x9c"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e25700"
                id="IOCON@PIO17@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e25819"
                id="IOCON@PIO17@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e25889"
                id="IOCON@PIO17@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e25935"
                id="IOCON@PIO17@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e25981"
                id="IOCON@PIO17@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e26028"
                id="IOCON@PIO17@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_8" format="hex0x"
                id="IOCON@PIO18"
                offset="0xa0"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e26102"
                id="IOCON@PIO18@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e26221"
                id="IOCON@PIO18@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e26291"
                id="IOCON@PIO18@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e26337"
                id="IOCON@PIO18@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e26383"
                id="IOCON@PIO18@FILTEROFF"
                offset="[8]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e26430"
                id="IOCON@PIO18@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_9" format="hex0x"
                id="IOCON@PIO19"
                offset="0xa4"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e26505"
                id="IOCON@PIO19@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e26624"
                id="IOCON@PIO19@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e26694"
                id="IOCON@PIO19@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e26740"
                id="IOCON@PIO19@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e26786"
                id="IOCON@PIO19@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e26833"
                id="IOCON@PIO19@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e26879"
                id="IOCON@PIO19@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_10" format="hex0x"
                id="IOCON@PIO110"
                offset="0xa8"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e26953"
                id="IOCON@PIO110@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e27072"
                id="IOCON@PIO110@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e27142"
                id="IOCON@PIO110@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e27188"
                id="IOCON@PIO110@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e27234"
                id="IOCON@PIO110@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e27281"
                id="IOCON@PIO110@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e27327"
                id="IOCON@PIO110@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_11" format="hex0x"
                id="IOCON@PIO111"
                offset="0xac"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e27401"
                id="IOCON@PIO111@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e27520"
                id="IOCON@PIO111@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e27590"
                id="IOCON@PIO111@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e27636"
                id="IOCON@PIO111@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e27682"
                id="IOCON@PIO111@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e27729"
                id="IOCON@PIO111@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e27775"
                id="IOCON@PIO111@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_12" format="hex0x"
                id="IOCON@PIO112"
                offset="0xb0"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e27849"
                id="IOCON@PIO112@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e27968"
                id="IOCON@PIO112@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e28038"
                id="IOCON@PIO112@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e28084"
                id="IOCON@PIO112@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e28130"
                id="IOCON@PIO112@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e28177"
                id="IOCON@PIO112@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e28223"
                id="IOCON@PIO112@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_13" format="hex0x"
                id="IOCON@PIO113"
                offset="0xb4"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e28297"
                id="IOCON@PIO113@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e28416"
                id="IOCON@PIO113@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e28486"
                id="IOCON@PIO113@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e28532"
                id="IOCON@PIO113@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e28578"
                id="IOCON@PIO113@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e28625"
                id="IOCON@PIO113@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e28671"
                id="IOCON@PIO113@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_14" format="hex0x"
                id="IOCON@PIO114"
                offset="0xb8"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e28745"
                id="IOCON@PIO114@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e28864"
                id="IOCON@PIO114@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e28934"
                id="IOCON@PIO114@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e28980"
                id="IOCON@PIO114@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e29026"
                id="IOCON@PIO114@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e29073"
                id="IOCON@PIO114@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e29119"
                id="IOCON@PIO114@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_15" format="hex0x"
                id="IOCON@PIO115"
                offset="0xbc"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e29194"
                id="IOCON@PIO115@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e29313"
                id="IOCON@PIO115@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e29383"
                id="IOCON@PIO115@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e29429"
                id="IOCON@PIO115@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e29475"
                id="IOCON@PIO115@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e29522"
                id="IOCON@PIO115@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e29568"
                id="IOCON@PIO115@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_16" format="hex0x"
                id="IOCON@PIO116"
                offset="0xc0"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e29642"
                id="IOCON@PIO116@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e29761"
                id="IOCON@PIO116@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e29831"
                id="IOCON@PIO116@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e29877"
                id="IOCON@PIO116@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e29923"
                id="IOCON@PIO116@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e29970"
                id="IOCON@PIO116@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e30016"
                id="IOCON@PIO116@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_17" format="hex0x"
                id="IOCON@PIO117"
                offset="0xc4"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e30090"
                id="IOCON@PIO117@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e30209"
                id="IOCON@PIO117@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e30279"
                id="IOCON@PIO117@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e30325"
                id="IOCON@PIO117@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e30371"
                id="IOCON@PIO117@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e30418"
                id="IOCON@PIO117@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e30464"
                id="IOCON@PIO117@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_18" format="hex0x"
                id="IOCON@PIO118"
                offset="0xc8"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e30538"
                id="IOCON@PIO118@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e30657"
                id="IOCON@PIO118@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e30727"
                id="IOCON@PIO118@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e30773"
                id="IOCON@PIO118@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e30819"
                id="IOCON@PIO118@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e30866"
                id="IOCON@PIO118@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e30912"
                id="IOCON@PIO118@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_19" format="hex0x"
                id="IOCON@PIO119"
                offset="0xcc"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e30986"
                id="IOCON@PIO119@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e31105"
                id="IOCON@PIO119@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e31175"
                id="IOCON@PIO119@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e31221"
                id="IOCON@PIO119@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e31267"
                id="IOCON@PIO119@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e31314"
                id="IOCON@PIO119@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e31360"
                id="IOCON@PIO119@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_20" format="hex0x"
                id="IOCON@PIO120"
                offset="0xd0"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e31434"
                id="IOCON@PIO120@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e31553"
                id="IOCON@PIO120@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e31623"
                id="IOCON@PIO120@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e31669"
                id="IOCON@PIO120@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e31715"
                id="IOCON@PIO120@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e31762"
                id="IOCON@PIO120@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e31808"
                id="IOCON@PIO120@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_21" format="hex0x"
                id="IOCON@PIO121"
                offset="0xd4"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e31883"
                id="IOCON@PIO121@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e32002"
                id="IOCON@PIO121@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e32072"
                id="IOCON@PIO121@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e32118"
                id="IOCON@PIO121@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e32164"
                id="IOCON@PIO121@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e32211"
                id="IOCON@PIO121@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e32257"
                id="IOCON@PIO121@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_22" format="hex0x"
                id="IOCON@PIO122"
                offset="0xd8"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e32331"
                id="IOCON@PIO122@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e32450"
                id="IOCON@PIO122@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e32520"
                id="IOCON@PIO122@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e32566"
                id="IOCON@PIO122@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e32612"
                id="IOCON@PIO122@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e32659"
                id="IOCON@PIO122@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e32705"
                id="IOCON@PIO122@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_23" format="hex0x"
                id="IOCON@PIO123"
                offset="0xdc"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e32779"
                id="IOCON@PIO123@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e32898"
                id="IOCON@PIO123@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e32968"
                id="IOCON@PIO123@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e33014"
                id="IOCON@PIO123@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e33060"
                id="IOCON@PIO123@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e33107"
                id="IOCON@PIO123@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e33153"
                id="IOCON@PIO123@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_24" format="hex0x"
                id="IOCON@PIO124"
                offset="0xe0"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e33227"
                id="IOCON@PIO124@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e33346"
                id="IOCON@PIO124@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e33416"
                id="IOCON@PIO124@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e33462"
                id="IOCON@PIO124@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e33508"
                id="IOCON@PIO124@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e33555"
                id="IOCON@PIO124@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e33601"
                id="IOCON@PIO124@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_25" format="hex0x"
                id="IOCON@PIO125"
                offset="0xe4"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e33675"
                id="IOCON@PIO125@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e33794"
                id="IOCON@PIO125@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e33864"
                id="IOCON@PIO125@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e33910"
                id="IOCON@PIO125@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e33956"
                id="IOCON@PIO125@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e34003"
                id="IOCON@PIO125@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e34049"
                id="IOCON@PIO125@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_26" format="hex0x"
                id="IOCON@PIO126"
                offset="0xe8"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e34123"
                id="IOCON@PIO126@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e34242"
                id="IOCON@PIO126@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e34312"
                id="IOCON@PIO126@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e34358"
                id="IOCON@PIO126@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e34404"
                id="IOCON@PIO126@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e34451"
                id="IOCON@PIO126@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e34497"
                id="IOCON@PIO126@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_27" format="hex0x"
                id="IOCON@PIO127"
                offset="0xec"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e34572"
                id="IOCON@PIO127@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e34691"
                id="IOCON@PIO127@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e34761"
                id="IOCON@PIO127@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e34807"
                id="IOCON@PIO127@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e34853"
                id="IOCON@PIO127@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e34900"
                id="IOCON@PIO127@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e34946"
                id="IOCON@PIO127@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_28" format="hex0x"
                id="IOCON@PIO128"
                offset="0xf0"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e35020"
                id="IOCON@PIO128@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e35139"
                id="IOCON@PIO128@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e35209"
                id="IOCON@PIO128@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e35255"
                id="IOCON@PIO128@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e35301"
                id="IOCON@PIO128@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e35348"
                id="IOCON@PIO128@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e35394"
                id="IOCON@PIO128@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_29" format="hex0x"
                id="IOCON@PIO129"
                offset="0xf4"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e35468"
                id="IOCON@PIO129@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e35587"
                id="IOCON@PIO129@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e35657"
                id="IOCON@PIO129@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e35703"
                id="IOCON@PIO129@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e35749"
                id="IOCON@PIO129@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e35796"
                id="IOCON@PIO129@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e35842"
                id="IOCON@PIO129@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_30" format="hex0x"
                id="IOCON@PIO130"
                offset="0xf8"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e35916"
                id="IOCON@PIO130@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e36035"
                id="IOCON@PIO130@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e36105"
                id="IOCON@PIO130@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e36151"
                id="IOCON@PIO130@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e36197"
                id="IOCON@PIO130@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e36244"
                id="IOCON@PIO130@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e36290"
                id="IOCON@PIO130@OD"
                offset="[10]"/>
      </register>
      <register description="Digital I/O control for port 1 pins PIO1_31" format="hex0x"
                id="IOCON@PIO131"
                offset="0xfc"
                size="4">
         <field description="Selects pin function." format="enum" enum="d1e36364"
                id="IOCON@PIO131@FUNC"
                offset="[2:0]"/>
         <field description="Selects function mode (on-chip pull-up/pull-down resistor control)."
                format="enum"
                enum="d1e36483"
                id="IOCON@PIO131@MODE"
                offset="[4:3]"/>
         <field description="Input polarity." format="enum" enum="d1e36553"
                id="IOCON@PIO131@INVERT"
                offset="[6]"/>
         <field description="Select Analog/Digital mode." format="enum" enum="d1e36599"
                id="IOCON@PIO131@DIGIMODE"
                offset="[7]"/>
         <field description="Controls input glitch filter." format="enum" enum="d1e36645"
                id="IOCON@PIO131@FILTEROFF"
                offset="[8]"/>
         <field description="Driver slew rate." format="enum" enum="d1e36692"
                id="IOCON@PIO131@SLEW"
                offset="[9]"/>
         <field description="Controls open-drain mode." format="enum" enum="d1e36738"
                id="IOCON@PIO131@OD"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Group GPIO input interrupt (GINT0/1)"
               id="GINT0"
               size="0x48">
      <register description="GPIO grouped interrupt control register" format="hex0x"
                id="GINT0@CTRL"
                offset="0x0"
                size="4">
         <field description="Group interrupt status. This bit is cleared by writing a one to it. Writing zero has no effect."
                format="enum"
                enum="d1e36855"
                id="GINT0@CTRL@INT"
                offset="[0]"/>
         <field description="Combine enabled inputs for group interrupt" format="enum"
                enum="d1e36901"
                id="GINT0@CTRL@COMB"
                offset="[1]"/>
         <field description="Group interrupt trigger" format="enum" enum="d1e36947"
                id="GINT0@CTRL@TRIG"
                offset="[2]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 polarity register" format="hex0x"
                id="GINT0@PORT-POL0"
                offset="0x20"
                size="4">
         <field description="Configure pin polarity of port m pins for group interrupt. Bit n corresponds to pin PIOm_n of port m. 0 = the pin is active LOW. If the level on this pin is LOW, the pin contributes to the group interrupt. 1 = the pin is active HIGH. If the level on this pin is HIGH, the pin contributes to the group interrupt."
                format="hex0x"
                id="GINT0@PORT-POL0@POL"
                offset="[31:0]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 polarity register" format="hex0x"
                id="GINT0@PORT-POL1"
                offset="0x24"
                size="4">
         <field description="Configure pin polarity of port m pins for group interrupt. Bit n corresponds to pin PIOm_n of port m. 0 = the pin is active LOW. If the level on this pin is LOW, the pin contributes to the group interrupt. 1 = the pin is active HIGH. If the level on this pin is HIGH, the pin contributes to the group interrupt."
                format="hex0x"
                id="GINT0@PORT-POL1@POL"
                offset="[31:0]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 enable register" format="hex0x"
                id="GINT0@PORT-ENA0"
                offset="0x40"
                size="4">
         <field description="Enable port 0 pin for group interrupt. Bit n corresponds to pin Pm_n of port m. 0 = the port 0 pin is disabled and does not contribute to the grouped interrupt. 1 = the port 0 pin is enabled and contributes to the grouped interrupt."
                format="hex0x"
                id="GINT0@PORT-ENA0@ENA"
                offset="[31:0]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 enable register" format="hex0x"
                id="GINT0@PORT-ENA1"
                offset="0x44"
                size="4">
         <field description="Enable port 0 pin for group interrupt. Bit n corresponds to pin Pm_n of port m. 0 = the port 0 pin is disabled and does not contribute to the grouped interrupt. 1 = the port 0 pin is enabled and contributes to the grouped interrupt."
                format="hex0x"
                id="GINT0@PORT-ENA1@ENA"
                offset="[31:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Group GPIO input interrupt (GINT0/1)"
               id="GINT1"
               size="0x48">
      <register description="GPIO grouped interrupt control register" format="hex0x"
                id="GINT0@CTRL"
                offset="0x0"
                size="4">
         <field description="Group interrupt status. This bit is cleared by writing a one to it. Writing zero has no effect."
                format="enum"
                enum="d1e36855"
                id="GINT0@CTRL@INT"
                offset="[0]"/>
         <field description="Combine enabled inputs for group interrupt" format="enum"
                enum="d1e36901"
                id="GINT0@CTRL@COMB"
                offset="[1]"/>
         <field description="Group interrupt trigger" format="enum" enum="d1e36947"
                id="GINT0@CTRL@TRIG"
                offset="[2]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 polarity register" format="hex0x"
                id="GINT0@PORT-POL0"
                offset="0x20"
                size="4">
         <field description="Configure pin polarity of port m pins for group interrupt. Bit n corresponds to pin PIOm_n of port m. 0 = the pin is active LOW. If the level on this pin is LOW, the pin contributes to the group interrupt. 1 = the pin is active HIGH. If the level on this pin is HIGH, the pin contributes to the group interrupt."
                format="hex0x"
                id="GINT0@PORT-POL0@POL"
                offset="[31:0]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 polarity register" format="hex0x"
                id="GINT0@PORT-POL1"
                offset="0x24"
                size="4">
         <field description="Configure pin polarity of port m pins for group interrupt. Bit n corresponds to pin PIOm_n of port m. 0 = the pin is active LOW. If the level on this pin is LOW, the pin contributes to the group interrupt. 1 = the pin is active HIGH. If the level on this pin is HIGH, the pin contributes to the group interrupt."
                format="hex0x"
                id="GINT0@PORT-POL1@POL"
                offset="[31:0]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 enable register" format="hex0x"
                id="GINT0@PORT-ENA0"
                offset="0x40"
                size="4">
         <field description="Enable port 0 pin for group interrupt. Bit n corresponds to pin Pm_n of port m. 0 = the port 0 pin is disabled and does not contribute to the grouped interrupt. 1 = the port 0 pin is enabled and contributes to the grouped interrupt."
                format="hex0x"
                id="GINT0@PORT-ENA0@ENA"
                offset="[31:0]"/>
      </register>
      <register description="GPIO grouped interrupt port 0 enable register" format="hex0x"
                id="GINT0@PORT-ENA1"
                offset="0x44"
                size="4">
         <field description="Enable port 0 pin for group interrupt. Bit n corresponds to pin Pm_n of port m. 0 = the port 0 pin is disabled and does not contribute to the grouped interrupt. 1 = the port 0 pin is enabled and contributes to the grouped interrupt."
                format="hex0x"
                id="GINT0@PORT-ENA1@ENA"
                offset="[31:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Pin interrupt and pattern match (PINT)"
               id="PINT"
               size="0x34">
      <register description="Pin Interrupt Mode register" format="hex0x" id="PINT@ISEL"
                offset="0x0"
                size="4">
         <field description="Selects the interrupt mode for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Edge sensitive 1 = Level sensitive"
                format="hex0x"
                id="PINT@ISEL@PMODE"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt level or rising edge interrupt enable register"
                format="hex0x"
                id="PINT@IENR"
                offset="0x4"
                size="4">
         <field description="Enables the rising edge or level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable rising edge or level interrupt. 1 = Enable rising edge or level interrupt."
                format="hex0x"
                id="PINT@IENR@ENRL"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt level or rising edge interrupt set register"
                format="hex0x"
                id="PINT@SIENR"
                offset="0x8"
                writeOnly="true"
                size="4">
         <field description="Ones written to this address set bits in the IENR, thus enabling interrupts. Bit n sets bit n in the IENR register. 0 = No operation. 1 = Enable rising edge or level interrupt."
                format="hex0x"
                id="PINT@SIENR@SETENRL"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt level (rising edge interrupt) clear register"
                format="hex0x"
                id="PINT@CIENR"
                offset="0xc"
                writeOnly="true"
                size="4">
         <field description="Ones written to this address clear bits in the IENR, thus disabling the interrupts. Bit n clears bit n in the IENR register. 0 = No operation. 1 = Disable rising edge or level interrupt."
                format="hex0x"
                id="PINT@CIENR@CENRL"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt active level or falling edge interrupt enable register"
                format="hex0x"
                id="PINT@IENF"
                offset="0x10"
                size="4">
         <field description="Enables the falling edge or configures the active level interrupt for each pin interrupt. Bit n configures the pin interrupt selected in PINTSELn. 0 = Disable falling edge interrupt or set active interrupt level LOW. 1 = Enable falling edge interrupt enabled or set active interrupt level HIGH."
                format="hex0x"
                id="PINT@IENF@ENAF"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt active level or falling edge interrupt set register"
                format="hex0x"
                id="PINT@SIENF"
                offset="0x14"
                writeOnly="true"
                size="4">
         <field description="Ones written to this address set bits in the IENF, thus enabling interrupts. Bit n sets bit n in the IENF register. 0 = No operation. 1 = Select HIGH-active interrupt or enable falling edge interrupt."
                format="hex0x"
                id="PINT@SIENF@SETENAF"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt active level or falling edge interrupt clear register"
                format="hex0x"
                id="PINT@CIENF"
                offset="0x18"
                writeOnly="true"
                size="4">
         <field description="Ones written to this address clears bits in the IENF, thus disabling interrupts. Bit n clears bit n in the IENF register. 0 = No operation. 1 = LOW-active interrupt selected or falling edge interrupt disabled."
                format="hex0x"
                id="PINT@CIENF@CENAF"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt rising edge register" format="hex0x" id="PINT@RISE"
                offset="0x1c"
                size="4">
         <field description="Rising edge detect. Bit n detects the rising edge of the pin selected in PINTSELn. Read 0: No rising edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a rising edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear rising edge detection for this pin."
                format="hex0x"
                id="PINT@RISE@RDET"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt falling edge register" format="hex0x" id="PINT@FALL"
                offset="0x20"
                size="4">
         <field description="Falling edge detect. Bit n detects the falling edge of the pin selected in PINTSELn. Read 0: No falling edge has been detected on this pin since Reset or the last time a one was written to this bit. Write 0: no operation. Read 1: a falling edge has been detected since Reset or the last time a one was written to this bit. Write 1: clear falling edge detection for this pin."
                format="hex0x"
                id="PINT@FALL@FDET"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt status register" format="hex0x" id="PINT@IST"
                offset="0x24"
                size="4">
         <field description="Pin interrupt status. Bit n returns the status, clears the edge interrupt, or inverts the active level of the pin selected in PINTSELn. Read 0: interrupt is not being requested for this interrupt pin. Write 0: no operation. Read 1: interrupt is being requested for this interrupt pin. Write 1 (edge-sensitive): clear rising- and falling-edge detection for this pin. Write 1 (level-sensitive): switch the active level for this pin (in the IENF register)."
                format="hex0x"
                id="PINT@IST@PSTAT"
                offset="[7:0]"/>
      </register>
      <register description="Pattern match interrupt control register" format="hex0x"
                id="PINT@PMCTRL"
                offset="0x28"
                size="4">
         <field description="Specifies whether the 8 pin interrupts are controlled by the pin interrupt function or by the pattern match function."
                format="enum"
                enum="d1e37690"
                id="PINT@PMCTRL@SEL-PMATCH"
                offset="[0]"/>
         <field description="Enables the RXEV output to the CPU and/or to a GPIO output when the specified boolean expression evaluates to true."
                format="enum"
                enum="d1e37736"
                id="PINT@PMCTRL@ENA-RXEV"
                offset="[1]"/>
         <field description="This field displays the current state of pattern matches. A 1 in any bit of this field indicates that the corresponding product term is matched by the current state of the appropriate inputs."
                format="hex0x"
                id="PINT@PMCTRL@PMAT"
                offset="[31:24]"/>
      </register>
      <register description="Pattern match interrupt bit-slice source register" format="hex0x"
                id="PINT@PMSRC"
                offset="0x2c"
                size="4">
         <field description="Selects the input source for bit slice 0" format="enum"
                enum="d1e37829"
                id="PINT@PMSRC@SRC0"
                offset="[10:8]"/>
         <field description="Selects the input source for bit slice 1" format="enum"
                enum="d1e37948"
                id="PINT@PMSRC@SRC1"
                offset="[13:11]"/>
         <field description="Selects the input source for bit slice 2" format="enum"
                enum="d1e38067"
                id="PINT@PMSRC@SRC2"
                offset="[16:14]"/>
         <field description="Selects the input source for bit slice 3" format="enum"
                enum="d1e38186"
                id="PINT@PMSRC@SRC3"
                offset="[19:17]"/>
         <field description="Selects the input source for bit slice 4" format="enum"
                enum="d1e38305"
                id="PINT@PMSRC@SRC4"
                offset="[22:20]"/>
         <field description="Selects the input source for bit slice 5" format="enum"
                enum="d1e38425"
                id="PINT@PMSRC@SRC5"
                offset="[25:23]"/>
         <field description="Selects the input source for bit slice 6" format="enum"
                enum="d1e38544"
                id="PINT@PMSRC@SRC6"
                offset="[28:26]"/>
         <field description="Selects the input source for bit slice 7" format="enum"
                enum="d1e38663"
                id="PINT@PMSRC@SRC7"
                offset="[31:29]"/>
      </register>
      <register description="Pattern match interrupt bit slice configuration register"
                format="hex0x"
                id="PINT@PMCFG"
                offset="0x30"
                size="4">
         <field description="Determines whether slice 0 is an endpoint." format="enum"
                enum="d1e38810"
                id="PINT@PMCFG@PROD-ENDPTS0"
                offset="[0]"/>
         <field description="Determines whether slice 1 is an endpoint." format="enum"
                enum="d1e38856"
                id="PINT@PMCFG@PROD-ENDPTS1"
                offset="[1]"/>
         <field description="Determines whether slice 2 is an endpoint." format="enum"
                enum="d1e38902"
                id="PINT@PMCFG@PROD-ENDPTS2"
                offset="[2]"/>
         <field description="Determines whether slice 3 is an endpoint." format="enum"
                enum="d1e38948"
                id="PINT@PMCFG@PROD-ENDPTS3"
                offset="[3]"/>
         <field description="Determines whether slice 4 is an endpoint." format="enum"
                enum="d1e38994"
                id="PINT@PMCFG@PROD-ENDPTS4"
                offset="[4]"/>
         <field description="Determines whether slice 5 is an endpoint." format="enum"
                enum="d1e39041"
                id="PINT@PMCFG@PROD-ENDPTS5"
                offset="[5]"/>
         <field description="Determines whether slice 6 is an endpoint." format="enum"
                enum="d1e39087"
                id="PINT@PMCFG@PROD-ENDPTS6"
                offset="[6]"/>
         <field description="Specifies the match contribution condition for bit slice 0."
                format="enum"
                enum="d1e39133"
                id="PINT@PMCFG@CFG0"
                offset="[10:8]"/>
         <field description="Specifies the match contribution condition for bit slice 1."
                format="enum"
                enum="d1e39252"
                id="PINT@PMCFG@CFG1"
                offset="[13:11]"/>
         <field description="Specifies the match contribution condition for bit slice 2."
                format="enum"
                enum="d1e39371"
                id="PINT@PMCFG@CFG2"
                offset="[16:14]"/>
         <field description="Specifies the match contribution condition for bit slice 3."
                format="enum"
                enum="d1e39490"
                id="PINT@PMCFG@CFG3"
                offset="[19:17]"/>
         <field description="Specifies the match contribution condition for bit slice 4."
                format="enum"
                enum="d1e39610"
                id="PINT@PMCFG@CFG4"
                offset="[22:20]"/>
         <field description="Specifies the match contribution condition for bit slice 5."
                format="enum"
                enum="d1e39729"
                id="PINT@PMCFG@CFG5"
                offset="[25:23]"/>
         <field description="Specifies the match contribution condition for bit slice 6."
                format="enum"
                enum="d1e39848"
                id="PINT@PMCFG@CFG6"
                offset="[28:26]"/>
         <field description="Specifies the match contribution condition for bit slice 7."
                format="enum"
                enum="d1e39967"
                id="PINT@PMCFG@CFG7"
                offset="[31:29]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Input multiplexing (INPUT MUX)"
               id="INPUTMUX"
               size="0x188">
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL0"
                offset="0xc0"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL0@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL1"
                offset="0xc4"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL1@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL2"
                offset="0xc8"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL2@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL3"
                offset="0xcc"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL3@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL4"
                offset="0xd0"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL4@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL5"
                offset="0xd4"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL5@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL6"
                offset="0xd8"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL6@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Pin interrupt select register" format="hex0x"
                id="INPUTMUX@PINTSEL7"
                offset="0xdc"
                size="4">
         <field description="Pin number select for pin interrupt or pattern match engine input. (PIO0_0 to PIO1_31 correspond to numbers 0 to 63)."
                format="hex0x"
                id="INPUTMUX@PINTSEL7@INTPIN"
                offset="[7:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX0"
                offset="0xe0"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX0@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX1"
                offset="0xe4"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX1@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX2"
                offset="0xe8"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX2@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX3"
                offset="0xec"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX3@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX4"
                offset="0xf0"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX4@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX5"
                offset="0xf4"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX5@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX6"
                offset="0xf8"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX6@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX7"
                offset="0xfc"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX7@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX8"
                offset="0x100"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX8@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX9"
                offset="0x104"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX9@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX10"
                offset="0x108"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX10@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX11"
                offset="0x10c"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX11@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX12"
                offset="0x110"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX12@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX13"
                offset="0x114"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX13@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX14"
                offset="0x118"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX14@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX15"
                offset="0x11c"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX15@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX16"
                offset="0x120"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX16@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX17"
                offset="0x124"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX17@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX18"
                offset="0x128"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX18@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX19"
                offset="0x12c"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX19@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX20"
                offset="0x130"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX20@INP"
                offset="[4:0]"/>
      </register>
      <register description="Trigger select register for DMA channel" format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX21"
                offset="0x134"
                size="4">
         <field description="Trigger input number (decimal value) for DMA channel n (n = 0 to 21). 0 = ADC0 Sequence A interrupt 1 = ADC0 Sequence B interrupt 2 = SCT0 DMA request 0 3 = SCT0 DMA request 1 4 = Timer CTIMER0 Match 0 5 = Timer CTIMER0 Match 1 6 = Timer CTIMER1 Match 0 7 = Timer CTIMER2 Match 0 8 = Timer CTIMER2 Match 1 9 = Timer CTIMER3 Match 0 10 = Timer CTIMER4 Match 0 11 = Timer CTIMER4 Match 1 12 = Pin interrupt 0 13 = Pin interrupt 1 14 = Pin interrupt 2 15 = Pin interrupt 3 16 = DMA output trigger mux 0 17 = DMA output trigger mux 1 18 = DMA output trigger mux 2 19 = DMA output trigger mux 3"
                format="hex0x"
                id="INPUTMUX@DMA-ITRIG-INMUX21@INP"
                offset="[4:0]"/>
      </register>
      <register description="DMA output trigger selection to become DMA trigger" format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX0"
                offset="0x160"
                size="4">
         <field description="DMA trigger output number (decimal value) for DMA channel n (n = 0 to 19)."
                format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX0@INP"
                offset="[4:0]"/>
      </register>
      <register description="DMA output trigger selection to become DMA trigger" format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX1"
                offset="0x164"
                size="4">
         <field description="DMA trigger output number (decimal value) for DMA channel n (n = 0 to 19)."
                format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX1@INP"
                offset="[4:0]"/>
      </register>
      <register description="DMA output trigger selection to become DMA trigger" format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX2"
                offset="0x168"
                size="4">
         <field description="DMA trigger output number (decimal value) for DMA channel n (n = 0 to 19)."
                format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX2@INP"
                offset="[4:0]"/>
      </register>
      <register description="DMA output trigger selection to become DMA trigger" format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX3"
                offset="0x16c"
                size="4">
         <field description="DMA trigger output number (decimal value) for DMA channel n (n = 0 to 19)."
                format="hex0x"
                id="INPUTMUX@DMA-OTRIG-INMUX3@INP"
                offset="[4:0]"/>
      </register>
      <register description="Selection for frequency measurement reference clock"
                format="hex0x"
                id="INPUTMUX@FREQMEAS-REF"
                offset="0x180"
                size="4">
         <field description="Clock source number (decimal value) for frequency measure function target clock: 0 = CLK_IN 1 = FRO 12 MHz oscillator 2 = Watchdog oscillator 3 = 32 kHz RTC oscillator 4 = Main clock (see Section 4.5.23) 5 = PIO0_4 6 = PIO0_20 7 = PIO0_24 8 = PIO1_4"
                format="hex0x"
                id="INPUTMUX@FREQMEAS-REF@CLKIN"
                offset="[4:0]"/>
      </register>
      <register description="Selection for frequency measurement target clock" format="hex0x"
                id="INPUTMUX@FREQMEAS-TARGET"
                offset="0x184"
                size="4">
         <field description="Clock source number (decimal value) for frequency measure function target clock: 0 = CLK_IN 1 = FRO 12 MHz oscillator 2 = Watchdog oscillator 3 = 32 kHz RTC oscillator 4 = Main clock (see Section 4.5.23) 5 = PIO0_4 6 = PIO0_20 7 = PIO0_24 8 = PIO1_4"
                format="hex0x"
                id="INPUTMUX@FREQMEAS-TARGET@CLKIN"
                offset="[4:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Standard counter/timers (CTIMER0 to 4)"
               id="CTIMER0"
               size="0x78">
      <register description="Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending."
                format="hex0x"
                id="CTIMER0@IR"
                offset="0x0"
                size="4">
         <field description="Interrupt flag for match channel 0." format="hex0x"
                id="CTIMER0@IR@MR0INT"
                offset="[0]"/>
         <field description="Interrupt flag for match channel 1." format="hex0x"
                id="CTIMER0@IR@MR1INT"
                offset="[1]"/>
         <field description="Interrupt flag for match channel 2." format="hex0x"
                id="CTIMER0@IR@MR2INT"
                offset="[2]"/>
         <field description="Interrupt flag for match channel 3." format="hex0x"
                id="CTIMER0@IR@MR3INT"
                offset="[3]"/>
         <field description="Interrupt flag for capture channel 0 event." format="hex0x"
                id="CTIMER0@IR@CR0INT"
                offset="[4]"/>
         <field description="Interrupt flag for capture channel 1 event." format="hex0x"
                id="CTIMER0@IR@CR1INT"
                offset="[5]"/>
         <field description="Interrupt flag for capture channel 2 event." format="hex0x"
                id="CTIMER0@IR@CR2INT"
                offset="[6]"/>
         <field description="Interrupt flag for capture channel 3 event." format="hex0x"
                id="CTIMER0@IR@CR3INT"
                offset="[7]"/>
      </register>
      <register description="Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR."
                format="hex0x"
                id="CTIMER0@TCR"
                offset="0x4"
                size="4">
         <field description="Counter enable." format="enum" enum="d1e40610"
                id="CTIMER0@TCR@CEN"
                offset="[0]"/>
         <field description="Counter reset." format="enum" enum="d1e40656"
                id="CTIMER0@TCR@CRST"
                offset="[1]"/>
      </register>
      <register description="Timer Counter. The 32 bit TC is incremented every PR+1 cycles of the APB bus clock. The TC is controlled through the TCR."
                format="hex0x"
                id="CTIMER0@TC"
                offset="0x8"
                size="4">
         <field description="Timer counter value." format="hex0x" id="CTIMER0@TC@TCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Register. When the Prescale Counter (PC) is equal to this value, the next clock increments the TC and clears the PC."
                format="hex0x"
                id="CTIMER0@PR"
                offset="0xc"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PR@PRVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Counter. The 32 bit PC is a counter which is incremented to the value stored in PR. When the value in PR is reached, the TC is incremented and the PC is cleared. The PC is observable and controllable through the bus interface."
                format="hex0x"
                id="CTIMER0@PC"
                offset="0x10"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PC@PCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Match Control Register. The MCR is used to control if an interrupt is generated and if the TC is reset when a Match occurs."
                format="hex0x"
                id="CTIMER0@MCR"
                offset="0x14"
                size="4">
         <field description="Interrupt on MR0: an interrupt is generated when MR0 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0I"
                offset="[0]"/>
         <field description="Reset on MR0: the TC will be reset if MR0 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0R"
                offset="[1]"/>
         <field description="Stop on MR0: the TC and PC will be stopped and TCR[0] will be set to 0 if MR0 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0S"
                offset="[2]"/>
         <field description="Interrupt on MR1: an interrupt is generated when MR1 matches the value in the TC. 0 = disabled. 1 = enabled. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1I"
                offset="[3]"/>
         <field description="Reset on MR1: the TC will be reset if MR1 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1R"
                offset="[4]"/>
         <field description="Stop on MR1: the TC and PC will be stopped and TCR[0] will be set to 0 if MR1 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1S"
                offset="[5]"/>
         <field description="Interrupt on MR2: an interrupt is generated when MR2 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2I"
                offset="[6]"/>
         <field description="Reset on MR2: the TC will be reset if MR2 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2R"
                offset="[7]"/>
         <field description="Stop on MR2: the TC and PC will be stopped and TCR[0] will be set to 0 if MR2 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2S"
                offset="[8]"/>
         <field description="Interrupt on MR3: an interrupt is generated when MR3 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3I"
                offset="[9]"/>
         <field description="Reset on MR3: the TC will be reset if MR3 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3R"
                offset="[10]"/>
         <field description="Stop on MR3: the TC and PC will be stopped and TCR[0] will be set to 0 if MR3 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3S"
                offset="[11]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR0"
                offset="0x18"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR0@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR1"
                offset="0x1c"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR1@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR2"
                offset="0x20"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR2@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR3"
                offset="0x24"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR3@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place."
                format="hex0x"
                id="CTIMER0@CCR"
                offset="0x28"
                size="4">
         <field description="Rising edge of capture channel 0: a sequence of 0 then 1 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0RE"
                offset="[0]"/>
         <field description="Falling edge of capture channel 0: a sequence of 1 then 0 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0FE"
                offset="[1]"/>
         <field description="Generate interrupt on channel 0 capture event: a CR0 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP0I"
                offset="[2]"/>
         <field description="Rising edge of capture channel 1: a sequence of 0 then 1 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1RE"
                offset="[3]"/>
         <field description="Falling edge of capture channel 1: a sequence of 1 then 0 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1FE"
                offset="[4]"/>
         <field description="Generate interrupt on channel 1 capture event: a CR1 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP1I"
                offset="[5]"/>
         <field description="Rising edge of capture channel 2: a sequence of 0 then 1 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2RE"
                offset="[6]"/>
         <field description="Falling edge of capture channel 2: a sequence of 1 then 0 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2FE"
                offset="[7]"/>
         <field description="Generate interrupt on channel 2 capture event: a CR2 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP2I"
                offset="[8]"/>
         <field description="Rising edge of capture channel 3: a sequence of 0 then 1 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3RE"
                offset="[9]"/>
         <field description="Falling edge of capture channel 3: a sequence of 1 then 0 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3FE"
                offset="[10]"/>
         <field description="Generate interrupt on channel 3 capture event: a CR3 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP3I"
                offset="[11]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR0"
                offset="0x2c"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR0@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR1"
                offset="0x30"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR1@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR2"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR2@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR3"
                offset="0x38"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR3@CAP"
                offset="[31:0]"/>
      </register>
      <register description="External Match Register. The EMR controls the match function and the external match pins."
                format="hex0x"
                id="CTIMER0@EMR"
                offset="0x3c"
                size="4">
         <field description="External Match 0. This bit reflects the state of output MAT0, whether or not this output is connected to a pin. When a match occurs between the TC and MR0, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[5:4]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM0"
                offset="[0]"/>
         <field description="External Match 1. This bit reflects the state of output MAT1, whether or not this output is connected to a pin. When a match occurs between the TC and MR1, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[7:6]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM1"
                offset="[1]"/>
         <field description="External Match 2. This bit reflects the state of output MAT2, whether or not this output is connected to a pin. When a match occurs between the TC and MR2, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[9:8]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM2"
                offset="[2]"/>
         <field description="External Match 3. This bit reflects the state of output MAT3, whether or not this output is connected to a pin. When a match occurs between the TC and MR3, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by MR[11:10]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM3"
                offset="[3]"/>
         <field description="External Match Control 0. Determines the functionality of External Match 0."
                format="enum"
                enum="d1e41537"
                id="CTIMER0@EMR@EMC0"
                offset="[5:4]"/>
         <field description="External Match Control 1. Determines the functionality of External Match 1."
                format="enum"
                enum="d1e41608"
                id="CTIMER0@EMR@EMC1"
                offset="[7:6]"/>
         <field description="External Match Control 2. Determines the functionality of External Match 2."
                format="enum"
                enum="d1e41678"
                id="CTIMER0@EMR@EMC2"
                offset="[9:8]"/>
         <field description="External Match Control 3. Determines the functionality of External Match 3."
                format="enum"
                enum="d1e41748"
                id="CTIMER0@EMR@EMC3"
                offset="[11:10]"/>
      </register>
      <register description="Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting."
                format="hex0x"
                id="CTIMER0@CTCR"
                offset="0x70"
                size="4">
         <field description="Counter/Timer Mode This field selects which rising APB bus clock edges can increment Timer's Prescale Counter (PC), or clear PC and increment Timer Counter (TC). Timer Mode: the TC is incremented when the Prescale Counter matches the Prescale Register."
                format="enum"
                enum="d1e41846"
                id="CTIMER0@CTCR@CTMODE"
                offset="[1:0]"/>
         <field description="Count Input Select When bits 1:0 in this register are not 00, these bits select which CAP pin is sampled for clocking. Note: If Counter mode is selected for a particular CAPn input in the CTCR, the 3 bits for that input in the Capture Control Register (CCR) must be programmed as 000. However, capture and/or interrupt can be selected for the other 3 CAPn inputs in the same timer."
                format="enum"
                enum="d1e41916"
                id="CTIMER0@CTCR@CINSEL"
                offset="[3:2]"/>
         <field description="Setting this bit to 1 enables clearing of the timer and the prescaler when the capture-edge event specified in bits 7:5 occurs."
                format="hex0x"
                id="CTIMER0@CTCR@ENCC"
                offset="[4]"/>
         <field description="Edge select. When bit 4 is 1, these bits select which capture input edge will cause the timer and prescaler to be cleared. These bits have no effect when bit 4 is low. Values 0x2 to 0x3 and 0x6 to 0x7 are reserved."
                format="enum"
                enum="d1e42004"
                id="CTIMER0@CTCR@SELCC"
                offset="[7:5]"/>
      </register>
      <register description="PWM Control Register. The PWMCON enables PWM mode for the external match pins."
                format="hex0x"
                id="CTIMER0@PWMC"
                offset="0x74"
                size="4">
         <field description="PWM mode enable for channel0." format="enum" enum="d1e42128"
                id="CTIMER0@PWMC@PWMEN0"
                offset="[0]"/>
         <field description="PWM mode enable for channel1." format="enum" enum="d1e42174"
                id="CTIMER0@PWMC@PWMEN1"
                offset="[1]"/>
         <field description="PWM mode enable for channel2." format="enum" enum="d1e42220"
                id="CTIMER0@PWMC@PWMEN2"
                offset="[2]"/>
         <field description="PWM mode enable for channel3. Note: It is recommended to use match channel 3 to set the PWM cycle."
                format="enum"
                enum="d1e42266"
                id="CTIMER0@PWMC@PWMEN3"
                offset="[3]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Standard counter/timers (CTIMER0 to 4)"
               id="CTIMER1"
               size="0x78">
      <register description="Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending."
                format="hex0x"
                id="CTIMER0@IR"
                offset="0x0"
                size="4">
         <field description="Interrupt flag for match channel 0." format="hex0x"
                id="CTIMER0@IR@MR0INT"
                offset="[0]"/>
         <field description="Interrupt flag for match channel 1." format="hex0x"
                id="CTIMER0@IR@MR1INT"
                offset="[1]"/>
         <field description="Interrupt flag for match channel 2." format="hex0x"
                id="CTIMER0@IR@MR2INT"
                offset="[2]"/>
         <field description="Interrupt flag for match channel 3." format="hex0x"
                id="CTIMER0@IR@MR3INT"
                offset="[3]"/>
         <field description="Interrupt flag for capture channel 0 event." format="hex0x"
                id="CTIMER0@IR@CR0INT"
                offset="[4]"/>
         <field description="Interrupt flag for capture channel 1 event." format="hex0x"
                id="CTIMER0@IR@CR1INT"
                offset="[5]"/>
         <field description="Interrupt flag for capture channel 2 event." format="hex0x"
                id="CTIMER0@IR@CR2INT"
                offset="[6]"/>
         <field description="Interrupt flag for capture channel 3 event." format="hex0x"
                id="CTIMER0@IR@CR3INT"
                offset="[7]"/>
      </register>
      <register description="Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR."
                format="hex0x"
                id="CTIMER0@TCR"
                offset="0x4"
                size="4">
         <field description="Counter enable." format="enum" enum="d1e40610"
                id="CTIMER0@TCR@CEN"
                offset="[0]"/>
         <field description="Counter reset." format="enum" enum="d1e40656"
                id="CTIMER0@TCR@CRST"
                offset="[1]"/>
      </register>
      <register description="Timer Counter. The 32 bit TC is incremented every PR+1 cycles of the APB bus clock. The TC is controlled through the TCR."
                format="hex0x"
                id="CTIMER0@TC"
                offset="0x8"
                size="4">
         <field description="Timer counter value." format="hex0x" id="CTIMER0@TC@TCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Register. When the Prescale Counter (PC) is equal to this value, the next clock increments the TC and clears the PC."
                format="hex0x"
                id="CTIMER0@PR"
                offset="0xc"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PR@PRVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Counter. The 32 bit PC is a counter which is incremented to the value stored in PR. When the value in PR is reached, the TC is incremented and the PC is cleared. The PC is observable and controllable through the bus interface."
                format="hex0x"
                id="CTIMER0@PC"
                offset="0x10"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PC@PCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Match Control Register. The MCR is used to control if an interrupt is generated and if the TC is reset when a Match occurs."
                format="hex0x"
                id="CTIMER0@MCR"
                offset="0x14"
                size="4">
         <field description="Interrupt on MR0: an interrupt is generated when MR0 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0I"
                offset="[0]"/>
         <field description="Reset on MR0: the TC will be reset if MR0 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0R"
                offset="[1]"/>
         <field description="Stop on MR0: the TC and PC will be stopped and TCR[0] will be set to 0 if MR0 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0S"
                offset="[2]"/>
         <field description="Interrupt on MR1: an interrupt is generated when MR1 matches the value in the TC. 0 = disabled. 1 = enabled. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1I"
                offset="[3]"/>
         <field description="Reset on MR1: the TC will be reset if MR1 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1R"
                offset="[4]"/>
         <field description="Stop on MR1: the TC and PC will be stopped and TCR[0] will be set to 0 if MR1 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1S"
                offset="[5]"/>
         <field description="Interrupt on MR2: an interrupt is generated when MR2 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2I"
                offset="[6]"/>
         <field description="Reset on MR2: the TC will be reset if MR2 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2R"
                offset="[7]"/>
         <field description="Stop on MR2: the TC and PC will be stopped and TCR[0] will be set to 0 if MR2 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2S"
                offset="[8]"/>
         <field description="Interrupt on MR3: an interrupt is generated when MR3 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3I"
                offset="[9]"/>
         <field description="Reset on MR3: the TC will be reset if MR3 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3R"
                offset="[10]"/>
         <field description="Stop on MR3: the TC and PC will be stopped and TCR[0] will be set to 0 if MR3 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3S"
                offset="[11]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR0"
                offset="0x18"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR0@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR1"
                offset="0x1c"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR1@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR2"
                offset="0x20"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR2@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR3"
                offset="0x24"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR3@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place."
                format="hex0x"
                id="CTIMER0@CCR"
                offset="0x28"
                size="4">
         <field description="Rising edge of capture channel 0: a sequence of 0 then 1 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0RE"
                offset="[0]"/>
         <field description="Falling edge of capture channel 0: a sequence of 1 then 0 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0FE"
                offset="[1]"/>
         <field description="Generate interrupt on channel 0 capture event: a CR0 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP0I"
                offset="[2]"/>
         <field description="Rising edge of capture channel 1: a sequence of 0 then 1 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1RE"
                offset="[3]"/>
         <field description="Falling edge of capture channel 1: a sequence of 1 then 0 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1FE"
                offset="[4]"/>
         <field description="Generate interrupt on channel 1 capture event: a CR1 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP1I"
                offset="[5]"/>
         <field description="Rising edge of capture channel 2: a sequence of 0 then 1 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2RE"
                offset="[6]"/>
         <field description="Falling edge of capture channel 2: a sequence of 1 then 0 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2FE"
                offset="[7]"/>
         <field description="Generate interrupt on channel 2 capture event: a CR2 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP2I"
                offset="[8]"/>
         <field description="Rising edge of capture channel 3: a sequence of 0 then 1 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3RE"
                offset="[9]"/>
         <field description="Falling edge of capture channel 3: a sequence of 1 then 0 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3FE"
                offset="[10]"/>
         <field description="Generate interrupt on channel 3 capture event: a CR3 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP3I"
                offset="[11]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR0"
                offset="0x2c"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR0@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR1"
                offset="0x30"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR1@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR2"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR2@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR3"
                offset="0x38"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR3@CAP"
                offset="[31:0]"/>
      </register>
      <register description="External Match Register. The EMR controls the match function and the external match pins."
                format="hex0x"
                id="CTIMER0@EMR"
                offset="0x3c"
                size="4">
         <field description="External Match 0. This bit reflects the state of output MAT0, whether or not this output is connected to a pin. When a match occurs between the TC and MR0, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[5:4]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM0"
                offset="[0]"/>
         <field description="External Match 1. This bit reflects the state of output MAT1, whether or not this output is connected to a pin. When a match occurs between the TC and MR1, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[7:6]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM1"
                offset="[1]"/>
         <field description="External Match 2. This bit reflects the state of output MAT2, whether or not this output is connected to a pin. When a match occurs between the TC and MR2, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[9:8]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM2"
                offset="[2]"/>
         <field description="External Match 3. This bit reflects the state of output MAT3, whether or not this output is connected to a pin. When a match occurs between the TC and MR3, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by MR[11:10]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM3"
                offset="[3]"/>
         <field description="External Match Control 0. Determines the functionality of External Match 0."
                format="enum"
                enum="d1e41537"
                id="CTIMER0@EMR@EMC0"
                offset="[5:4]"/>
         <field description="External Match Control 1. Determines the functionality of External Match 1."
                format="enum"
                enum="d1e41608"
                id="CTIMER0@EMR@EMC1"
                offset="[7:6]"/>
         <field description="External Match Control 2. Determines the functionality of External Match 2."
                format="enum"
                enum="d1e41678"
                id="CTIMER0@EMR@EMC2"
                offset="[9:8]"/>
         <field description="External Match Control 3. Determines the functionality of External Match 3."
                format="enum"
                enum="d1e41748"
                id="CTIMER0@EMR@EMC3"
                offset="[11:10]"/>
      </register>
      <register description="Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting."
                format="hex0x"
                id="CTIMER0@CTCR"
                offset="0x70"
                size="4">
         <field description="Counter/Timer Mode This field selects which rising APB bus clock edges can increment Timer's Prescale Counter (PC), or clear PC and increment Timer Counter (TC). Timer Mode: the TC is incremented when the Prescale Counter matches the Prescale Register."
                format="enum"
                enum="d1e41846"
                id="CTIMER0@CTCR@CTMODE"
                offset="[1:0]"/>
         <field description="Count Input Select When bits 1:0 in this register are not 00, these bits select which CAP pin is sampled for clocking. Note: If Counter mode is selected for a particular CAPn input in the CTCR, the 3 bits for that input in the Capture Control Register (CCR) must be programmed as 000. However, capture and/or interrupt can be selected for the other 3 CAPn inputs in the same timer."
                format="enum"
                enum="d1e41916"
                id="CTIMER0@CTCR@CINSEL"
                offset="[3:2]"/>
         <field description="Setting this bit to 1 enables clearing of the timer and the prescaler when the capture-edge event specified in bits 7:5 occurs."
                format="hex0x"
                id="CTIMER0@CTCR@ENCC"
                offset="[4]"/>
         <field description="Edge select. When bit 4 is 1, these bits select which capture input edge will cause the timer and prescaler to be cleared. These bits have no effect when bit 4 is low. Values 0x2 to 0x3 and 0x6 to 0x7 are reserved."
                format="enum"
                enum="d1e42004"
                id="CTIMER0@CTCR@SELCC"
                offset="[7:5]"/>
      </register>
      <register description="PWM Control Register. The PWMCON enables PWM mode for the external match pins."
                format="hex0x"
                id="CTIMER0@PWMC"
                offset="0x74"
                size="4">
         <field description="PWM mode enable for channel0." format="enum" enum="d1e42128"
                id="CTIMER0@PWMC@PWMEN0"
                offset="[0]"/>
         <field description="PWM mode enable for channel1." format="enum" enum="d1e42174"
                id="CTIMER0@PWMC@PWMEN1"
                offset="[1]"/>
         <field description="PWM mode enable for channel2." format="enum" enum="d1e42220"
                id="CTIMER0@PWMC@PWMEN2"
                offset="[2]"/>
         <field description="PWM mode enable for channel3. Note: It is recommended to use match channel 3 to set the PWM cycle."
                format="enum"
                enum="d1e42266"
                id="CTIMER0@PWMC@PWMEN3"
                offset="[3]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Standard counter/timers (CTIMER0 to 4)"
               id="CTIMER2"
               size="0x78">
      <register description="Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending."
                format="hex0x"
                id="CTIMER0@IR"
                offset="0x0"
                size="4">
         <field description="Interrupt flag for match channel 0." format="hex0x"
                id="CTIMER0@IR@MR0INT"
                offset="[0]"/>
         <field description="Interrupt flag for match channel 1." format="hex0x"
                id="CTIMER0@IR@MR1INT"
                offset="[1]"/>
         <field description="Interrupt flag for match channel 2." format="hex0x"
                id="CTIMER0@IR@MR2INT"
                offset="[2]"/>
         <field description="Interrupt flag for match channel 3." format="hex0x"
                id="CTIMER0@IR@MR3INT"
                offset="[3]"/>
         <field description="Interrupt flag for capture channel 0 event." format="hex0x"
                id="CTIMER0@IR@CR0INT"
                offset="[4]"/>
         <field description="Interrupt flag for capture channel 1 event." format="hex0x"
                id="CTIMER0@IR@CR1INT"
                offset="[5]"/>
         <field description="Interrupt flag for capture channel 2 event." format="hex0x"
                id="CTIMER0@IR@CR2INT"
                offset="[6]"/>
         <field description="Interrupt flag for capture channel 3 event." format="hex0x"
                id="CTIMER0@IR@CR3INT"
                offset="[7]"/>
      </register>
      <register description="Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR."
                format="hex0x"
                id="CTIMER0@TCR"
                offset="0x4"
                size="4">
         <field description="Counter enable." format="enum" enum="d1e40610"
                id="CTIMER0@TCR@CEN"
                offset="[0]"/>
         <field description="Counter reset." format="enum" enum="d1e40656"
                id="CTIMER0@TCR@CRST"
                offset="[1]"/>
      </register>
      <register description="Timer Counter. The 32 bit TC is incremented every PR+1 cycles of the APB bus clock. The TC is controlled through the TCR."
                format="hex0x"
                id="CTIMER0@TC"
                offset="0x8"
                size="4">
         <field description="Timer counter value." format="hex0x" id="CTIMER0@TC@TCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Register. When the Prescale Counter (PC) is equal to this value, the next clock increments the TC and clears the PC."
                format="hex0x"
                id="CTIMER0@PR"
                offset="0xc"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PR@PRVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Counter. The 32 bit PC is a counter which is incremented to the value stored in PR. When the value in PR is reached, the TC is incremented and the PC is cleared. The PC is observable and controllable through the bus interface."
                format="hex0x"
                id="CTIMER0@PC"
                offset="0x10"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PC@PCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Match Control Register. The MCR is used to control if an interrupt is generated and if the TC is reset when a Match occurs."
                format="hex0x"
                id="CTIMER0@MCR"
                offset="0x14"
                size="4">
         <field description="Interrupt on MR0: an interrupt is generated when MR0 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0I"
                offset="[0]"/>
         <field description="Reset on MR0: the TC will be reset if MR0 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0R"
                offset="[1]"/>
         <field description="Stop on MR0: the TC and PC will be stopped and TCR[0] will be set to 0 if MR0 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0S"
                offset="[2]"/>
         <field description="Interrupt on MR1: an interrupt is generated when MR1 matches the value in the TC. 0 = disabled. 1 = enabled. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1I"
                offset="[3]"/>
         <field description="Reset on MR1: the TC will be reset if MR1 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1R"
                offset="[4]"/>
         <field description="Stop on MR1: the TC and PC will be stopped and TCR[0] will be set to 0 if MR1 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1S"
                offset="[5]"/>
         <field description="Interrupt on MR2: an interrupt is generated when MR2 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2I"
                offset="[6]"/>
         <field description="Reset on MR2: the TC will be reset if MR2 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2R"
                offset="[7]"/>
         <field description="Stop on MR2: the TC and PC will be stopped and TCR[0] will be set to 0 if MR2 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2S"
                offset="[8]"/>
         <field description="Interrupt on MR3: an interrupt is generated when MR3 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3I"
                offset="[9]"/>
         <field description="Reset on MR3: the TC will be reset if MR3 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3R"
                offset="[10]"/>
         <field description="Stop on MR3: the TC and PC will be stopped and TCR[0] will be set to 0 if MR3 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3S"
                offset="[11]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR0"
                offset="0x18"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR0@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR1"
                offset="0x1c"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR1@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR2"
                offset="0x20"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR2@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR3"
                offset="0x24"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR3@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place."
                format="hex0x"
                id="CTIMER0@CCR"
                offset="0x28"
                size="4">
         <field description="Rising edge of capture channel 0: a sequence of 0 then 1 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0RE"
                offset="[0]"/>
         <field description="Falling edge of capture channel 0: a sequence of 1 then 0 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0FE"
                offset="[1]"/>
         <field description="Generate interrupt on channel 0 capture event: a CR0 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP0I"
                offset="[2]"/>
         <field description="Rising edge of capture channel 1: a sequence of 0 then 1 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1RE"
                offset="[3]"/>
         <field description="Falling edge of capture channel 1: a sequence of 1 then 0 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1FE"
                offset="[4]"/>
         <field description="Generate interrupt on channel 1 capture event: a CR1 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP1I"
                offset="[5]"/>
         <field description="Rising edge of capture channel 2: a sequence of 0 then 1 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2RE"
                offset="[6]"/>
         <field description="Falling edge of capture channel 2: a sequence of 1 then 0 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2FE"
                offset="[7]"/>
         <field description="Generate interrupt on channel 2 capture event: a CR2 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP2I"
                offset="[8]"/>
         <field description="Rising edge of capture channel 3: a sequence of 0 then 1 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3RE"
                offset="[9]"/>
         <field description="Falling edge of capture channel 3: a sequence of 1 then 0 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3FE"
                offset="[10]"/>
         <field description="Generate interrupt on channel 3 capture event: a CR3 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP3I"
                offset="[11]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR0"
                offset="0x2c"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR0@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR1"
                offset="0x30"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR1@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR2"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR2@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR3"
                offset="0x38"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR3@CAP"
                offset="[31:0]"/>
      </register>
      <register description="External Match Register. The EMR controls the match function and the external match pins."
                format="hex0x"
                id="CTIMER0@EMR"
                offset="0x3c"
                size="4">
         <field description="External Match 0. This bit reflects the state of output MAT0, whether or not this output is connected to a pin. When a match occurs between the TC and MR0, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[5:4]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM0"
                offset="[0]"/>
         <field description="External Match 1. This bit reflects the state of output MAT1, whether or not this output is connected to a pin. When a match occurs between the TC and MR1, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[7:6]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM1"
                offset="[1]"/>
         <field description="External Match 2. This bit reflects the state of output MAT2, whether or not this output is connected to a pin. When a match occurs between the TC and MR2, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[9:8]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM2"
                offset="[2]"/>
         <field description="External Match 3. This bit reflects the state of output MAT3, whether or not this output is connected to a pin. When a match occurs between the TC and MR3, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by MR[11:10]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM3"
                offset="[3]"/>
         <field description="External Match Control 0. Determines the functionality of External Match 0."
                format="enum"
                enum="d1e41537"
                id="CTIMER0@EMR@EMC0"
                offset="[5:4]"/>
         <field description="External Match Control 1. Determines the functionality of External Match 1."
                format="enum"
                enum="d1e41608"
                id="CTIMER0@EMR@EMC1"
                offset="[7:6]"/>
         <field description="External Match Control 2. Determines the functionality of External Match 2."
                format="enum"
                enum="d1e41678"
                id="CTIMER0@EMR@EMC2"
                offset="[9:8]"/>
         <field description="External Match Control 3. Determines the functionality of External Match 3."
                format="enum"
                enum="d1e41748"
                id="CTIMER0@EMR@EMC3"
                offset="[11:10]"/>
      </register>
      <register description="Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting."
                format="hex0x"
                id="CTIMER0@CTCR"
                offset="0x70"
                size="4">
         <field description="Counter/Timer Mode This field selects which rising APB bus clock edges can increment Timer's Prescale Counter (PC), or clear PC and increment Timer Counter (TC). Timer Mode: the TC is incremented when the Prescale Counter matches the Prescale Register."
                format="enum"
                enum="d1e41846"
                id="CTIMER0@CTCR@CTMODE"
                offset="[1:0]"/>
         <field description="Count Input Select When bits 1:0 in this register are not 00, these bits select which CAP pin is sampled for clocking. Note: If Counter mode is selected for a particular CAPn input in the CTCR, the 3 bits for that input in the Capture Control Register (CCR) must be programmed as 000. However, capture and/or interrupt can be selected for the other 3 CAPn inputs in the same timer."
                format="enum"
                enum="d1e41916"
                id="CTIMER0@CTCR@CINSEL"
                offset="[3:2]"/>
         <field description="Setting this bit to 1 enables clearing of the timer and the prescaler when the capture-edge event specified in bits 7:5 occurs."
                format="hex0x"
                id="CTIMER0@CTCR@ENCC"
                offset="[4]"/>
         <field description="Edge select. When bit 4 is 1, these bits select which capture input edge will cause the timer and prescaler to be cleared. These bits have no effect when bit 4 is low. Values 0x2 to 0x3 and 0x6 to 0x7 are reserved."
                format="enum"
                enum="d1e42004"
                id="CTIMER0@CTCR@SELCC"
                offset="[7:5]"/>
      </register>
      <register description="PWM Control Register. The PWMCON enables PWM mode for the external match pins."
                format="hex0x"
                id="CTIMER0@PWMC"
                offset="0x74"
                size="4">
         <field description="PWM mode enable for channel0." format="enum" enum="d1e42128"
                id="CTIMER0@PWMC@PWMEN0"
                offset="[0]"/>
         <field description="PWM mode enable for channel1." format="enum" enum="d1e42174"
                id="CTIMER0@PWMC@PWMEN1"
                offset="[1]"/>
         <field description="PWM mode enable for channel2." format="enum" enum="d1e42220"
                id="CTIMER0@PWMC@PWMEN2"
                offset="[2]"/>
         <field description="PWM mode enable for channel3. Note: It is recommended to use match channel 3 to set the PWM cycle."
                format="enum"
                enum="d1e42266"
                id="CTIMER0@PWMC@PWMEN3"
                offset="[3]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Standard counter/timers (CTIMER0 to 4)"
               id="CTIMER3"
               size="0x78">
      <register description="Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending."
                format="hex0x"
                id="CTIMER0@IR"
                offset="0x0"
                size="4">
         <field description="Interrupt flag for match channel 0." format="hex0x"
                id="CTIMER0@IR@MR0INT"
                offset="[0]"/>
         <field description="Interrupt flag for match channel 1." format="hex0x"
                id="CTIMER0@IR@MR1INT"
                offset="[1]"/>
         <field description="Interrupt flag for match channel 2." format="hex0x"
                id="CTIMER0@IR@MR2INT"
                offset="[2]"/>
         <field description="Interrupt flag for match channel 3." format="hex0x"
                id="CTIMER0@IR@MR3INT"
                offset="[3]"/>
         <field description="Interrupt flag for capture channel 0 event." format="hex0x"
                id="CTIMER0@IR@CR0INT"
                offset="[4]"/>
         <field description="Interrupt flag for capture channel 1 event." format="hex0x"
                id="CTIMER0@IR@CR1INT"
                offset="[5]"/>
         <field description="Interrupt flag for capture channel 2 event." format="hex0x"
                id="CTIMER0@IR@CR2INT"
                offset="[6]"/>
         <field description="Interrupt flag for capture channel 3 event." format="hex0x"
                id="CTIMER0@IR@CR3INT"
                offset="[7]"/>
      </register>
      <register description="Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR."
                format="hex0x"
                id="CTIMER0@TCR"
                offset="0x4"
                size="4">
         <field description="Counter enable." format="enum" enum="d1e40610"
                id="CTIMER0@TCR@CEN"
                offset="[0]"/>
         <field description="Counter reset." format="enum" enum="d1e40656"
                id="CTIMER0@TCR@CRST"
                offset="[1]"/>
      </register>
      <register description="Timer Counter. The 32 bit TC is incremented every PR+1 cycles of the APB bus clock. The TC is controlled through the TCR."
                format="hex0x"
                id="CTIMER0@TC"
                offset="0x8"
                size="4">
         <field description="Timer counter value." format="hex0x" id="CTIMER0@TC@TCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Register. When the Prescale Counter (PC) is equal to this value, the next clock increments the TC and clears the PC."
                format="hex0x"
                id="CTIMER0@PR"
                offset="0xc"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PR@PRVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Counter. The 32 bit PC is a counter which is incremented to the value stored in PR. When the value in PR is reached, the TC is incremented and the PC is cleared. The PC is observable and controllable through the bus interface."
                format="hex0x"
                id="CTIMER0@PC"
                offset="0x10"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PC@PCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Match Control Register. The MCR is used to control if an interrupt is generated and if the TC is reset when a Match occurs."
                format="hex0x"
                id="CTIMER0@MCR"
                offset="0x14"
                size="4">
         <field description="Interrupt on MR0: an interrupt is generated when MR0 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0I"
                offset="[0]"/>
         <field description="Reset on MR0: the TC will be reset if MR0 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0R"
                offset="[1]"/>
         <field description="Stop on MR0: the TC and PC will be stopped and TCR[0] will be set to 0 if MR0 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0S"
                offset="[2]"/>
         <field description="Interrupt on MR1: an interrupt is generated when MR1 matches the value in the TC. 0 = disabled. 1 = enabled. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1I"
                offset="[3]"/>
         <field description="Reset on MR1: the TC will be reset if MR1 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1R"
                offset="[4]"/>
         <field description="Stop on MR1: the TC and PC will be stopped and TCR[0] will be set to 0 if MR1 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1S"
                offset="[5]"/>
         <field description="Interrupt on MR2: an interrupt is generated when MR2 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2I"
                offset="[6]"/>
         <field description="Reset on MR2: the TC will be reset if MR2 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2R"
                offset="[7]"/>
         <field description="Stop on MR2: the TC and PC will be stopped and TCR[0] will be set to 0 if MR2 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2S"
                offset="[8]"/>
         <field description="Interrupt on MR3: an interrupt is generated when MR3 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3I"
                offset="[9]"/>
         <field description="Reset on MR3: the TC will be reset if MR3 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3R"
                offset="[10]"/>
         <field description="Stop on MR3: the TC and PC will be stopped and TCR[0] will be set to 0 if MR3 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3S"
                offset="[11]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR0"
                offset="0x18"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR0@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR1"
                offset="0x1c"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR1@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR2"
                offset="0x20"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR2@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR3"
                offset="0x24"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR3@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place."
                format="hex0x"
                id="CTIMER0@CCR"
                offset="0x28"
                size="4">
         <field description="Rising edge of capture channel 0: a sequence of 0 then 1 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0RE"
                offset="[0]"/>
         <field description="Falling edge of capture channel 0: a sequence of 1 then 0 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0FE"
                offset="[1]"/>
         <field description="Generate interrupt on channel 0 capture event: a CR0 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP0I"
                offset="[2]"/>
         <field description="Rising edge of capture channel 1: a sequence of 0 then 1 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1RE"
                offset="[3]"/>
         <field description="Falling edge of capture channel 1: a sequence of 1 then 0 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1FE"
                offset="[4]"/>
         <field description="Generate interrupt on channel 1 capture event: a CR1 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP1I"
                offset="[5]"/>
         <field description="Rising edge of capture channel 2: a sequence of 0 then 1 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2RE"
                offset="[6]"/>
         <field description="Falling edge of capture channel 2: a sequence of 1 then 0 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2FE"
                offset="[7]"/>
         <field description="Generate interrupt on channel 2 capture event: a CR2 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP2I"
                offset="[8]"/>
         <field description="Rising edge of capture channel 3: a sequence of 0 then 1 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3RE"
                offset="[9]"/>
         <field description="Falling edge of capture channel 3: a sequence of 1 then 0 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3FE"
                offset="[10]"/>
         <field description="Generate interrupt on channel 3 capture event: a CR3 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP3I"
                offset="[11]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR0"
                offset="0x2c"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR0@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR1"
                offset="0x30"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR1@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR2"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR2@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR3"
                offset="0x38"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR3@CAP"
                offset="[31:0]"/>
      </register>
      <register description="External Match Register. The EMR controls the match function and the external match pins."
                format="hex0x"
                id="CTIMER0@EMR"
                offset="0x3c"
                size="4">
         <field description="External Match 0. This bit reflects the state of output MAT0, whether or not this output is connected to a pin. When a match occurs between the TC and MR0, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[5:4]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM0"
                offset="[0]"/>
         <field description="External Match 1. This bit reflects the state of output MAT1, whether or not this output is connected to a pin. When a match occurs between the TC and MR1, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[7:6]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM1"
                offset="[1]"/>
         <field description="External Match 2. This bit reflects the state of output MAT2, whether or not this output is connected to a pin. When a match occurs between the TC and MR2, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[9:8]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM2"
                offset="[2]"/>
         <field description="External Match 3. This bit reflects the state of output MAT3, whether or not this output is connected to a pin. When a match occurs between the TC and MR3, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by MR[11:10]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM3"
                offset="[3]"/>
         <field description="External Match Control 0. Determines the functionality of External Match 0."
                format="enum"
                enum="d1e41537"
                id="CTIMER0@EMR@EMC0"
                offset="[5:4]"/>
         <field description="External Match Control 1. Determines the functionality of External Match 1."
                format="enum"
                enum="d1e41608"
                id="CTIMER0@EMR@EMC1"
                offset="[7:6]"/>
         <field description="External Match Control 2. Determines the functionality of External Match 2."
                format="enum"
                enum="d1e41678"
                id="CTIMER0@EMR@EMC2"
                offset="[9:8]"/>
         <field description="External Match Control 3. Determines the functionality of External Match 3."
                format="enum"
                enum="d1e41748"
                id="CTIMER0@EMR@EMC3"
                offset="[11:10]"/>
      </register>
      <register description="Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting."
                format="hex0x"
                id="CTIMER0@CTCR"
                offset="0x70"
                size="4">
         <field description="Counter/Timer Mode This field selects which rising APB bus clock edges can increment Timer's Prescale Counter (PC), or clear PC and increment Timer Counter (TC). Timer Mode: the TC is incremented when the Prescale Counter matches the Prescale Register."
                format="enum"
                enum="d1e41846"
                id="CTIMER0@CTCR@CTMODE"
                offset="[1:0]"/>
         <field description="Count Input Select When bits 1:0 in this register are not 00, these bits select which CAP pin is sampled for clocking. Note: If Counter mode is selected for a particular CAPn input in the CTCR, the 3 bits for that input in the Capture Control Register (CCR) must be programmed as 000. However, capture and/or interrupt can be selected for the other 3 CAPn inputs in the same timer."
                format="enum"
                enum="d1e41916"
                id="CTIMER0@CTCR@CINSEL"
                offset="[3:2]"/>
         <field description="Setting this bit to 1 enables clearing of the timer and the prescaler when the capture-edge event specified in bits 7:5 occurs."
                format="hex0x"
                id="CTIMER0@CTCR@ENCC"
                offset="[4]"/>
         <field description="Edge select. When bit 4 is 1, these bits select which capture input edge will cause the timer and prescaler to be cleared. These bits have no effect when bit 4 is low. Values 0x2 to 0x3 and 0x6 to 0x7 are reserved."
                format="enum"
                enum="d1e42004"
                id="CTIMER0@CTCR@SELCC"
                offset="[7:5]"/>
      </register>
      <register description="PWM Control Register. The PWMCON enables PWM mode for the external match pins."
                format="hex0x"
                id="CTIMER0@PWMC"
                offset="0x74"
                size="4">
         <field description="PWM mode enable for channel0." format="enum" enum="d1e42128"
                id="CTIMER0@PWMC@PWMEN0"
                offset="[0]"/>
         <field description="PWM mode enable for channel1." format="enum" enum="d1e42174"
                id="CTIMER0@PWMC@PWMEN1"
                offset="[1]"/>
         <field description="PWM mode enable for channel2." format="enum" enum="d1e42220"
                id="CTIMER0@PWMC@PWMEN2"
                offset="[2]"/>
         <field description="PWM mode enable for channel3. Note: It is recommended to use match channel 3 to set the PWM cycle."
                format="enum"
                enum="d1e42266"
                id="CTIMER0@PWMC@PWMEN3"
                offset="[3]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Standard counter/timers (CTIMER0 to 4)"
               id="CTIMER4"
               size="0x78">
      <register description="Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending."
                format="hex0x"
                id="CTIMER0@IR"
                offset="0x0"
                size="4">
         <field description="Interrupt flag for match channel 0." format="hex0x"
                id="CTIMER0@IR@MR0INT"
                offset="[0]"/>
         <field description="Interrupt flag for match channel 1." format="hex0x"
                id="CTIMER0@IR@MR1INT"
                offset="[1]"/>
         <field description="Interrupt flag for match channel 2." format="hex0x"
                id="CTIMER0@IR@MR2INT"
                offset="[2]"/>
         <field description="Interrupt flag for match channel 3." format="hex0x"
                id="CTIMER0@IR@MR3INT"
                offset="[3]"/>
         <field description="Interrupt flag for capture channel 0 event." format="hex0x"
                id="CTIMER0@IR@CR0INT"
                offset="[4]"/>
         <field description="Interrupt flag for capture channel 1 event." format="hex0x"
                id="CTIMER0@IR@CR1INT"
                offset="[5]"/>
         <field description="Interrupt flag for capture channel 2 event." format="hex0x"
                id="CTIMER0@IR@CR2INT"
                offset="[6]"/>
         <field description="Interrupt flag for capture channel 3 event." format="hex0x"
                id="CTIMER0@IR@CR3INT"
                offset="[7]"/>
      </register>
      <register description="Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR."
                format="hex0x"
                id="CTIMER0@TCR"
                offset="0x4"
                size="4">
         <field description="Counter enable." format="enum" enum="d1e40610"
                id="CTIMER0@TCR@CEN"
                offset="[0]"/>
         <field description="Counter reset." format="enum" enum="d1e40656"
                id="CTIMER0@TCR@CRST"
                offset="[1]"/>
      </register>
      <register description="Timer Counter. The 32 bit TC is incremented every PR+1 cycles of the APB bus clock. The TC is controlled through the TCR."
                format="hex0x"
                id="CTIMER0@TC"
                offset="0x8"
                size="4">
         <field description="Timer counter value." format="hex0x" id="CTIMER0@TC@TCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Register. When the Prescale Counter (PC) is equal to this value, the next clock increments the TC and clears the PC."
                format="hex0x"
                id="CTIMER0@PR"
                offset="0xc"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PR@PRVAL"
                offset="[31:0]"/>
      </register>
      <register description="Prescale Counter. The 32 bit PC is a counter which is incremented to the value stored in PR. When the value in PR is reached, the TC is incremented and the PC is cleared. The PC is observable and controllable through the bus interface."
                format="hex0x"
                id="CTIMER0@PC"
                offset="0x10"
                size="4">
         <field description="Prescale counter value." format="hex0x" id="CTIMER0@PC@PCVAL"
                offset="[31:0]"/>
      </register>
      <register description="Match Control Register. The MCR is used to control if an interrupt is generated and if the TC is reset when a Match occurs."
                format="hex0x"
                id="CTIMER0@MCR"
                offset="0x14"
                size="4">
         <field description="Interrupt on MR0: an interrupt is generated when MR0 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0I"
                offset="[0]"/>
         <field description="Reset on MR0: the TC will be reset if MR0 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0R"
                offset="[1]"/>
         <field description="Stop on MR0: the TC and PC will be stopped and TCR[0] will be set to 0 if MR0 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR0S"
                offset="[2]"/>
         <field description="Interrupt on MR1: an interrupt is generated when MR1 matches the value in the TC. 0 = disabled. 1 = enabled. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1I"
                offset="[3]"/>
         <field description="Reset on MR1: the TC will be reset if MR1 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1R"
                offset="[4]"/>
         <field description="Stop on MR1: the TC and PC will be stopped and TCR[0] will be set to 0 if MR1 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR1S"
                offset="[5]"/>
         <field description="Interrupt on MR2: an interrupt is generated when MR2 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2I"
                offset="[6]"/>
         <field description="Reset on MR2: the TC will be reset if MR2 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2R"
                offset="[7]"/>
         <field description="Stop on MR2: the TC and PC will be stopped and TCR[0] will be set to 0 if MR2 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR2S"
                offset="[8]"/>
         <field description="Interrupt on MR3: an interrupt is generated when MR3 matches the value in the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3I"
                offset="[9]"/>
         <field description="Reset on MR3: the TC will be reset if MR3 matches it. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3R"
                offset="[10]"/>
         <field description="Stop on MR3: the TC and PC will be stopped and TCR[0] will be set to 0 if MR3 matches the TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@MCR@MR3S"
                offset="[11]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR0"
                offset="0x18"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR0@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR1"
                offset="0x1c"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR1@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR2"
                offset="0x20"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR2@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Match Register . MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC."
                format="hex0x"
                id="CTIMER0@MR3"
                offset="0x24"
                size="4">
         <field description="Timer counter match value." format="hex0x" id="CTIMER0@MR3@MATCH"
                offset="[31:0]"/>
      </register>
      <register description="Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place."
                format="hex0x"
                id="CTIMER0@CCR"
                offset="0x28"
                size="4">
         <field description="Rising edge of capture channel 0: a sequence of 0 then 1 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0RE"
                offset="[0]"/>
         <field description="Falling edge of capture channel 0: a sequence of 1 then 0 causes CR0 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP0FE"
                offset="[1]"/>
         <field description="Generate interrupt on channel 0 capture event: a CR0 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP0I"
                offset="[2]"/>
         <field description="Rising edge of capture channel 1: a sequence of 0 then 1 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1RE"
                offset="[3]"/>
         <field description="Falling edge of capture channel 1: a sequence of 1 then 0 causes CR1 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP1FE"
                offset="[4]"/>
         <field description="Generate interrupt on channel 1 capture event: a CR1 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP1I"
                offset="[5]"/>
         <field description="Rising edge of capture channel 2: a sequence of 0 then 1 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2RE"
                offset="[6]"/>
         <field description="Falling edge of capture channel 2: a sequence of 1 then 0 causes CR2 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP2FE"
                offset="[7]"/>
         <field description="Generate interrupt on channel 2 capture event: a CR2 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP2I"
                offset="[8]"/>
         <field description="Rising edge of capture channel 3: a sequence of 0 then 1 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3RE"
                offset="[9]"/>
         <field description="Falling edge of capture channel 3: a sequence of 1 then 0 causes CR3 to be loaded with the contents of TC. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="CTIMER0@CCR@CAP3FE"
                offset="[10]"/>
         <field description="Generate interrupt on channel 3 capture event: a CR3 load generates an interrupt."
                format="hex0x"
                id="CTIMER0@CCR@CAP3I"
                offset="[11]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR0"
                offset="0x2c"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR0@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR1"
                offset="0x30"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR1@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR2"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR2@CAP"
                offset="[31:0]"/>
      </register>
      <register description="Capture Register . CR is loaded with the value of TC when there is an event on the CAPn. input."
                format="hex0x"
                id="CTIMER0@CR3"
                offset="0x38"
                readOnly="true"
                size="4">
         <field description="Timer counter capture value." format="hex0x" id="CTIMER0@CR3@CAP"
                offset="[31:0]"/>
      </register>
      <register description="External Match Register. The EMR controls the match function and the external match pins."
                format="hex0x"
                id="CTIMER0@EMR"
                offset="0x3c"
                size="4">
         <field description="External Match 0. This bit reflects the state of output MAT0, whether or not this output is connected to a pin. When a match occurs between the TC and MR0, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[5:4]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM0"
                offset="[0]"/>
         <field description="External Match 1. This bit reflects the state of output MAT1, whether or not this output is connected to a pin. When a match occurs between the TC and MR1, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[7:6]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM1"
                offset="[1]"/>
         <field description="External Match 2. This bit reflects the state of output MAT2, whether or not this output is connected to a pin. When a match occurs between the TC and MR2, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by EMR[9:8]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM2"
                offset="[2]"/>
         <field description="External Match 3. This bit reflects the state of output MAT3, whether or not this output is connected to a pin. When a match occurs between the TC and MR3, this bit can either toggle, go LOW, go HIGH, or do nothing, as selected by MR[11:10]. This bit is driven to the MAT pins if the match function is selected via IOCON. 0 = LOW. 1 = HIGH."
                format="hex0x"
                id="CTIMER0@EMR@EM3"
                offset="[3]"/>
         <field description="External Match Control 0. Determines the functionality of External Match 0."
                format="enum"
                enum="d1e41537"
                id="CTIMER0@EMR@EMC0"
                offset="[5:4]"/>
         <field description="External Match Control 1. Determines the functionality of External Match 1."
                format="enum"
                enum="d1e41608"
                id="CTIMER0@EMR@EMC1"
                offset="[7:6]"/>
         <field description="External Match Control 2. Determines the functionality of External Match 2."
                format="enum"
                enum="d1e41678"
                id="CTIMER0@EMR@EMC2"
                offset="[9:8]"/>
         <field description="External Match Control 3. Determines the functionality of External Match 3."
                format="enum"
                enum="d1e41748"
                id="CTIMER0@EMR@EMC3"
                offset="[11:10]"/>
      </register>
      <register description="Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting."
                format="hex0x"
                id="CTIMER0@CTCR"
                offset="0x70"
                size="4">
         <field description="Counter/Timer Mode This field selects which rising APB bus clock edges can increment Timer's Prescale Counter (PC), or clear PC and increment Timer Counter (TC). Timer Mode: the TC is incremented when the Prescale Counter matches the Prescale Register."
                format="enum"
                enum="d1e41846"
                id="CTIMER0@CTCR@CTMODE"
                offset="[1:0]"/>
         <field description="Count Input Select When bits 1:0 in this register are not 00, these bits select which CAP pin is sampled for clocking. Note: If Counter mode is selected for a particular CAPn input in the CTCR, the 3 bits for that input in the Capture Control Register (CCR) must be programmed as 000. However, capture and/or interrupt can be selected for the other 3 CAPn inputs in the same timer."
                format="enum"
                enum="d1e41916"
                id="CTIMER0@CTCR@CINSEL"
                offset="[3:2]"/>
         <field description="Setting this bit to 1 enables clearing of the timer and the prescaler when the capture-edge event specified in bits 7:5 occurs."
                format="hex0x"
                id="CTIMER0@CTCR@ENCC"
                offset="[4]"/>
         <field description="Edge select. When bit 4 is 1, these bits select which capture input edge will cause the timer and prescaler to be cleared. These bits have no effect when bit 4 is low. Values 0x2 to 0x3 and 0x6 to 0x7 are reserved."
                format="enum"
                enum="d1e42004"
                id="CTIMER0@CTCR@SELCC"
                offset="[7:5]"/>
      </register>
      <register description="PWM Control Register. The PWMCON enables PWM mode for the external match pins."
                format="hex0x"
                id="CTIMER0@PWMC"
                offset="0x74"
                size="4">
         <field description="PWM mode enable for channel0." format="enum" enum="d1e42128"
                id="CTIMER0@PWMC@PWMEN0"
                offset="[0]"/>
         <field description="PWM mode enable for channel1." format="enum" enum="d1e42174"
                id="CTIMER0@PWMC@PWMEN1"
                offset="[1]"/>
         <field description="PWM mode enable for channel2." format="enum" enum="d1e42220"
                id="CTIMER0@PWMC@PWMEN2"
                offset="[2]"/>
         <field description="PWM mode enable for channel3. Note: It is recommended to use match channel 3 to set the PWM cycle."
                format="enum"
                enum="d1e42266"
                id="CTIMER0@PWMC@PWMEN3"
                offset="[3]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Windowed Watchdog Timer (WWDT)" id="WWDT"
               size="0x1c">
      <register description="Watchdog mode register. This register contains the basic mode and status of the Watchdog Timer."
                format="hex0x"
                id="WWDT@MOD"
                offset="0x0"
                size="4">
         <field description="Watchdog enable bit. Once this bit is set to one and a watchdog feed is performed, the watchdog timer will run permanently."
                format="enum"
                enum="d1e42509"
                id="WWDT@MOD@WDEN"
                offset="[0]"/>
         <field description="Watchdog reset enable bit. Once this bit has been written with a 1 it cannot be re-written with a 0."
                format="enum"
                enum="d1e42555"
                id="WWDT@MOD@WDRESET"
                offset="[1]"/>
         <field description="Watchdog time-out flag. Set when the watchdog timer times out, by a feed error, or by events associated with WDPROTECT. Cleared by software writing a 0 to this bit position. Causes a chip reset if WDRESET = 1."
                format="hex0x"
                id="WWDT@MOD@WDTOF"
                offset="[2]"/>
         <field description="Warning interrupt flag. Set when the timer is at or below the value in WDWARNINT. Cleared by software writing a 1 to this bit position. Note that this bit cannot be cleared while the WARNINT value is equal to the value of the TV register. This can occur if the value of WARNINT is 0 and the WDRESET bit is 0 when TV decrements to 0."
                format="hex0x"
                id="WWDT@MOD@WDINT"
                offset="[3]"/>
         <field description="Watchdog update mode. This bit can be set once by software and is only cleared by a reset."
                format="enum"
                enum="d1e42637"
                id="WWDT@MOD@WDPROTECT"
                offset="[4]"/>
         <field description="Once this bit is set to one and a watchdog feed is performed, disabling or powering down the watchdog oscillator is prevented by hardware. This bit can be set once by software and is only cleared by any reset."
                format="hex0x"
                id="WWDT@MOD@LOCK"
                offset="[5]"/>
      </register>
      <register description="Watchdog timer constant register. This 24-bit register determines the time-out value."
                format="hex0x"
                id="WWDT@TC"
                offset="0x4"
                size="4">
         <field description="Watchdog time-out value." format="hex0x" id="WWDT@TC@COUNT"
                offset="[23:0]"/>
      </register>
      <register description="Watchdog feed sequence register. Writing 0xAA followed by 0x55 to this register reloads the Watchdog timer with the value contained in TC."
                format="hex0x"
                id="WWDT@FEED"
                offset="0x8"
                writeOnly="true"
                size="4">
         <field description="Feed value should be 0xAA followed by 0x55." format="hex0x"
                id="WWDT@FEED@FEED"
                offset="[7:0]"/>
      </register>
      <register description="Watchdog timer value register. This 24-bit register reads out the current value of the Watchdog timer."
                format="hex0x"
                id="WWDT@TV"
                offset="0xc"
                readOnly="true"
                size="4">
         <field description="Counter timer value." format="hex0x" id="WWDT@TV@COUNT"
                offset="[23:0]"/>
      </register>
      <register description="Watchdog Warning Interrupt compare value." format="hex0x"
                id="WWDT@WARNINT"
                offset="0x14"
                size="4">
         <field description="Watchdog warning interrupt compare value." format="hex0x"
                id="WWDT@WARNINT@WARNINT"
                offset="[9:0]"/>
      </register>
      <register description="Watchdog Window compare value." format="hex0x" id="WWDT@WINDOW"
                offset="0x18"
                size="4">
         <field description="Watchdog window value." format="hex0x" id="WWDT@WINDOW@WINDOW"
                offset="[23:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Multi-Rate Timer (MRT)" id="MRT0"
               size="0xfc">
      <register description="MRT Time interval value register. This value is loaded into the TIMER register."
                format="hex0x"
                id="MRT0@CHANNEL0-INTVAL"
                offset="0x0"
                size="4">
         <field description="Time interval load value. This value is loaded into the TIMERn register and the MRT channel n starts counting down from IVALUE -1. If the timer is idle, writing a non-zero value to this bit field starts the timer immediately. If the timer is running, writing a zero to this bit field does the following: If LOAD = 1, the timer stops immediately. If LOAD = 0, the timer stops at the end of the time interval."
                format="hex0x"
                id="MRT0@CHANNEL0-INTVAL@IVALUE"
                offset="[23:0]"/>
         <field description="Determines how the timer interval value IVALUE -1 is loaded into the TIMERn register. This bit is write-only. Reading this bit always returns 0."
                format="enum"
                enum="d1e43037"
                id="MRT0@CHANNEL0-INTVAL@LOAD"
                offset="[31]"/>
      </register>
      <register description="MRT Timer register. This register reads the value of the down-counter."
                format="hex0x"
                id="MRT0@CHANNEL0-TIMER"
                offset="0x4"
                readOnly="true"
                size="4">
         <field description="Holds the current timer value of the down-counter. The initial value of the TIMERn register is loaded as IVALUE - 1 from the INTVALn register either at the end of the time interval or immediately in the following cases: INTVALn register is updated in the idle state. INTVALn register is updated with LOAD = 1. When the timer is in idle state, reading this bit fields returns -1 (0x00FF FFFF)."
                format="hex0x"
                id="MRT0@CHANNEL0-TIMER@VALUE"
                offset="[23:0]"/>
      </register>
      <register description="MRT Control register. This register controls the MRT modes."
                format="hex0x"
                id="MRT0@CHANNEL0-CTRL"
                offset="0x8"
                size="4">
         <field description="Enable the TIMERn interrupt." format="enum" enum="d1e43157"
                id="MRT0@CHANNEL0-CTRL@INTEN"
                offset="[0]"/>
         <field description="Selects timer mode." format="enum" enum="d1e43203"
                id="MRT0@CHANNEL0-CTRL@MODE"
                offset="[2:1]"/>
      </register>
      <register description="MRT Status register." format="hex0x" id="MRT0@CHANNEL0-STAT"
                offset="0xc"
                size="4">
         <field description="Monitors the interrupt flag." format="enum" enum="d1e43289"
                id="MRT0@CHANNEL0-STAT@INTFLAG"
                offset="[0]"/>
         <field description="Indicates the state of TIMERn. This bit is read-only."
                format="enum"
                enum="d1e43335"
                id="MRT0@CHANNEL0-STAT@RUN"
                offset="[1]"/>
         <field description="Channel In Use flag. Operating details depend on the MULTITASK bit in the MODCFG register, and affects the use of IDLE_CH. See Idle channel register for details of the two operating modes."
                format="enum"
                enum="d1e43381"
                id="MRT0@CHANNEL0-STAT@INUSE"
                offset="[2]"/>
      </register>
      <register description="MRT Time interval value register. This value is loaded into the TIMER register."
                format="hex0x"
                id="MRT0@CHANNEL1-INTVAL"
                offset="0x10"
                size="4">
         <field description="Time interval load value. This value is loaded into the TIMERn register and the MRT channel n starts counting down from IVALUE -1. If the timer is idle, writing a non-zero value to this bit field starts the timer immediately. If the timer is running, writing a zero to this bit field does the following: If LOAD = 1, the timer stops immediately. If LOAD = 0, the timer stops at the end of the time interval."
                format="hex0x"
                id="MRT0@CHANNEL1-INTVAL@IVALUE"
                offset="[23:0]"/>
         <field description="Determines how the timer interval value IVALUE -1 is loaded into the TIMERn register. This bit is write-only. Reading this bit always returns 0."
                format="enum"
                enum="d1e43037"
                id="MRT0@CHANNEL1-INTVAL@LOAD"
                offset="[31]"/>
      </register>
      <register description="MRT Timer register. This register reads the value of the down-counter."
                format="hex0x"
                id="MRT0@CHANNEL1-TIMER"
                offset="0x14"
                readOnly="true"
                size="4">
         <field description="Holds the current timer value of the down-counter. The initial value of the TIMERn register is loaded as IVALUE - 1 from the INTVALn register either at the end of the time interval or immediately in the following cases: INTVALn register is updated in the idle state. INTVALn register is updated with LOAD = 1. When the timer is in idle state, reading this bit fields returns -1 (0x00FF FFFF)."
                format="hex0x"
                id="MRT0@CHANNEL1-TIMER@VALUE"
                offset="[23:0]"/>
      </register>
      <register description="MRT Control register. This register controls the MRT modes."
                format="hex0x"
                id="MRT0@CHANNEL1-CTRL"
                offset="0x18"
                size="4">
         <field description="Enable the TIMERn interrupt." format="enum" enum="d1e43157"
                id="MRT0@CHANNEL1-CTRL@INTEN"
                offset="[0]"/>
         <field description="Selects timer mode." format="enum" enum="d1e43203"
                id="MRT0@CHANNEL1-CTRL@MODE"
                offset="[2:1]"/>
      </register>
      <register description="MRT Status register." format="hex0x" id="MRT0@CHANNEL1-STAT"
                offset="0x1c"
                size="4">
         <field description="Monitors the interrupt flag." format="enum" enum="d1e43289"
                id="MRT0@CHANNEL1-STAT@INTFLAG"
                offset="[0]"/>
         <field description="Indicates the state of TIMERn. This bit is read-only."
                format="enum"
                enum="d1e43335"
                id="MRT0@CHANNEL1-STAT@RUN"
                offset="[1]"/>
         <field description="Channel In Use flag. Operating details depend on the MULTITASK bit in the MODCFG register, and affects the use of IDLE_CH. See Idle channel register for details of the two operating modes."
                format="enum"
                enum="d1e43381"
                id="MRT0@CHANNEL1-STAT@INUSE"
                offset="[2]"/>
      </register>
      <register description="MRT Time interval value register. This value is loaded into the TIMER register."
                format="hex0x"
                id="MRT0@CHANNEL2-INTVAL"
                offset="0x20"
                size="4">
         <field description="Time interval load value. This value is loaded into the TIMERn register and the MRT channel n starts counting down from IVALUE -1. If the timer is idle, writing a non-zero value to this bit field starts the timer immediately. If the timer is running, writing a zero to this bit field does the following: If LOAD = 1, the timer stops immediately. If LOAD = 0, the timer stops at the end of the time interval."
                format="hex0x"
                id="MRT0@CHANNEL2-INTVAL@IVALUE"
                offset="[23:0]"/>
         <field description="Determines how the timer interval value IVALUE -1 is loaded into the TIMERn register. This bit is write-only. Reading this bit always returns 0."
                format="enum"
                enum="d1e43037"
                id="MRT0@CHANNEL2-INTVAL@LOAD"
                offset="[31]"/>
      </register>
      <register description="MRT Timer register. This register reads the value of the down-counter."
                format="hex0x"
                id="MRT0@CHANNEL2-TIMER"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Holds the current timer value of the down-counter. The initial value of the TIMERn register is loaded as IVALUE - 1 from the INTVALn register either at the end of the time interval or immediately in the following cases: INTVALn register is updated in the idle state. INTVALn register is updated with LOAD = 1. When the timer is in idle state, reading this bit fields returns -1 (0x00FF FFFF)."
                format="hex0x"
                id="MRT0@CHANNEL2-TIMER@VALUE"
                offset="[23:0]"/>
      </register>
      <register description="MRT Control register. This register controls the MRT modes."
                format="hex0x"
                id="MRT0@CHANNEL2-CTRL"
                offset="0x28"
                size="4">
         <field description="Enable the TIMERn interrupt." format="enum" enum="d1e43157"
                id="MRT0@CHANNEL2-CTRL@INTEN"
                offset="[0]"/>
         <field description="Selects timer mode." format="enum" enum="d1e43203"
                id="MRT0@CHANNEL2-CTRL@MODE"
                offset="[2:1]"/>
      </register>
      <register description="MRT Status register." format="hex0x" id="MRT0@CHANNEL2-STAT"
                offset="0x2c"
                size="4">
         <field description="Monitors the interrupt flag." format="enum" enum="d1e43289"
                id="MRT0@CHANNEL2-STAT@INTFLAG"
                offset="[0]"/>
         <field description="Indicates the state of TIMERn. This bit is read-only."
                format="enum"
                enum="d1e43335"
                id="MRT0@CHANNEL2-STAT@RUN"
                offset="[1]"/>
         <field description="Channel In Use flag. Operating details depend on the MULTITASK bit in the MODCFG register, and affects the use of IDLE_CH. See Idle channel register for details of the two operating modes."
                format="enum"
                enum="d1e43381"
                id="MRT0@CHANNEL2-STAT@INUSE"
                offset="[2]"/>
      </register>
      <register description="MRT Time interval value register. This value is loaded into the TIMER register."
                format="hex0x"
                id="MRT0@CHANNEL3-INTVAL"
                offset="0x30"
                size="4">
         <field description="Time interval load value. This value is loaded into the TIMERn register and the MRT channel n starts counting down from IVALUE -1. If the timer is idle, writing a non-zero value to this bit field starts the timer immediately. If the timer is running, writing a zero to this bit field does the following: If LOAD = 1, the timer stops immediately. If LOAD = 0, the timer stops at the end of the time interval."
                format="hex0x"
                id="MRT0@CHANNEL3-INTVAL@IVALUE"
                offset="[23:0]"/>
         <field description="Determines how the timer interval value IVALUE -1 is loaded into the TIMERn register. This bit is write-only. Reading this bit always returns 0."
                format="enum"
                enum="d1e43037"
                id="MRT0@CHANNEL3-INTVAL@LOAD"
                offset="[31]"/>
      </register>
      <register description="MRT Timer register. This register reads the value of the down-counter."
                format="hex0x"
                id="MRT0@CHANNEL3-TIMER"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="Holds the current timer value of the down-counter. The initial value of the TIMERn register is loaded as IVALUE - 1 from the INTVALn register either at the end of the time interval or immediately in the following cases: INTVALn register is updated in the idle state. INTVALn register is updated with LOAD = 1. When the timer is in idle state, reading this bit fields returns -1 (0x00FF FFFF)."
                format="hex0x"
                id="MRT0@CHANNEL3-TIMER@VALUE"
                offset="[23:0]"/>
      </register>
      <register description="MRT Control register. This register controls the MRT modes."
                format="hex0x"
                id="MRT0@CHANNEL3-CTRL"
                offset="0x38"
                size="4">
         <field description="Enable the TIMERn interrupt." format="enum" enum="d1e43157"
                id="MRT0@CHANNEL3-CTRL@INTEN"
                offset="[0]"/>
         <field description="Selects timer mode." format="enum" enum="d1e43203"
                id="MRT0@CHANNEL3-CTRL@MODE"
                offset="[2:1]"/>
      </register>
      <register description="MRT Status register." format="hex0x" id="MRT0@CHANNEL3-STAT"
                offset="0x3c"
                size="4">
         <field description="Monitors the interrupt flag." format="enum" enum="d1e43289"
                id="MRT0@CHANNEL3-STAT@INTFLAG"
                offset="[0]"/>
         <field description="Indicates the state of TIMERn. This bit is read-only."
                format="enum"
                enum="d1e43335"
                id="MRT0@CHANNEL3-STAT@RUN"
                offset="[1]"/>
         <field description="Channel In Use flag. Operating details depend on the MULTITASK bit in the MODCFG register, and affects the use of IDLE_CH. See Idle channel register for details of the two operating modes."
                format="enum"
                enum="d1e43381"
                id="MRT0@CHANNEL3-STAT@INUSE"
                offset="[2]"/>
      </register>
      <register description="Module Configuration register. This register provides information about this particular MRT instance, and allows choosing an overall mode for the idle channel feature."
                format="hex0x"
                id="MRT0@MODCFG"
                offset="0xf0"
                size="4">
         <field description="Identifies the number of channels in this MRT.(4 channels on this device.)"
                format="hex0x"
                id="MRT0@MODCFG@NOC"
                offset="[3:0]"/>
         <field description="Identifies the number of timer bits in this MRT. (24 bits wide on this device.)"
                format="hex0x"
                id="MRT0@MODCFG@NOB"
                offset="[8:4]"/>
         <field description="Selects the operating mode for the INUSE flags and the IDLE_CH register."
                format="enum"
                enum="d1e43492"
                id="MRT0@MODCFG@MULTITASK"
                offset="[31]"/>
      </register>
      <register description="Idle channel register. This register returns the number of the first idle channel."
                format="hex0x"
                id="MRT0@IDLE-CH"
                offset="0xf4"
                readOnly="true"
                size="4">
         <field description="Idle channel. Reading the CHAN bits, returns the lowest idle timer channel. The number is positioned such that it can be used as an offset from the MRT base address in order to access the registers for the allocated channel. If all timer channels are running, CHAN = 0xF. See text above for more details."
                format="hex0x"
                id="MRT0@IDLE-CH@CHAN"
                offset="[7:4]"/>
      </register>
      <register description="Global interrupt flag register" format="hex0x" id="MRT0@IRQ-FLAG"
                offset="0xf8"
                size="4">
         <field description="Monitors the interrupt flag of TIMER0." format="enum"
                enum="d1e43612"
                id="MRT0@IRQ-FLAG@GFLAG0"
                offset="[0]"/>
         <field description="Monitors the interrupt flag of TIMER1. See description of channel 0."
                format="hex0x"
                id="MRT0@IRQ-FLAG@GFLAG1"
                offset="[1]"/>
         <field description="Monitors the interrupt flag of TIMER2. See description of channel 0."
                format="hex0x"
                id="MRT0@IRQ-FLAG@GFLAG2"
                offset="[2]"/>
         <field description="Monitors the interrupt flag of TIMER3. See description of channel 0."
                format="hex0x"
                id="MRT0@IRQ-FLAG@GFLAG3"
                offset="[3]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Micro-tick Timer (UTICK)" id="UTICK0"
               size="0x20">
      <register description="Control register." format="hex0x" id="UTICK0@CTRL" offset="0x0"
                size="4">
         <field description="Tick interval value. The delay will be equal to DELAYVAL + 1 periods of the timer clock. The minimum usable value is 1, for a delay of 2 timer clocks. A value of 0 stops the timer."
                format="hex0x"
                id="UTICK0@CTRL@DELAYVAL"
                offset="[30:0]"/>
         <field description="Repeat delay. 0 = One-time delay. 1 = Delay repeats continuously."
                format="hex0x"
                id="UTICK0@CTRL@REPEAT"
                offset="[31]"/>
      </register>
      <register description="Status register." format="hex0x" id="UTICK0@STAT" offset="0x4"
                size="4">
         <field description="Interrupt flag. 0 = No interrupt is pending. 1 = An interrupt is pending. A write of any value to this register clears this flag."
                format="hex0x"
                id="UTICK0@STAT@INTR"
                offset="[0]"/>
         <field description="Active flag. 0 = The Micro-Tick Timer is stopped. 1 = The Micro-Tick Timer is currently active."
                format="hex0x"
                id="UTICK0@STAT@ACTIVE"
                offset="[1]"/>
      </register>
      <register description="Capture configuration register." format="hex0x" id="UTICK0@CFG"
                offset="0x8"
                size="4">
         <field description="Enable Capture 0. 1 = Enabled, 0 = Disabled." format="hex0x"
                id="UTICK0@CFG@CAPEN0"
                offset="[0]"/>
         <field description="Enable Capture 1. 1 = Enabled, 0 = Disabled." format="hex0x"
                id="UTICK0@CFG@CAPEN1"
                offset="[1]"/>
         <field description="Enable Capture 2. 1 = Enabled, 0 = Disabled." format="hex0x"
                id="UTICK0@CFG@CAPEN2"
                offset="[2]"/>
         <field description="Enable Capture 3. 1 = Enabled, 0 = Disabled." format="hex0x"
                id="UTICK0@CFG@CAPEN3"
                offset="[3]"/>
         <field description="Capture Polarity 0. 0 = Positive edge capture, 1 = Negative edge capture."
                format="hex0x"
                id="UTICK0@CFG@CAPPOL0"
                offset="[8]"/>
         <field description="Capture Polarity 1. 0 = Positive edge capture, 1 = Negative edge capture."
                format="hex0x"
                id="UTICK0@CFG@CAPPOL1"
                offset="[9]"/>
         <field description="Capture Polarity 2. 0 = Positive edge capture, 1 = Negative edge capture."
                format="hex0x"
                id="UTICK0@CFG@CAPPOL2"
                offset="[10]"/>
         <field description="Capture Polarity 3. 0 = Positive edge capture, 1 = Negative edge capture."
                format="hex0x"
                id="UTICK0@CFG@CAPPOL3"
                offset="[11]"/>
      </register>
      <register description="Capture clear register." format="hex0x" id="UTICK0@CAPCLR"
                offset="0xc"
                writeOnly="true"
                size="4">
         <field description="Clear capture 0. Writing 1 to this bit clears the CAP0 register value."
                format="hex0x"
                id="UTICK0@CAPCLR@CAPCLR0"
                offset="[0]"/>
         <field description="Clear capture 1. Writing 1 to this bit clears the CAP1 register value."
                format="hex0x"
                id="UTICK0@CAPCLR@CAPCLR1"
                offset="[1]"/>
         <field description="Clear capture 2. Writing 1 to this bit clears the CAP2 register value."
                format="hex0x"
                id="UTICK0@CAPCLR@CAPCLR2"
                offset="[2]"/>
         <field description="Clear capture 3. Writing 1 to this bit clears the CAP3 register value."
                format="hex0x"
                id="UTICK0@CAPCLR@CAPCLR3"
                offset="[3]"/>
      </register>
      <register description="Capture register ." format="hex0x" id="UTICK0@CAP0" offset="0x10"
                readOnly="true"
                size="4">
         <field description="Capture value for the related capture event (UTICK_CAPn. Note: the value is 1 lower than the actual value of the Micro-tick Timer at the moment of the capture event."
                format="hex0x"
                id="UTICK0@CAP0@CAP-VALUE"
                offset="[30:0]"/>
         <field description="Capture Valid. When 1, a value has been captured based on a transition of the related UTICK_CAPn pin. Cleared by writing to the related bit in the CAPCLR register."
                format="hex0x"
                id="UTICK0@CAP0@VALID"
                offset="[31]"/>
      </register>
      <register description="Capture register ." format="hex0x" id="UTICK0@CAP1" offset="0x14"
                readOnly="true"
                size="4">
         <field description="Capture value for the related capture event (UTICK_CAPn. Note: the value is 1 lower than the actual value of the Micro-tick Timer at the moment of the capture event."
                format="hex0x"
                id="UTICK0@CAP1@CAP-VALUE"
                offset="[30:0]"/>
         <field description="Capture Valid. When 1, a value has been captured based on a transition of the related UTICK_CAPn pin. Cleared by writing to the related bit in the CAPCLR register."
                format="hex0x"
                id="UTICK0@CAP1@VALID"
                offset="[31]"/>
      </register>
      <register description="Capture register ." format="hex0x" id="UTICK0@CAP2" offset="0x18"
                readOnly="true"
                size="4">
         <field description="Capture value for the related capture event (UTICK_CAPn. Note: the value is 1 lower than the actual value of the Micro-tick Timer at the moment of the capture event."
                format="hex0x"
                id="UTICK0@CAP2@CAP-VALUE"
                offset="[30:0]"/>
         <field description="Capture Valid. When 1, a value has been captured based on a transition of the related UTICK_CAPn pin. Cleared by writing to the related bit in the CAPCLR register."
                format="hex0x"
                id="UTICK0@CAP2@VALID"
                offset="[31]"/>
      </register>
      <register description="Capture register ." format="hex0x" id="UTICK0@CAP3" offset="0x1c"
                readOnly="true"
                size="4">
         <field description="Capture value for the related capture event (UTICK_CAPn. Note: the value is 1 lower than the actual value of the Micro-tick Timer at the moment of the capture event."
                format="hex0x"
                id="UTICK0@CAP3@CAP-VALUE"
                offset="[30:0]"/>
         <field description="Capture Valid. When 1, a value has been captured based on a transition of the related UTICK_CAPn pin. Cleared by writing to the related bit in the CAPCLR register."
                format="hex0x"
                id="UTICK0@CAP3@VALID"
                offset="[31]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Real-Time Clock (RTC)" id="RTC"
               size="0x10">
      <register description="RTC control register" format="hex0x" id="RTC@CTRL" offset="0x0"
                size="4">
         <field description="Software reset control" format="enum" enum="d1e44291"
                id="RTC@CTRL@SWRESET"
                offset="[0]"/>
         <field description="RTC 1 Hz timer alarm flag status." format="enum" enum="d1e44337"
                id="RTC@CTRL@ALARM1HZ"
                offset="[2]"/>
         <field description="RTC 1 kHz timer wake-up flag status." format="enum"
                enum="d1e44383"
                id="RTC@CTRL@WAKE1KHZ"
                offset="[3]"/>
         <field description="RTC 1 Hz timer alarm enable for Deep power-down." format="enum"
                enum="d1e44429"
                id="RTC@CTRL@ALARMDPD-EN"
                offset="[4]"/>
         <field description="RTC 1 kHz timer wake-up enable for Deep power-down." format="enum"
                enum="d1e44475"
                id="RTC@CTRL@WAKEDPD-EN"
                offset="[5]"/>
         <field description="RTC 1 kHz clock enable. This bit can be set to 0 to conserve power if the 1 kHz timer is not used. This bit has no effect when the RTC is disabled (bit 7 of this register is 0)."
                format="enum"
                enum="d1e44522"
                id="RTC@CTRL@RTC1KHZ-EN"
                offset="[6]"/>
         <field description="RTC enable." format="enum" enum="d1e44568" id="RTC@CTRL@RTC-EN"
                offset="[7]"/>
         <field description="RTC oscillator power-down control." format="enum" enum="d1e44614"
                id="RTC@CTRL@RTC-OSC-PD"
                offset="[8]"/>
         <field description="RTC oscillator bypass control." format="enum" enum="d1e44660"
                id="RTC@CTRL@RTC-OSC-BYPASS"
                offset="[9]"/>
      </register>
      <register description="RTC match register" format="hex0x" id="RTC@MATCH" offset="0x4"
                size="4">
         <field description="Contains the match value against which the 1 Hz RTC timer will be compared to set the alarm flag RTC_ALARM and generate an alarm interrupt/wake-up if enabled."
                format="hex0x"
                id="RTC@MATCH@MATVAL"
                offset="[31:0]"/>
      </register>
      <register description="RTC counter register" format="hex0x" id="RTC@COUNT" offset="0x8"
                size="4">
         <field description="A read reflects the current value of the main, 1 Hz RTC timer. A write loads a new initial value into the timer. The RTC counter will count up continuously at a 1 Hz rate once the RTC Software Reset is removed (by clearing bit 0 of the CTRL register). Only write to this register when the RTC_EN bit in the RTC CTRL Register is 0. The counter increments one second after the RTC_EN bit is set."
                format="hex0x"
                id="RTC@COUNT@VAL"
                offset="[31:0]"/>
      </register>
      <register description="High-resolution/wake-up timer control register" format="hex0x"
                id="RTC@WAKE"
                offset="0xc"
                size="4">
         <field description="A read reflects the current value of the high-resolution/wake-up timer. A write pre-loads a start count value into the wake-up timer and initializes a count-down sequence. Do not write to this register while counting is in progress."
                format="hex0x"
                id="RTC@WAKE@VAL"
                offset="[15:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4"
               description="LPC5411x Asynchronous system configuration (ASYNC_SYSCON)"
               id="ASYNC-SYSCON"
               size="0x24">
      <register description="Async peripheral reset control" format="hex0x"
                id="ASYNC-SYSCON@ASYNCPRESETCTRL"
                offset="0x0"
                size="4">
         <field description="Standard counter/timer CTIMER3 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCPRESETCTRL@CTIMER3"
                offset="[13]"/>
         <field description="Standard counter/timer CTIMER4 reset control. 0 = Clear reset to this function. 1 = Assert reset to this function."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCPRESETCTRL@CTIMER4"
                offset="[14]"/>
      </register>
      <register description="Set bits in ASYNCPRESETCTRL" format="hex0x"
                id="ASYNC-SYSCON@ASYNCPRESETCTRLSET"
                offset="0x4"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the ASYNCPRESETCTRL register, if they are implemented. Bits that do not correspond to defined bits in ASYNCPRESETCTRL are reserved and only zeroes should be written to them."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCPRESETCTRLSET@ARST-SET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in ASYNCPRESETCTRL" format="hex0x"
                id="ASYNC-SYSCON@ASYNCPRESETCTRLCLR"
                offset="0x8"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the ASYNCPRESETCTRL register, if they are implemented. Bits that do not correspond to defined bits in ASYNCPRESETCTRL are reserved and only zeroes should be written to them."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCPRESETCTRLCLR@ARST-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Async peripheral clock control" format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKCTRL"
                offset="0x10"
                size="4">
         <field description="Controls the clock for CTIMER3. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKCTRL@CTIMER3"
                offset="[13]"/>
         <field description="Controls the clock for CTIMER4. 0 = Disable; 1 = Enable."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKCTRL@CTIMER4"
                offset="[14]"/>
      </register>
      <register description="Set bits in ASYNCAPBCLKCTRL" format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKCTRLSET"
                offset="0x14"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register sets the corresponding bit or bits in the ASYNCAPBCLKCTRL register, if they are implemented. Bits that do not correspond to defined bits in ASYNCPRESETCTRL are reserved and only zeroes should be written to them."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKCTRLSET@ACLK-SET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in ASYNCAPBCLKCTRL" format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKCTRLCLR"
                offset="0x18"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bit or bits in the ASYNCAPBCLKCTRL register, if they are implemented. Bits that do not correspond to defined bits in ASYNCAPBCLKCTRL are reserved and only zeroes should be written to them."
                format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKCTRLCLR@ACLK-CLR"
                offset="[31:0]"/>
      </register>
      <register description="Async APB clock source select A" format="hex0x"
                id="ASYNC-SYSCON@ASYNCAPBCLKSELA"
                offset="0x20"
                size="4">
         <field description="Clock source for asynchronous clock source selector A"
                format="enum"
                enum="d1e45216"
                id="ASYNC-SYSCON@ASYNCAPBCLKSELA@SEL"
                offset="[1:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x SPI Flash Interface (SPIFI)" id="SPIFI0"
               size="0x20">
      <register description="SPIFI control register" format="hex0x" id="SPIFI0@CTRL"
                offset="0x0"
                size="4">
         <field description="This field contains the number of serial clock periods without the processor reading data in memory mode, which will cause the SPIFI hardware to terminate the command by driving the CS pin high and negating the CMD bit in the Status register. (This allows the flash memory to enter a lower-power state.) If the processor reads data from the flash region after a time-out, the command in the Memory Command Register is issued again."
                format="hex0x"
                id="SPIFI0@CTRL@TIMEOUT"
                offset="[15:0]"/>
         <field description="This field controls the minimum CS high time, expressed as a number of serial clock periods minus one."
                format="hex0x"
                id="SPIFI0@CTRL@CSHIGH"
                offset="[19:16]"/>
         <field description="This bit allows conditioning of memory mode prefetches based on the AHB HPROT (instruction/data) access information. A 1 in this register means that the SPIFI will not attempt a speculative prefetch when it encounters data accesses."
                format="hex0x"
                id="SPIFI0@CTRL@D-PRFTCH-DIS"
                offset="[21]"/>
         <field description="If this bit is 1 when a command ends, the SPIFI will assert its interrupt request output. See INTRQ in the status register for further details."
                format="hex0x"
                id="SPIFI0@CTRL@INTEN"
                offset="[22]"/>
         <field description="SPI Mode 3 select." format="enum" enum="d1e45393"
                id="SPIFI0@CTRL@MODE3"
                offset="[23]"/>
         <field description="Cache prefetching enable. The SPIFI includes an internal cache. A 1 in this bit disables prefetching of cache lines."
                format="enum"
                enum="d1e45440"
                id="SPIFI0@CTRL@PRFTCH-DIS"
                offset="[27]"/>
         <field description="Select dual protocol." format="enum" enum="d1e45486"
                id="SPIFI0@CTRL@DUAL"
                offset="[28]"/>
         <field description="Select active clock edge for input data." format="enum"
                enum="d1e45532"
                id="SPIFI0@CTRL@RFCLK"
                offset="[29]"/>
         <field description="Feedback clock select." format="enum" enum="d1e45578"
                id="SPIFI0@CTRL@FBCLK"
                offset="[30]"/>
         <field description="A 1 in this bit enables the DMA Request output from the SPIFI. Set this bit only when a DMA channel is used to transfer data in peripheral mode. Do not set this bit when a DMA channel is used for memory-to-memory transfers from the SPIFI memory area. DMAEN should only be used in Command mode."
                format="hex0x"
                id="SPIFI0@CTRL@DMAEN"
                offset="[31]"/>
      </register>
      <register description="SPIFI command register" format="hex0x" id="SPIFI0@CMD"
                offset="0x4"
                size="4">
         <field description="Except when the POLL bit in this register is 1, this field controls how many data bytes are in the command. 0 indicates that the command does not contain a data field."
                format="hex0x"
                id="SPIFI0@CMD@DATALEN"
                offset="[13:0]"/>
         <field description="This bit should be written as 1 only with an opcode that a) contains an input data field, and b) causes the serial flash device to return byte status repetitively (e.g., a Read Status command). When this bit is 1, the SPIFI hardware continues to read bytes until the test specified by the DATALEN field is met. The hardware tests the bit in each status byte selected by DATALEN bits 2:0, until a bit is found that is equal to DATALEN bit 3. When the test succeeds, the SPIFI captures the byte that meets this test so that it can be read from the Data Register, and terminates the command by raising CS. The end-of-command interrupt can be enabled to inform software when this occurs"
                format="hex0x"
                id="SPIFI0@CMD@POLL"
                offset="[14]"/>
         <field description="If the DATALEN field is not zero, this bit controls the direction of the data:"
                format="enum"
                enum="d1e45706"
                id="SPIFI0@CMD@DOUT"
                offset="[15]"/>
         <field description="This field controls how many intermediate bytes precede the data. (Each such byte may require 8 or 2 SCK cycles, depending on whether the intermediate field is in serial, 2-bit, or 4-bit format.) Intermediate bytes are output by the SPIFI, and include post-address control information, dummy and delay bytes. See the description of the Intermediate Data register for the contents of such bytes."
                format="hex0x"
                id="SPIFI0@CMD@INTLEN"
                offset="[18:16]"/>
         <field description="This field controls how the fields of the command are sent."
                format="enum"
                enum="d1e45770"
                id="SPIFI0@CMD@FIELDFORM"
                offset="[20:19]"/>
         <field description="This field controls the opcode and address fields." format="enum"
                enum="d1e45841"
                id="SPIFI0@CMD@FRAMEFORM"
                offset="[23:21]"/>
         <field description="The opcode of the command (not used for some FRAMEFORM values)."
                format="hex0x"
                id="SPIFI0@CMD@OPCODE"
                offset="[31:24]"/>
      </register>
      <register description="SPIFI address register" format="hex0x" id="SPIFI0@ADDR"
                offset="0x8"
                size="4">
         <field description="Address." format="hex0x" id="SPIFI0@ADDR@ADDRESS" offset="[31:0]"/>
      </register>
      <register description="SPIFI intermediate data register" format="hex0x" id="SPIFI0@IDATA"
                offset="0xc"
                size="4">
         <field description="Value of intermediate bytes." format="hex0x"
                id="SPIFI0@IDATA@IDATA"
                offset="[31:0]"/>
      </register>
      <register description="SPIFI limit register" format="hex0x" id="SPIFI0@CLIMIT"
                offset="0x10"
                size="4">
         <field description="Zero-based upper limit of cacheable memory" format="hex0x"
                id="SPIFI0@CLIMIT@CLIMIT"
                offset="[31:0]"/>
      </register>
      <register description="SPIFI data register" format="hex0x" id="SPIFI0@DATA" offset="0x14"
                size="4">
         <field description="Input or output data" format="hex0x" id="SPIFI0@DATA@DATA"
                offset="[31:0]"/>
      </register>
      <register description="SPIFI memory command register" format="hex0x" id="SPIFI0@MCMD"
                offset="0x18"
                size="4">
         <field description="This bit should be written as 0." format="hex0x"
                id="SPIFI0@MCMD@POLL"
                offset="[14]"/>
         <field description="This bit should be written as 0." format="hex0x"
                id="SPIFI0@MCMD@DOUT"
                offset="[15]"/>
         <field description="This field controls how many intermediate bytes precede the data. (Each such byte may require 8 or 2 SCK cycles, depending on whether the intermediate field is in serial, 2-bit, or 4-bit format.) Intermediate bytes are output by the SPIFI, and include post-address control information, dummy and delay bytes. See the description of the Intermediate Data register for the contents of such bytes."
                format="hex0x"
                id="SPIFI0@MCMD@INTLEN"
                offset="[18:16]"/>
         <field description="This field controls how the fields of the command are sent."
                format="enum"
                enum="d1e46233"
                id="SPIFI0@MCMD@FIELDFORM"
                offset="[20:19]"/>
         <field description="This field controls the opcode and address fields." format="enum"
                enum="d1e46303"
                id="SPIFI0@MCMD@FRAMEFORM"
                offset="[23:21]"/>
         <field description="The opcode of the command (not used for some FRAMEFORM values)."
                format="hex0x"
                id="SPIFI0@MCMD@OPCODE"
                offset="[31:24]"/>
      </register>
      <register description="SPIFI status register" format="hex0x" id="SPIFI0@STAT"
                offset="0x1c"
                size="4">
         <field description="This bit is set when software successfully writes the Memory Command register, and is cleared by Reset or by writing a 1 to the RESET bit in this register."
                format="hex0x"
                id="SPIFI0@STAT@MCINIT"
                offset="[0]"/>
         <field description="This bit is 1 when the Command register is written. It is cleared by a hardware reset, a write to the RESET bit in this register, or the deassertion of CS which indicates that the command has completed communication with the SPI Flash."
                format="hex0x"
                id="SPIFI0@STAT@CMD"
                offset="[1]"/>
         <field description="Write a 1 to this bit to abort a current command or memory mode. This bit is cleared when the hardware is ready for a new command to be written to the Command register."
                format="hex0x"
                id="SPIFI0@STAT@RESET"
                offset="[4]"/>
         <field description="This bit reflects the SPIFI interrupt request. Write a 1 to this bit to clear it. This bit is set when a CMD was previously 1 and has been cleared due to the deassertion of CS."
                format="hex0x"
                id="SPIFI0@STAT@INTRQ"
                offset="[5]"/>
         <field description="-" format="hex0x" id="SPIFI0@STAT@VERSION" offset="[31:24]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x DMA controller" id="DMA0" size="0x534">
      <register description="DMA control." format="hex0x" id="DMA0@CTRL" offset="0x0" size="4">
         <field description="DMA controller master enable." format="enum" enum="d1e46616"
                id="DMA0@CTRL@ENABLE"
                offset="[0]"/>
      </register>
      <register description="Interrupt status." format="hex0x" id="DMA0@INTSTAT" offset="0x4"
                readOnly="true"
                size="4">
         <field description="Summarizes whether any enabled interrupts (other than error interrupts) are pending."
                format="enum"
                enum="d1e46690"
                id="DMA0@INTSTAT@ACTIVEINT"
                offset="[1]"/>
         <field description="Summarizes whether any error interrupts are pending."
                format="enum"
                enum="d1e46736"
                id="DMA0@INTSTAT@ACTIVEERRINT"
                offset="[2]"/>
      </register>
      <register description="SRAM address of the channel configuration table." format="hex0x"
                id="DMA0@SRAMBASE"
                offset="0x8"
                size="4">
         <field description="Address bits 31:9 of the beginning of the DMA descriptor table. For 18 channels, the table must begin on a 512 byte boundary."
                format="hex0x"
                id="DMA0@SRAMBASE@OFFSET"
                offset="[31:9]"/>
      </register>
      <register description="Channel Enable read and Set for all DMA channels." format="hex0x"
                id="DMA0@ENABLESET0"
                offset="0x20"
                size="4">
         <field description="Enable for DMA channels. Bit n enables or disables DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = disabled. 1 = enabled."
                format="hex0x"
                id="DMA0@ENABLESET0@ENA"
                offset="[31:0]"/>
      </register>
      <register description="Channel Enable Clear for all DMA channels." format="hex0x"
                id="DMA0@ENABLECLR0"
                offset="0x28"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears the corresponding bits in ENABLESET0. Bit n clears the channel enable bit n. The number of bits = number of DMA channels in this device. Other bits are reserved."
                format="hex0x"
                id="DMA0@ENABLECLR0@CLR"
                offset="[31:0]"/>
      </register>
      <register description="Channel Active status for all DMA channels." format="hex0x"
                id="DMA0@ACTIVE0"
                offset="0x30"
                readOnly="true"
                size="4">
         <field description="Active flag for DMA channel n. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = not active. 1 = active."
                format="hex0x"
                id="DMA0@ACTIVE0@ACT"
                offset="[31:0]"/>
      </register>
      <register description="Channel Busy status for all DMA channels." format="hex0x"
                id="DMA0@BUSY0"
                offset="0x38"
                readOnly="true"
                size="4">
         <field description="Busy flag for DMA channel n. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = not busy. 1 = busy."
                format="hex0x"
                id="DMA0@BUSY0@BSY"
                offset="[31:0]"/>
      </register>
      <register description="Error Interrupt status for all DMA channels." format="hex0x"
                id="DMA0@ERRINT0"
                offset="0x40"
                size="4">
         <field description="Error Interrupt flag for DMA channel n. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = error interrupt is not active. 1 = error interrupt is active."
                format="hex0x"
                id="DMA0@ERRINT0@ERR"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Enable read and Set for all DMA channels."
                format="hex0x"
                id="DMA0@INTENSET0"
                offset="0x48"
                size="4">
         <field description="Interrupt Enable read and set for DMA channel n. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = interrupt for DMA channel is disabled. 1 = interrupt for DMA channel is enabled."
                format="hex0x"
                id="DMA0@INTENSET0@INTEN"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Enable Clear for all DMA channels." format="hex0x"
                id="DMA0@INTENCLR0"
                offset="0x50"
                writeOnly="true"
                size="4">
         <field description="Writing ones to this register clears corresponding bits in the INTENSET0. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved."
                format="hex0x"
                id="DMA0@INTENCLR0@CLR"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt A status for all DMA channels." format="hex0x"
                id="DMA0@INTA0"
                offset="0x58"
                size="4">
         <field description="Interrupt A status for DMA channel n. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = the DMA channel interrupt A is not active. 1 = the DMA channel interrupt A is active."
                format="hex0x"
                id="DMA0@INTA0@IA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt B status for all DMA channels." format="hex0x"
                id="DMA0@INTB0"
                offset="0x60"
                size="4">
         <field description="Interrupt B status for DMA channel n. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = the DMA channel interrupt B is not active. 1 = the DMA channel interrupt B is active."
                format="hex0x"
                id="DMA0@INTB0@IB"
                offset="[31:0]"/>
      </register>
      <register description="Set ValidPending control bits for all DMA channels."
                format="hex0x"
                id="DMA0@SETVALID0"
                offset="0x68"
                writeOnly="true"
                size="4">
         <field description="SETVALID control for DMA channel n. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = no effect. 1 = sets the VALIDPENDING control bit for DMA channel n"
                format="hex0x"
                id="DMA0@SETVALID0@SV"
                offset="[31:0]"/>
      </register>
      <register description="Set Trigger control bits for all DMA channels." format="hex0x"
                id="DMA0@SETTRIG0"
                offset="0x70"
                writeOnly="true"
                size="4">
         <field description="Set Trigger control bit for DMA channel 0. Bit n corresponds to DMA channel n. The number of bits = number of DMA channels in this device. Other bits are reserved. 0 = no effect. 1 = sets the TRIG bit for DMA channel n."
                format="hex0x"
                id="DMA0@SETTRIG0@TRIG"
                offset="[31:0]"/>
      </register>
      <register description="Channel Abort control for all DMA channels." format="hex0x"
                id="DMA0@ABORT0"
                offset="0x78"
                writeOnly="true"
                size="4">
         <field description="Abort control for DMA channel 0. Bit n corresponds to DMA channel n. 0 = no effect. 1 = aborts DMA operations on channel n."
                format="hex0x"
                id="DMA0@ABORT0@ABORTCTRL"
                offset="[31:0]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL0-CFG"
                offset="0x400"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL0-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL0-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL0-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL0-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL0-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL0-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL0-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL0-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL0-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL0-CTLSTAT"
                offset="0x404"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL0-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL0-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL0-XFERCFG"
                offset="0x408"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL0-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL0-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL0-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL0-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL0-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL0-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL0-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL0-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL0-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL0-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL1-CFG"
                offset="0x410"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL1-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL1-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL1-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL1-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL1-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL1-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL1-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL1-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL1-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL1-CTLSTAT"
                offset="0x414"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL1-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL1-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL1-XFERCFG"
                offset="0x418"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL1-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL1-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL1-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL1-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL1-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL1-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL1-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL1-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL1-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL1-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL2-CFG"
                offset="0x420"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL2-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL2-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL2-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL2-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL2-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL2-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL2-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL2-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL2-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL2-CTLSTAT"
                offset="0x424"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL2-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL2-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL2-XFERCFG"
                offset="0x428"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL2-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL2-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL2-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL2-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL2-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL2-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL2-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL2-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL2-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL2-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL3-CFG"
                offset="0x430"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL3-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL3-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL3-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL3-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL3-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL3-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL3-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL3-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL3-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL3-CTLSTAT"
                offset="0x434"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL3-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL3-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL3-XFERCFG"
                offset="0x438"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL3-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL3-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL3-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL3-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL3-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL3-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL3-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL3-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL3-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL3-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL4-CFG"
                offset="0x440"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL4-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL4-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL4-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL4-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL4-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL4-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL4-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL4-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL4-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL4-CTLSTAT"
                offset="0x444"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL4-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL4-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL4-XFERCFG"
                offset="0x448"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL4-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL4-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL4-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL4-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL4-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL4-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL4-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL4-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL4-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL4-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL5-CFG"
                offset="0x450"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL5-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL5-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL5-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL5-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL5-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL5-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL5-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL5-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL5-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL5-CTLSTAT"
                offset="0x454"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL5-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL5-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL5-XFERCFG"
                offset="0x458"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL5-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL5-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL5-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL5-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL5-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL5-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL5-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL5-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL5-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL5-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL6-CFG"
                offset="0x460"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL6-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL6-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL6-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL6-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL6-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL6-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL6-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL6-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL6-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL6-CTLSTAT"
                offset="0x464"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL6-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL6-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL6-XFERCFG"
                offset="0x468"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL6-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL6-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL6-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL6-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL6-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL6-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL6-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL6-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL6-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL6-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL7-CFG"
                offset="0x470"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL7-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL7-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL7-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL7-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL7-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL7-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL7-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL7-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL7-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL7-CTLSTAT"
                offset="0x474"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL7-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL7-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL7-XFERCFG"
                offset="0x478"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL7-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL7-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL7-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL7-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL7-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL7-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL7-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL7-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL7-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL7-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL8-CFG"
                offset="0x480"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL8-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL8-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL8-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL8-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL8-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL8-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL8-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL8-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL8-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL8-CTLSTAT"
                offset="0x484"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL8-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL8-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL8-XFERCFG"
                offset="0x488"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL8-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL8-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL8-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL8-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL8-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL8-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL8-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL8-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL8-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL8-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL9-CFG"
                offset="0x490"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL9-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL9-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL9-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL9-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL9-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL9-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL9-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL9-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL9-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL9-CTLSTAT"
                offset="0x494"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL9-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL9-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL9-XFERCFG"
                offset="0x498"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL9-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL9-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL9-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL9-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL9-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL9-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL9-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL9-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL9-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL9-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL10-CFG"
                offset="0x4a0"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL10-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL10-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL10-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL10-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL10-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL10-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL10-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL10-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL10-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL10-CTLSTAT"
                offset="0x4a4"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL10-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL10-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL10-XFERCFG"
                offset="0x4a8"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL10-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL10-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL10-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL10-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL10-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL10-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL10-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL10-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL10-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL10-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL11-CFG"
                offset="0x4b0"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL11-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL11-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL11-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL11-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL11-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL11-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL11-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL11-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL11-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL11-CTLSTAT"
                offset="0x4b4"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL11-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL11-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL11-XFERCFG"
                offset="0x4b8"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL11-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL11-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL11-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL11-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL11-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL11-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL11-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL11-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL11-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL11-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL12-CFG"
                offset="0x4c0"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL12-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL12-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL12-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL12-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL12-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL12-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL12-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL12-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL12-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL12-CTLSTAT"
                offset="0x4c4"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL12-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL12-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL12-XFERCFG"
                offset="0x4c8"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL12-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL12-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL12-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL12-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL12-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL12-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL12-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL12-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL12-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL12-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL13-CFG"
                offset="0x4d0"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL13-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL13-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL13-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL13-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL13-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL13-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL13-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL13-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL13-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL13-CTLSTAT"
                offset="0x4d4"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL13-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL13-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL13-XFERCFG"
                offset="0x4d8"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL13-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL13-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL13-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL13-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL13-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL13-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL13-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL13-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL13-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL13-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL14-CFG"
                offset="0x4e0"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL14-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL14-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL14-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL14-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL14-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL14-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL14-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL14-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL14-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL14-CTLSTAT"
                offset="0x4e4"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL14-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL14-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL14-XFERCFG"
                offset="0x4e8"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL14-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL14-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL14-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL14-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL14-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL14-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL14-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL14-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL14-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL14-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL15-CFG"
                offset="0x4f0"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL15-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL15-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL15-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL15-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL15-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL15-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL15-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL15-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL15-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL15-CTLSTAT"
                offset="0x4f4"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL15-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL15-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL15-XFERCFG"
                offset="0x4f8"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL15-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL15-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL15-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL15-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL15-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL15-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL15-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL15-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL15-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL15-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL16-CFG"
                offset="0x500"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL16-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL16-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL16-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL16-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL16-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL16-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL16-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL16-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL16-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL16-CTLSTAT"
                offset="0x504"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL16-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL16-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL16-XFERCFG"
                offset="0x508"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL16-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL16-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL16-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL16-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL16-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL16-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL16-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL16-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL16-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL16-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL17-CFG"
                offset="0x510"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL17-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL17-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL17-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL17-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL17-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL17-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL17-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL17-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL17-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL17-CTLSTAT"
                offset="0x514"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL17-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL17-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL17-XFERCFG"
                offset="0x518"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL17-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL17-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL17-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL17-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL17-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL17-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL17-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL17-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL17-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL17-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL18-CFG"
                offset="0x520"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL18-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL18-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL18-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL18-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL18-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL18-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL18-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL18-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL18-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL18-CTLSTAT"
                offset="0x524"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL18-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL18-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL18-XFERCFG"
                offset="0x528"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL18-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL18-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL18-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL18-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL18-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL18-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL18-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL18-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL18-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL18-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
      <register description="Configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL19-CFG"
                offset="0x530"
                size="4">
         <field description="Peripheral request Enable. If a DMA channel is used to perform a memory-to-memory move, any peripheral DMA request associated with that channel can be disabled to prevent any interaction between the peripheral and the DMA controller."
                format="enum"
                enum="d1e47428"
                id="DMA0@CHANNEL19-CFG@PERIPHREQEN"
                offset="[0]"/>
         <field description="Hardware Triggering Enable for this channel." format="enum"
                enum="d1e47474"
                id="DMA0@CHANNEL19-CFG@HWTRIGEN"
                offset="[1]"/>
         <field description="Trigger Polarity. Selects the polarity of a hardware trigger for this channel."
                format="enum"
                enum="d1e47520"
                id="DMA0@CHANNEL19-CFG@TRIGPOL"
                offset="[4]"/>
         <field description="Trigger Type. Selects hardware trigger as edge triggered or level triggered."
                format="enum"
                enum="d1e47566"
                id="DMA0@CHANNEL19-CFG@TRIGTYPE"
                offset="[5]"/>
         <field description="Trigger Burst. Selects whether hardware triggers cause a single or burst transfer."
                format="enum"
                enum="d1e47612"
                id="DMA0@CHANNEL19-CFG@TRIGBURST"
                offset="[6]"/>
         <field description="Burst Power is used in two ways. It always selects the address wrap size when SRCBURSTWRAP and/or DSTBURSTWRAP modes are selected (see descriptions elsewhere in this register). When the TRIGBURST field elsewhere in this register = 1, Burst Power selects how many transfers are performed for each DMA trigger. This can be used, for example, with peripherals that contain a FIFO that can initiate a DMA operation when the FIFO reaches a certain level. 0000: Burst size = 1 (20). 0001: Burst size = 2 (21). 0010: Burst size = 4 (22). 1010: Burst size = 1024 (210). This corresponds to the maximum supported transfer count. others: not supported. The total transfer length as defined in the XFERCOUNT bits in the XFERCFG register must be an even multiple of the burst size."
                format="hex0x"
                id="DMA0@CHANNEL19-CFG@BURSTPOWER"
                offset="[11:8]"/>
         <field description="Source Burst Wrap. When enabled, the source data address for the DMA is 'wrapped', meaning that the source address range for each burst will be the same. As an example, this could be used to read several sequential registers from a peripheral for each DMA burst, reading the same registers again for each burst."
                format="enum"
                enum="d1e47677"
                id="DMA0@CHANNEL19-CFG@SRCBURSTWRAP"
                offset="[14]"/>
         <field description="Destination Burst Wrap. When enabled, the destination data address for the DMA is 'wrapped', meaning that the destination address range for each burst will be the same. As an example, this could be used to write several sequential registers to a peripheral for each DMA burst, writing the same registers again for each burst."
                format="enum"
                enum="d1e47723"
                id="DMA0@CHANNEL19-CFG@DSTBURSTWRAP"
                offset="[15]"/>
         <field description="Priority of this channel when multiple DMA requests are pending. Eight priority levels are supported: 0x0 = highest priority. 0x7 = lowest priority."
                format="hex0x"
                id="DMA0@CHANNEL19-CFG@CHPRIORITY"
                offset="[18:16]"/>
      </register>
      <register description="Control and status register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL19-CTLSTAT"
                offset="0x534"
                readOnly="true"
                size="4">
         <field description="Valid pending flag for this channel. This bit is set when a 1 is written to the corresponding bit in the related SETVALID register when CFGVALID = 1 for the same channel."
                format="enum"
                enum="d1e47815"
                id="DMA0@CHANNEL19-CTLSTAT@VALIDPENDING"
                offset="[0]"/>
         <field description="Trigger flag. Indicates that the trigger for this channel is currently set. This bit is cleared at the end of an entire transfer or upon reload when CLRTRIG = 1."
                format="enum"
                enum="d1e47861"
                id="DMA0@CHANNEL19-CTLSTAT@TRIG"
                offset="[2]"/>
      </register>
      <register description="Transfer configuration register for DMA channel ." format="hex0x"
                id="DMA0@CHANNEL19-XFERCFG"
                offset="0x538"
                size="4">
         <field description="Configuration Valid flag. This bit indicates whether the current channel descriptor is valid and can potentially be acted upon, if all other activation criteria are fulfilled."
                format="enum"
                enum="d1e47935"
                id="DMA0@CHANNEL19-XFERCFG@CFGVALID"
                offset="[0]"/>
         <field description="Indicates whether the channel's control structure will be reloaded when the current descriptor is exhausted. Reloading allows ping-pong and linked transfers."
                format="enum"
                enum="d1e47981"
                id="DMA0@CHANNEL19-XFERCFG@RELOAD"
                offset="[1]"/>
         <field description="Software Trigger." format="enum" enum="d1e48027"
                id="DMA0@CHANNEL19-XFERCFG@SWTRIG"
                offset="[2]"/>
         <field description="Clear Trigger." format="enum" enum="d1e48073"
                id="DMA0@CHANNEL19-XFERCFG@CLRTRIG"
                offset="[3]"/>
         <field description="Set Interrupt flag A for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48119"
                id="DMA0@CHANNEL19-XFERCFG@SETINTA"
                offset="[4]"/>
         <field description="Set Interrupt flag B for this channel. There is no hardware distinction between interrupt A and B. They can be used by software to assist with more complex descriptor usage. By convention, interrupt A may be used when only one interrupt flag is needed."
                format="enum"
                enum="d1e48166"
                id="DMA0@CHANNEL19-XFERCFG@SETINTB"
                offset="[5]"/>
         <field description="Transfer width used for this DMA channel." format="enum"
                enum="d1e48212"
                id="DMA0@CHANNEL19-XFERCFG@WIDTH"
                offset="[9:8]"/>
         <field description="Determines whether the source address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48270"
                id="DMA0@CHANNEL19-XFERCFG@SRCINC"
                offset="[13:12]"/>
         <field description="Determines whether the destination address is incremented for each DMA transfer."
                format="enum"
                enum="d1e48340"
                id="DMA0@CHANNEL19-XFERCFG@DSTINC"
                offset="[15:14]"/>
         <field description="Total number of transfers to be performed, minus 1 encoded. The number of bytes transferred is: (XFERCOUNT + 1) x data width (as defined by the WIDTH field). The DMA controller uses this bit field during transfer to count down. Hence, it cannot be used by software to read back the size of the transfer, for instance, in an interrupt handler. 0x0 = a total of 1 transfer will be performed. 0x1 = a total of 2 transfers will be performed. 0x3FF = a total of 1,024 transfers will be performed."
                format="hex0x"
                id="DMA0@CHANNEL19-XFERCFG@XFERCOUNT"
                offset="[25:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USB 2.0 Device Controller" id="USB0"
               size="0x38">
      <register description="USB Device Command/Status register" format="hex0x"
                id="USB0@DEVCMDSTAT"
                offset="0x0"
                size="4">
         <field description="USB device address. After bus reset, the address is reset to 0x00. If the enable bit is set, the device will respond on packets for function address DEV_ADDR. When receiving a SetAddress Control Request from the USB host, software must program the new address before completing the status phase of the SetAddress Control Request."
                format="hex0x"
                id="USB0@DEVCMDSTAT@DEV-ADDR"
                offset="[6:0]"/>
         <field description="USB device enable. If this bit is set, the HW will start responding on packets for function address DEV_ADDR."
                format="hex0x"
                id="USB0@DEVCMDSTAT@DEV-EN"
                offset="[7]"/>
         <field description="SETUP token received. If a SETUP token is received and acknowledged by the device, this bit is set. As long as this bit is set all received IN and OUT tokens will be NAKed by HW. SW must clear this bit by writing a one. If this bit is zero, HW will handle the tokens to the CTRL EP0 as indicated by the CTRL EP0 IN and OUT data information programmed by SW."
                format="hex0x"
                id="USB0@DEVCMDSTAT@SETUP"
                offset="[8]"/>
         <field description="Forces the NEEDCLK output to always be on:" format="enum"
                enum="d1e48560"
                id="USB0@DEVCMDSTAT@FORCE-NEEDCLK"
                offset="[9]"/>
         <field description="LPM Supported:" format="enum" enum="d1e48606"
                id="USB0@DEVCMDSTAT@LPM-SUP"
                offset="[11]"/>
         <field description="Interrupt on NAK for interrupt and bulk OUT EP" format="enum"
                enum="d1e48653"
                id="USB0@DEVCMDSTAT@INTONNAK-AO"
                offset="[12]"/>
         <field description="Interrupt on NAK for interrupt and bulk IN EP" format="enum"
                enum="d1e48699"
                id="USB0@DEVCMDSTAT@INTONNAK-AI"
                offset="[13]"/>
         <field description="Interrupt on NAK for control OUT EP" format="enum" enum="d1e48745"
                id="USB0@DEVCMDSTAT@INTONNAK-CO"
                offset="[14]"/>
         <field description="Interrupt on NAK for control IN EP" format="enum" enum="d1e48791"
                id="USB0@DEVCMDSTAT@INTONNAK-CI"
                offset="[15]"/>
         <field description="Device status - connect. The connect bit must be set by SW to indicate that the device must signal a connect. The pull-up resistor on USB_DP will be enabled when this bit is set and the VBUSDEBOUNCED bit is one."
                format="hex0x"
                id="USB0@DEVCMDSTAT@DCON"
                offset="[16]"/>
         <field description="Device status - suspend. The suspend bit indicates the current suspend state. It is set to 1 when the device hasn't seen any activity on its upstream port for more than 3 milliseconds. It is reset to 0 on any activity. When the device is suspended (Suspend bit DSUS = 1) and the software writes a 0 to it, the device will generate a remote wake-up. This will only happen when the device is connected (Connect bit = 1). When the device is not connected or not suspended, a writing a 0 has no effect. Writing a 1 never has an effect."
                format="hex0x"
                id="USB0@DEVCMDSTAT@DSUS"
                offset="[17]"/>
         <field description="Device status - LPM Suspend. This bit represents the current LPM suspend state. It is set to 1 by HW when the device has acknowledged the LPM request from the USB host and the Token Retry Time of 10 ms has elapsed. When the device is in the LPM suspended state (LPM suspend bit = 1) and the software writes a zero to this bit, the device will generate a remote walk-up. Software can only write a zero to this bit when the LPM_REWP bit is set to 1. HW resets this bit when it receives a host initiated resume. HW only updates the LPM_SUS bit when the LPM_SUPP bit is equal to one."
                format="hex0x"
                id="USB0@DEVCMDSTAT@LPM-SUS"
                offset="[19]"/>
         <field description="LPM Remote Wake-up Enabled by USB host. HW sets this bit to one when the bRemoteWake bit in the LPM extended token is set to 1. HW will reset this bit to 0 when it receives the host initiated LPM resume, when a remote wake-up is sent by the device or when a USB bus reset is received. Software can use this bit to check if the remote wake-up feature is enabled by the host for the LPM transaction."
                format="hex0x"
                id="USB0@DEVCMDSTAT@LPM-REWP"
                offset="[20]"/>
         <field description="Device status - connect change. The Connect Change bit is set when the device's pull-up resistor is disconnected because VBus disappeared. The bit is reset by writing a one to it."
                format="hex0x"
                id="USB0@DEVCMDSTAT@DCON-C"
                offset="[24]"/>
         <field description="Device status - suspend change. The suspend change bit is set to 1 when the suspend bit toggles. The suspend bit can toggle because: - The device goes in the suspended state - The device is disconnected - The device receives resume signaling on its upstream port. The bit is reset by writing a one to it."
                format="hex0x"
                id="USB0@DEVCMDSTAT@DSUS-C"
                offset="[25]"/>
         <field description="Device status - reset change. This bit is set when the device received a bus reset. On a bus reset the device will automatically go to the default state (unconfigured and responding to address 0). The bit is reset by writing a one to it."
                format="hex0x"
                id="USB0@DEVCMDSTAT@DRES-C"
                offset="[26]"/>
         <field description="This bit indicates if Vbus is detected or not. The bit raises immediately when Vbus becomes high. It drops to zero if Vbus is low for at least 3 ms. If this bit is high and the DCon bit is set, the HW will enable the pull-up resistor to signal a connect."
                format="hex0x"
                id="USB0@DEVCMDSTAT@VBUSDEBOUNCED"
                offset="[28]"/>
      </register>
      <register description="USB Info register" format="hex0x" id="USB0@INFO" offset="0x4"
                size="4">
         <field description="Frame number. This contains the frame number of the last successfully received SOF. In case no SOF was received by the device at the beginning of a frame, the frame number returned is that of the last successfully received SOF. In case the SOF frame number contained a CRC error, the frame number returned will be the corrupted frame number as received by the device."
                format="hex0x"
                id="USB0@INFO@FRAME-NR"
                offset="[10:0]"/>
         <field description="The error code which last occurred:" format="enum" enum="d1e49028"
                id="USB0@INFO@ERR-CODE"
                offset="[14:11]"/>
      </register>
      <register description="USB EP Command/Status List start address" format="hex0x"
                id="USB0@EPLISTSTART"
                offset="0x8"
                size="4">
         <field description="Start address of the USB EP Command/Status List." format="hex0x"
                id="USB0@EPLISTSTART@EP-LIST"
                offset="[31:8]"/>
      </register>
      <register description="USB Data buffer start address" format="hex0x"
                id="USB0@DATABUFSTART"
                offset="0xc"
                size="4">
         <field description="Start address of the buffer pointer page where all endpoint data buffers are located."
                format="hex0x"
                id="USB0@DATABUFSTART@DA-BUF"
                offset="[31:22]"/>
      </register>
      <register description="USB Link Power Management register" format="hex0x" id="USB0@LPM"
                offset="0x10"
                size="4">
         <field description="Host Initiated Resume Duration - HW. This is the HIRD value from the last received LPM token"
                format="hex0x"
                id="USB0@LPM@HIRD-HW"
                offset="[3:0]"/>
         <field description="Host Initiated Resume Duration - SW. This is the time duration required by the USB device system to come out of LPM initiated suspend after receiving the host initiated LPM resume."
                format="hex0x"
                id="USB0@LPM@HIRD-SW"
                offset="[7:4]"/>
         <field description="As long as this bit is set to one and LPM supported bit is set to one, HW will return a NYET handshake on every LPM token it receives. If LPM supported bit is set to one and this bit is zero, HW will return an ACK handshake on every LPM token it receives. If SW has still data pending and LPM is supported, it must set this bit to 1."
                format="hex0x"
                id="USB0@LPM@DATA-PENDING"
                offset="[8]"/>
      </register>
      <register description="USB Endpoint skip" format="hex0x" id="USB0@EPSKIP" offset="0x14"
                size="4">
         <field description="Endpoint skip: Writing 1 to one of these bits, will indicate to HW that it must deactivate the buffer assigned to this endpoint and return control back to software. When HW has deactivated the endpoint, it will clear this bit, but it will not modify the EPINUSE bit. An interrupt will be generated when the Active bit goes from 1 to 0. Note: In case of double-buffering, HW will only clear the Active bit of the buffer indicated by the EPINUSE bit."
                format="hex0x"
                id="USB0@EPSKIP@SKIP"
                offset="[29:0]"/>
      </register>
      <register description="USB Endpoint Buffer in use" format="hex0x" id="USB0@EPINUSE"
                offset="0x18"
                size="4">
         <field description="Buffer in use: This register has one bit per physical endpoint. 0: HW is accessing buffer 0. 1: HW is accessing buffer 1."
                format="hex0x"
                id="USB0@EPINUSE@BUF"
                offset="[9:2]"/>
      </register>
      <register description="USB Endpoint Buffer Configuration register" format="hex0x"
                id="USB0@EPBUFCFG"
                offset="0x1c"
                size="4">
         <field description="Buffer usage: This register has one bit per physical endpoint. 0: Single-buffer. 1: Double-buffer. If the bit is set to single-buffer (0), it will not toggle the corresponding EPINUSE bit when it clears the active bit. If the bit is set to double-buffer (1), HW will toggle the EPINUSE bit when it clears the Active bit for the buffer."
                format="hex0x"
                id="USB0@EPBUFCFG@BUF-SB"
                offset="[9:2]"/>
      </register>
      <register description="USB interrupt status register" format="hex0x" id="USB0@INTSTAT"
                offset="0x20"
                size="4">
         <field description="Interrupt status register bit for the Control EP0 OUT direction. This bit will be set if NBytes transitions to zero or the skip bit is set by software or a SETUP packet is successfully received for the control EP0. If the IntOnNAK_CO is set, this bit will also be set when a NAK is transmitted for the Control EP0 OUT direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP0OUT"
                offset="[0]"/>
         <field description="Interrupt status register bit for the Control EP0 IN direction. This bit will be set if NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_CI is set, this bit will also be set when a NAK is transmitted for the Control EP0 IN direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP0IN"
                offset="[1]"/>
         <field description="Interrupt status register bit for the EP1 OUT direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AO is set, this bit will also be set when a NAK is transmitted for the EP1 OUT direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP1OUT"
                offset="[2]"/>
         <field description="Interrupt status register bit for the EP1 IN direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AI is set, this bit will also be set when a NAK is transmitted for the EP1 IN direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP1IN"
                offset="[3]"/>
         <field description="Interrupt status register bit for the EP2 OUT direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AO is set, this bit will also be set when a NAK is transmitted for the EP2 OUT direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP2OUT"
                offset="[4]"/>
         <field description="Interrupt status register bit for the EP2 IN direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AI is set, this bit will also be set when a NAK is transmitted for the EP2 IN direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP2IN"
                offset="[5]"/>
         <field description="Interrupt status register bit for the EP3 OUT direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AO is set, this bit will also be set when a NAK is transmitted for the EP3 OUT direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP3OUT"
                offset="[6]"/>
         <field description="Interrupt status register bit for the EP3 IN direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AI is set, this bit will also be set when a NAK is transmitted for the EP3 IN direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP3IN"
                offset="[7]"/>
         <field description="Interrupt status register bit for the EP4 OUT direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AO is set, this bit will also be set when a NAK is transmitted for the EP4 OUT direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP4OUT"
                offset="[8]"/>
         <field description="Interrupt status register bit for the EP4 IN direction. This bit will be set if the corresponding Active bit is cleared by HW. This is done in case the programmed NBytes transitions to zero or the skip bit is set by software. If the IntOnNAK_AI is set, this bit will also be set when a NAK is transmitted for the EP4 IN direction. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@EP4IN"
                offset="[9]"/>
         <field description="Frame interrupt. This bit is set to one every millisecond when the VbusDebounced bit and the DCON bit are set. This bit can be used by software when handling isochronous endpoints. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@FRAME-INT"
                offset="[30]"/>
         <field description="Device status interrupt. This bit is set by HW when one of the bits in the Device Status Change register are set. Software can clear this bit by writing a one to it."
                format="hex0x"
                id="USB0@INTSTAT@DEV-INT"
                offset="[31]"/>
      </register>
      <register description="USB interrupt enable register" format="hex0x" id="USB0@INTEN"
                offset="0x24"
                size="4">
         <field description="If this bit is set and the corresponding USB interrupt status bit is set, a HW interrupt is generated on the interrupt line indicated by the corresponding USB interrupt routing bit."
                format="hex0x"
                id="USB0@INTEN@EP-INT-EN"
                offset="[9:0]"/>
         <field description="If this bit is set and the corresponding USB interrupt status bit is set, a HW interrupt is generated on the interrupt line indicated by the corresponding USB interrupt routing bit."
                format="hex0x"
                id="USB0@INTEN@FRAME-INT-EN"
                offset="[30]"/>
         <field description="If this bit is set and the corresponding USB interrupt status bit is set, a HW interrupt is generated on the interrupt line indicated by the corresponding USB interrupt routing bit."
                format="hex0x"
                id="USB0@INTEN@DEV-INT-EN"
                offset="[31]"/>
      </register>
      <register description="USB set interrupt status register" format="hex0x"
                id="USB0@INTSETSTAT"
                offset="0x28"
                size="4">
         <field description="If software writes a one to one of these bits, the corresponding USB interrupt status bit is set. When this register is read, the same value as the USB interrupt status register is returned."
                format="hex0x"
                id="USB0@INTSETSTAT@EP-SET-INT"
                offset="[9:0]"/>
         <field description="If software writes a one to one of these bits, the corresponding USB interrupt status bit is set. When this register is read, the same value as the USB interrupt status register is returned."
                format="hex0x"
                id="USB0@INTSETSTAT@FRAME-SET-INT"
                offset="[30]"/>
         <field description="If software writes a one to one of these bits, the corresponding USB interrupt status bit is set. When this register is read, the same value as the USB interrupt status register is returned."
                format="hex0x"
                id="USB0@INTSETSTAT@DEV-SET-INT"
                offset="[31]"/>
      </register>
      <register description="USB Endpoint toggle register" format="hex0x" id="USB0@EPTOGGLE"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="Endpoint data toggle: This field indicates the current value of the data toggle for the corresponding endpoint."
                format="hex0x"
                id="USB0@EPTOGGLE@TOGGLE"
                offset="[9:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x SCTimer/PWM (SCT)" id="SCT0" size="0x800">
      <register description="SCT configuration register" format="hex0x" id="SCT0@CONFIG"
                offset="0x0"
                size="4">
         <field description="SCT operation" format="enum" enum="d1e50082"
                id="SCT0@CONFIG@UNIFY"
                offset="[0]"/>
         <field description="SCT clock mode" format="enum" enum="d1e50128"
                id="SCT0@CONFIG@CLKMODE"
                offset="[2:1]"/>
         <field description="SCT clock select. The specific functionality of the designated input/edge is dependent on the CLKMODE bit selection in this register."
                format="enum"
                enum="d1e50198"
                id="SCT0@CONFIG@CKSEL"
                offset="[6:3]"/>
         <field description="A 1 in this bit prevents the lower match registers from being reloaded from their respective reload registers. Setting this bit eliminates the need to write to the reload registers MATCHREL if the match values are fixed. Software can write to set or clear this bit at any time. This bit applies to both the higher and lower registers when the UNIFY bit is set."
                format="hex0x"
                id="SCT0@CONFIG@NORELAOD-L"
                offset="[7]"/>
         <field description="A 1 in this bit prevents the higher match registers from being reloaded from their respective reload registers. Setting this bit eliminates the need to write to the reload registers MATCHREL if the match values are fixed. Software can write to set or clear this bit at any time. This bit is not used when the UNIFY bit is set."
                format="hex0x"
                id="SCT0@CONFIG@NORELOAD-H"
                offset="[8]"/>
         <field description="Synchronization for input N (bit 9 = input 0, bit 10 = input 1,, bit 12 = input 3); all other bits are reserved. A 1 in one of these bits subjects the corresponding input to synchronization to the SCT clock, before it is used to create an event. If an input is known to already be synchronous to the SCT clock, this bit may be set to 0 for faster input response. (Note: The SCT clock is the system clock for CKMODEs 0-2. It is the selected, asynchronous SCT input clock for CKMODE3). Note that the INSYNC field only affects inputs used for event generation. It does not apply to the clock input specified in the CKSEL field."
                format="hex0x"
                id="SCT0@CONFIG@INSYNC"
                offset="[12:9]"/>
         <field description="A one in this bit causes a match on match register 0 to be treated as a de-facto LIMIT condition without the need to define an associated event. As with any LIMIT event, this automatic limit causes the counter to be cleared to zero in unidirectional mode or to change the direction of count in bi-directional mode. Software can write to set or clear this bit at any time. This bit applies to both the higher and lower registers when the UNIFY bit is set."
                format="hex0x"
                id="SCT0@CONFIG@AUTOLIMIT-L"
                offset="[17]"/>
         <field description="A one in this bit will cause a match on match register 0 to be treated as a de-facto LIMIT condition without the need to define an associated event. As with any LIMIT event, this automatic limit causes the counter to be cleared to zero in unidirectional mode or to change the direction of count in bi-directional mode. Software can write to set or clear this bit at any time. This bit is not used when the UNIFY bit is set."
                format="hex0x"
                id="SCT0@CONFIG@AUTOLIMIT-H"
                offset="[18]"/>
      </register>
      <register description="SCT control register" format="hex0x" id="SCT0@CTRL" offset="0x4"
                size="4">
         <field description="This bit is 1 when the L or unified counter is counting down. Hardware sets this bit when the counter is counting up, counter limit occurs, and BIDIR = 1.Hardware clears this bit when the counter is counting down and a limit condition occurs or when the counter reaches 0."
                format="hex0x"
                id="SCT0@CTRL@DOWN-L"
                offset="[0]"/>
         <field description="When this bit is 1 and HALT is 0, the L or unified counter does not run, but I/O events related to the counter can occur. If a designated start event occurs, this bit is cleared and counting resumes."
                format="hex0x"
                id="SCT0@CTRL@STOP-L"
                offset="[1]"/>
         <field description="When this bit is 1, the L or unified counter does not run and no events can occur. A reset sets this bit. When the HALT_L bit is one, the STOP_L bit is cleared. It is possible to remove the halt condition while keeping the SCT in the stop condition (not running) with a single write to this register to simultaneously clear the HALT bit and set the STOP bit. Once set, only software can clear this bit to restore counter operation. This bit is set on reset."
                format="hex0x"
                id="SCT0@CTRL@HALT-L"
                offset="[2]"/>
         <field description="Writing a 1 to this bit clears the L or unified counter. This bit always reads as 0."
                format="hex0x"
                id="SCT0@CTRL@CLRCTR-L"
                offset="[3]"/>
         <field description="L or unified counter direction select" format="enum"
                enum="d1e50508"
                id="SCT0@CTRL@BIDIR-L"
                offset="[4]"/>
         <field description="Specifies the factor by which the SCT clock is prescaled to produce the L or unified counter clock. The counter clock is clocked at the rate of the SCT clock divided by PRE_L+1. Clear the counter (by writing a 1 to the CLRCTR bit) whenever changing the PRE value."
                format="hex0x"
                id="SCT0@CTRL@PRE-L"
                offset="[12:5]"/>
         <field description="This bit is 1 when the H counter is counting down. Hardware sets this bit when the counter is counting, a counter limit condition occurs, and BIDIR is 1. Hardware clears this bit when the counter is counting down and a limit condition occurs or when the counter reaches 0."
                format="hex0x"
                id="SCT0@CTRL@DOWN-H"
                offset="[16]"/>
         <field description="When this bit is 1 and HALT is 0, the H counter does not, run but I/O events related to the counter can occur. If such an event matches the mask in the Start register, this bit is cleared and counting resumes."
                format="hex0x"
                id="SCT0@CTRL@STOP-H"
                offset="[17]"/>
         <field description="When this bit is 1, the H counter does not run and no events can occur. A reset sets this bit. When the HALT_H bit is one, the STOP_H bit is cleared. It is possible to remove the halt condition while keeping the SCT in the stop condition (not running) with a single write to this register to simultaneously clear the HALT bit and set the STOP bit. Once set, this bit can only be cleared by software to restore counter operation. This bit is set on reset."
                format="hex0x"
                id="SCT0@CTRL@HALT-H"
                offset="[18]"/>
         <field description="Writing a 1 to this bit clears the H counter. This bit always reads as 0."
                format="hex0x"
                id="SCT0@CTRL@CLRCTR-H"
                offset="[19]"/>
         <field description="Direction select" format="enum" enum="d1e50645"
                id="SCT0@CTRL@BIDIR-H"
                offset="[20]"/>
         <field description="Specifies the factor by which the SCT clock is prescaled to produce the H counter clock. The counter clock is clocked at the rate of the SCT clock divided by PRELH+1. Clear the counter (by writing a 1 to the CLRCTR bit) whenever changing the PRE value."
                format="hex0x"
                id="SCT0@CTRL@PRE-H"
                offset="[28:21]"/>
      </register>
      <register description="SCT limit event select register" format="hex0x" id="SCT0@LIMIT"
                offset="0x8"
                size="4">
         <field description="If bit n is one, event n is used as a counter limit for the L or unified counter (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@LIMIT@LIMMSK-L"
                offset="[15:0]"/>
         <field description="If bit n is one, event n is used as a counter limit for the H counter (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@LIMIT@LIMMSK-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT halt event select register" format="hex0x" id="SCT0@HALT"
                offset="0xc"
                size="4">
         <field description="If bit n is one, event n sets the HALT_L bit in the CTRL register (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@HALT@HALTMSK-L"
                offset="[15:0]"/>
         <field description="If bit n is one, event n sets the HALT_H bit in the CTRL register (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@HALT@HALTMSK-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT stop event select register" format="hex0x" id="SCT0@STOP"
                offset="0x10"
                size="4">
         <field description="If bit n is one, event n sets the STOP_L bit in the CTRL register (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@STOP@STOPMSK-L"
                offset="[15:0]"/>
         <field description="If bit n is one, event n sets the STOP_H bit in the CTRL register (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@STOP@STOPMSK-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT start event select register" format="hex0x" id="SCT0@START"
                offset="0x14"
                size="4">
         <field description="If bit n is one, event n clears the STOP_L bit in the CTRL register (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@START@STARTMSK-L"
                offset="[15:0]"/>
         <field description="If bit n is one, event n clears the STOP_H bit in the CTRL register (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@START@STARTMSK-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT counter register" format="hex0x" id="SCT0@COUNT" offset="0x40"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit L counter value. When UNIFY = 1, read or write the lower 16 bits of the 32-bit unified counter."
                format="hex0x"
                id="SCT0@COUNT@CTR-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit H counter value. When UNIFY = 1, read or write the upper 16 bits of the 32-bit unified counter."
                format="hex0x"
                id="SCT0@COUNT@CTR-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT state register" format="hex0x" id="SCT0@STATE" offset="0x44"
                size="4">
         <field description="State variable." format="hex0x" id="SCT0@STATE@STATE-L"
                offset="[4:0]"/>
         <field description="State variable." format="hex0x" id="SCT0@STATE@STATE-H"
                offset="[20:16]"/>
      </register>
      <register description="SCT input register" format="hex0x" id="SCT0@INPUT" offset="0x48"
                readOnly="true"
                size="4">
         <field description="Input 0 state. Input 0 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN0"
                offset="[0]"/>
         <field description="Input 1 state. Input 1 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN1"
                offset="[1]"/>
         <field description="Input 2 state. Input 2 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN2"
                offset="[2]"/>
         <field description="Input 3 state. Input 3 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN3"
                offset="[3]"/>
         <field description="Input 4 state. Input 4 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN4"
                offset="[4]"/>
         <field description="Input 5 state. Input 5 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN5"
                offset="[5]"/>
         <field description="Input 6 state. Input 6 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN6"
                offset="[6]"/>
         <field description="Input 7 state. Input 7 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN7"
                offset="[7]"/>
         <field description="Input 8 state. Input 8 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN8"
                offset="[8]"/>
         <field description="Input 9 state. Input 9 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN9"
                offset="[9]"/>
         <field description="Input 10 state. Input 10 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN10"
                offset="[10]"/>
         <field description="Input 11 state. Input 11 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN11"
                offset="[11]"/>
         <field description="Input 12 state. Input 12 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN12"
                offset="[12]"/>
         <field description="Input 13 state. Input 13 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN13"
                offset="[13]"/>
         <field description="Input 14 state. Input 14 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN14"
                offset="[14]"/>
         <field description="Input 15 state. Input 15 state on the last SCT clock edge."
                format="hex0x"
                id="SCT0@INPUT@AIN15"
                offset="[15]"/>
         <field description="Input 0 state. Input 0 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN0"
                offset="[16]"/>
         <field description="Input 1 state. Input 1 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN1"
                offset="[17]"/>
         <field description="Input 2 state. Input 2 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN2"
                offset="[18]"/>
         <field description="Input 3 state. Input 3 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN3"
                offset="[19]"/>
         <field description="Input 4 state. Input 4 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN4"
                offset="[20]"/>
         <field description="Input 5 state. Input 5 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN5"
                offset="[21]"/>
         <field description="Input 6 state. Input 6 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN6"
                offset="[22]"/>
         <field description="Input 7 state. Input 7 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN7"
                offset="[23]"/>
         <field description="Input 8 state. Input 8 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN8"
                offset="[24]"/>
         <field description="Input 9 state. Input 9 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN9"
                offset="[25]"/>
         <field description="Input 10 state. Input 10 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN10"
                offset="[26]"/>
         <field description="Input 11 state. Input 11 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN11"
                offset="[27]"/>
         <field description="Input 12 state. Input 12 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN12"
                offset="[28]"/>
         <field description="Input 13 state. Input 13 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN13"
                offset="[29]"/>
         <field description="Input 14 state. Input 14 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN14"
                offset="[30]"/>
         <field description="Input 15 state. Input 15 state following the synchronization specified by INSYNC."
                format="hex0x"
                id="SCT0@INPUT@SIN15"
                offset="[31]"/>
      </register>
      <register description="SCT match/capture mode register" format="hex0x" id="SCT0@REGMODE"
                offset="0x4c"
                size="4">
         <field description="Each bit controls one match/capture register (register 0 = bit 0, register 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT. 0 = register operates as match register. 1 = register operates as capture register."
                format="hex0x"
                id="SCT0@REGMODE@REGMOD-L"
                offset="[15:0]"/>
         <field description="Each bit controls one match/capture register (register 0 = bit 16, register 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT. 0 = register operates as match registers. 1 = register operates as capture registers."
                format="hex0x"
                id="SCT0@REGMODE@REGMOD-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT output register" format="hex0x" id="SCT0@OUTPUT" offset="0x50"
                size="4">
         <field description="Writing a 1 to bit n forces the corresponding output HIGH. Writing a 0 forces the corresponding output LOW (output 0 = bit 0, output 1 = bit 1, etc.). The number of bits = number of outputs in this SCT."
                format="hex0x"
                id="SCT0@OUTPUT@OUT"
                offset="[15:0]"/>
      </register>
      <register description="SCT output counter direction control register" format="hex0x"
                id="SCT0@OUTPUTDIRCTRL"
                offset="0x54"
                size="4">
         <field description="Set/clear operation on output 0. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e51843"
                id="SCT0@OUTPUTDIRCTRL@SETCLR0"
                offset="[1:0]"/>
         <field description="Set/clear operation on output 1. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e51901"
                id="SCT0@OUTPUTDIRCTRL@SETCLR1"
                offset="[3:2]"/>
         <field description="Set/clear operation on output 2. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e51959"
                id="SCT0@OUTPUTDIRCTRL@SETCLR2"
                offset="[5:4]"/>
         <field description="Set/clear operation on output 3. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52017"
                id="SCT0@OUTPUTDIRCTRL@SETCLR3"
                offset="[7:6]"/>
         <field description="Set/clear operation on output 4. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52075"
                id="SCT0@OUTPUTDIRCTRL@SETCLR4"
                offset="[9:8]"/>
         <field description="Set/clear operation on output 5. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52134"
                id="SCT0@OUTPUTDIRCTRL@SETCLR5"
                offset="[11:10]"/>
         <field description="Set/clear operation on output 6. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52192"
                id="SCT0@OUTPUTDIRCTRL@SETCLR6"
                offset="[13:12]"/>
         <field description="Set/clear operation on output 7. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52250"
                id="SCT0@OUTPUTDIRCTRL@SETCLR7"
                offset="[15:14]"/>
         <field description="Set/clear operation on output 8. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52308"
                id="SCT0@OUTPUTDIRCTRL@SETCLR8"
                offset="[17:16]"/>
         <field description="Set/clear operation on output 9. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52366"
                id="SCT0@OUTPUTDIRCTRL@SETCLR9"
                offset="[19:18]"/>
         <field description="Set/clear operation on output 10. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52424"
                id="SCT0@OUTPUTDIRCTRL@SETCLR10"
                offset="[21:20]"/>
         <field description="Set/clear operation on output 11. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52483"
                id="SCT0@OUTPUTDIRCTRL@SETCLR11"
                offset="[23:22]"/>
         <field description="Set/clear operation on output 12. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52541"
                id="SCT0@OUTPUTDIRCTRL@SETCLR12"
                offset="[25:24]"/>
         <field description="Set/clear operation on output 13. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52599"
                id="SCT0@OUTPUTDIRCTRL@SETCLR13"
                offset="[27:26]"/>
         <field description="Set/clear operation on output 14. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52657"
                id="SCT0@OUTPUTDIRCTRL@SETCLR14"
                offset="[29:28]"/>
         <field description="Set/clear operation on output 15. Value 0x3 is reserved. Do not program this value."
                format="enum"
                enum="d1e52715"
                id="SCT0@OUTPUTDIRCTRL@SETCLR15"
                offset="[31:30]"/>
      </register>
      <register description="SCT conflict resolution register" format="hex0x" id="SCT0@RES"
                offset="0x58"
                size="4">
         <field description="Effect of simultaneous set and clear on output 0." format="enum"
                enum="d1e52801"
                id="SCT0@RES@O0RES"
                offset="[1:0]"/>
         <field description="Effect of simultaneous set and clear on output 1." format="enum"
                enum="d1e52871"
                id="SCT0@RES@O1RES"
                offset="[3:2]"/>
         <field description="Effect of simultaneous set and clear on output 2." format="enum"
                enum="d1e52941"
                id="SCT0@RES@O2RES"
                offset="[5:4]"/>
         <field description="Effect of simultaneous set and clear on output 3." format="enum"
                enum="d1e53011"
                id="SCT0@RES@O3RES"
                offset="[7:6]"/>
         <field description="Effect of simultaneous set and clear on output 4." format="enum"
                enum="d1e53081"
                id="SCT0@RES@O4RES"
                offset="[9:8]"/>
         <field description="Effect of simultaneous set and clear on output 5." format="enum"
                enum="d1e53152"
                id="SCT0@RES@O5RES"
                offset="[11:10]"/>
         <field description="Effect of simultaneous set and clear on output 6." format="enum"
                enum="d1e53222"
                id="SCT0@RES@O6RES"
                offset="[13:12]"/>
         <field description="Effect of simultaneous set and clear on output 7." format="enum"
                enum="d1e53292"
                id="SCT0@RES@O7RES"
                offset="[15:14]"/>
         <field description="Effect of simultaneous set and clear on output 8." format="enum"
                enum="d1e53362"
                id="SCT0@RES@O8RES"
                offset="[17:16]"/>
         <field description="Effect of simultaneous set and clear on output 9." format="enum"
                enum="d1e53432"
                id="SCT0@RES@O9RES"
                offset="[19:18]"/>
         <field description="Effect of simultaneous set and clear on output 10." format="enum"
                enum="d1e53502"
                id="SCT0@RES@O10RES"
                offset="[21:20]"/>
         <field description="Effect of simultaneous set and clear on output 11." format="enum"
                enum="d1e53573"
                id="SCT0@RES@O11RES"
                offset="[23:22]"/>
         <field description="Effect of simultaneous set and clear on output 12." format="enum"
                enum="d1e53643"
                id="SCT0@RES@O12RES"
                offset="[25:24]"/>
         <field description="Effect of simultaneous set and clear on output 13." format="enum"
                enum="d1e53713"
                id="SCT0@RES@O13RES"
                offset="[27:26]"/>
         <field description="Effect of simultaneous set and clear on output 14." format="enum"
                enum="d1e53783"
                id="SCT0@RES@O14RES"
                offset="[29:28]"/>
         <field description="Effect of simultaneous set and clear on output 15." format="enum"
                enum="d1e53853"
                id="SCT0@RES@O15RES"
                offset="[31:30]"/>
      </register>
      <register description="SCT DMA request 0 register" format="hex0x" id="SCT0@DMA0REQUEST"
                offset="0x5c"
                size="4">
         <field description="If bit n is one, event n triggers DMA request 0 (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@DMA0REQUEST@DEV-0"
                offset="[15:0]"/>
         <field description="A 1 in this bit triggers DMA request 0 when it loads the MATCH_L/Unified registers from the RELOAD_L/Unified registers."
                format="hex0x"
                id="SCT0@DMA0REQUEST@DRL0"
                offset="[30]"/>
         <field description="This read-only bit indicates the state of DMA Request 0. Note that if the related DMA channel is enabled and properly set up, it is unlikely that software will see this flag, it will be cleared rapidly by the DMA service. The flag remaining set could point to an issue with DMA setup."
                format="hex0x"
                id="SCT0@DMA0REQUEST@DRQ0"
                offset="[31]"/>
      </register>
      <register description="SCT DMA request 1 register" format="hex0x" id="SCT0@DMA1REQUEST"
                offset="0x60"
                size="4">
         <field description="If bit n is one, event n triggers DMA request 1 (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@DMA1REQUEST@DEV-1"
                offset="[15:0]"/>
         <field description="A 1 in this bit triggers DMA request 1 when it loads the Match L/Unified registers from the Reload L/Unified registers."
                format="hex0x"
                id="SCT0@DMA1REQUEST@DRL1"
                offset="[30]"/>
         <field description="This read-only bit indicates the state of DMA Request 1. Note that if the related DMA channel is enabled and properly set up, it is unlikely that software will see this flag, it will be cleared rapidly by the DMA service. The flag remaining set could point to an issue with DMA setup."
                format="hex0x"
                id="SCT0@DMA1REQUEST@DRQ1"
                offset="[31]"/>
      </register>
      <register description="SCT event interrupt enable register" format="hex0x" id="SCT0@EVEN"
                offset="0xf0"
                size="4">
         <field description="The SCT requests an interrupt when bit n of this register and the event flag register are both one (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@EVEN@IEN"
                offset="[15:0]"/>
      </register>
      <register description="SCT event flag register" format="hex0x" id="SCT0@EVFLAG"
                offset="0xf4"
                size="4">
         <field description="Bit n is one if event n has occurred since reset or a 1 was last written to this bit (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of events in this SCT."
                format="hex0x"
                id="SCT0@EVFLAG@FLAG"
                offset="[15:0]"/>
      </register>
      <register description="SCT conflict interrupt enable register" format="hex0x"
                id="SCT0@CONEN"
                offset="0xf8"
                size="4">
         <field description="The SCT requests an interrupt when bit n of this register and the SCT conflict flag register are both one (output 0 = bit 0, output 1 = bit 1, etc.). The number of bits = number of outputs in this SCT."
                format="hex0x"
                id="SCT0@CONEN@NCEN"
                offset="[15:0]"/>
      </register>
      <register description="SCT conflict flag register" format="hex0x" id="SCT0@CONFLAG"
                offset="0xfc"
                size="4">
         <field description="Bit n is one if a no-change conflict event occurred on output n since reset or a 1 was last written to this bit (output 0 = bit 0, output 1 = bit 1, etc.). The number of bits = number of outputs in this SCT."
                format="hex0x"
                id="SCT0@CONFLAG@NCFLAG"
                offset="[15:0]"/>
         <field description="The most recent bus error from this SCT involved writing CTR L/Unified, STATE L/Unified, MATCH L/Unified, or the Output register when the L/U counter was not halted. A word write to certain L and H registers can be half successful and half unsuccessful."
                format="hex0x"
                id="SCT0@CONFLAG@BUSERRL"
                offset="[30]"/>
         <field description="The most recent bus error from this SCT involved writing CTR H, STATE H, MATCH H, or the Output register when the H counter was not halted."
                format="hex0x"
                id="SCT0@CONFLAG@BUSERRH"
                offset="[31]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP0"
                offset="0x100"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP0@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP0@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP1"
                offset="0x104"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP1@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP1@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP2"
                offset="0x108"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP2@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP2@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP3"
                offset="0x10c"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP3@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP3@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP4"
                offset="0x110"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP4@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP4@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP5"
                offset="0x114"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP5@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP5@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP6"
                offset="0x118"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP6@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP6@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP7"
                offset="0x11c"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP7@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP7@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP8"
                offset="0x120"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP8@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP8@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture register of capture channel" format="hex0x"
                id="SCT0@SCTCAP9"
                offset="0x124"
                size="4">
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the lower 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP9@CAPn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read the 16-bit counter value at which this register was last captured. When UNIFY = 1, read the upper 16 bits of the 32-bit value at which this register was last captured."
                format="hex0x"
                id="SCT0@SCTCAP9@CAPn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH0"
                offset="0x100"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH0@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH0@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH1"
                offset="0x104"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH1@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH1@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH2"
                offset="0x108"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH2@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH2@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH3"
                offset="0x10c"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH3@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH3@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH4"
                offset="0x110"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH4@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH4@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH5"
                offset="0x114"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH5@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH5@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH6"
                offset="0x118"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH6@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH6@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH7"
                offset="0x11c"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH7@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH7@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH8"
                offset="0x120"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH8@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH8@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match value register of match channels" format="hex0x"
                id="SCT0@SCTMATCH9"
                offset="0x124"
                size="4">
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the L counter. When UNIFY = 1, read or write the lower 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH9@MATCHn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, read or write the 16-bit value to be compared to the H counter. When UNIFY = 1, read or write the upper 16 bits of the 32-bit value to be compared to the unified counter."
                format="hex0x"
                id="SCT0@SCTMATCH9@MATCHn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL0"
                offset="0x200"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL0@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL0@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL1"
                offset="0x204"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL1@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL1@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL2"
                offset="0x208"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL2@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL2@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL3"
                offset="0x20c"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL3@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL3@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL4"
                offset="0x210"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL4@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL4@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL5"
                offset="0x214"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL5@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL5@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL6"
                offset="0x218"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL6@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL6@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL7"
                offset="0x21c"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL7@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL7@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL8"
                offset="0x220"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL8@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL8@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT capture control register" format="hex0x" id="SCT0@SCTCAPCTRL9"
                offset="0x224"
                size="4">
         <field description="If bit m is one, event m causes the CAPn_L (UNIFY = 0) or the CAPn (UNIFY = 1) register to be loaded (event 0 = bit 0, event 1 = bit 1, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL9@CAPCONn-L"
                offset="[15:0]"/>
         <field description="If bit m is one, event m causes the CAPn_H (UNIFY = 0) register to be loaded (event 0 = bit 16, event 1 = bit 17, etc.). The number of bits = number of match/captures in this SCT."
                format="hex0x"
                id="SCT0@SCTCAPCTRL9@CAPCONn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL0"
                offset="0x200"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL0@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL0@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL1"
                offset="0x204"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL1@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL1@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL2"
                offset="0x208"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL2@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL2@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL3"
                offset="0x20c"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL3@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL3@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL4"
                offset="0x210"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL4@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL4@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL5"
                offset="0x214"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL5@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL5@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL6"
                offset="0x218"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL6@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL6@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL7"
                offset="0x21c"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL7@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL7@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL8"
                offset="0x220"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL8@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL8@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT match reload value register" format="hex0x"
                id="SCT0@SCTMATCHREL9"
                offset="0x224"
                size="4">
         <field description="When UNIFY = 0, specifies the 16-bit value to be loaded into the MATCHn_L register. When UNIFY = 1, specifies the lower 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL9@RELOADn-L"
                offset="[15:0]"/>
         <field description="When UNIFY = 0, specifies the 16-bit to be loaded into the MATCHn_H register. When UNIFY = 1, specifies the upper 16 bits of the 32-bit value to be loaded into the MATCHn register."
                format="hex0x"
                id="SCT0@SCTMATCHREL9@RELOADn-H"
                offset="[31:16]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT0-STATE"
                offset="0x300"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT0-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT0-CTRL"
                offset="0x304"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT0-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT0-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT0-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT0-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT0-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT0-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT0-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT0-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT0-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT0-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT1-STATE"
                offset="0x308"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT1-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT1-CTRL"
                offset="0x30c"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT1-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT1-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT1-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT1-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT1-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT1-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT1-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT1-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT1-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT1-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT2-STATE"
                offset="0x310"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT2-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT2-CTRL"
                offset="0x314"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT2-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT2-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT2-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT2-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT2-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT2-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT2-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT2-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT2-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT2-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT3-STATE"
                offset="0x318"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT3-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT3-CTRL"
                offset="0x31c"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT3-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT3-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT3-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT3-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT3-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT3-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT3-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT3-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT3-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT3-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT4-STATE"
                offset="0x320"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT4-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT4-CTRL"
                offset="0x324"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT4-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT4-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT4-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT4-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT4-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT4-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT4-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT4-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT4-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT4-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT5-STATE"
                offset="0x328"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT5-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT5-CTRL"
                offset="0x32c"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT5-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT5-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT5-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT5-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT5-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT5-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT5-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT5-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT5-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT5-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT6-STATE"
                offset="0x330"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT6-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT6-CTRL"
                offset="0x334"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT6-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT6-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT6-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT6-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT6-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT6-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT6-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT6-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT6-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT6-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT7-STATE"
                offset="0x338"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT7-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT7-CTRL"
                offset="0x33c"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT7-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT7-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT7-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT7-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT7-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT7-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT7-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT7-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT7-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT7-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT8-STATE"
                offset="0x340"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT8-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT8-CTRL"
                offset="0x344"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT8-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT8-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT8-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT8-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT8-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT8-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT8-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT8-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT8-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT8-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT event state register 0" format="hex0x" id="SCT0@EVENT9-STATE"
                offset="0x348"
                size="4">
         <field description="If bit m is one, event n happens in state m of the counter selected by the HEVENT bit (n = event number, m = state number; state 0 = bit 0, state 1= bit 1, etc.). The number of bits = number of states in this SCT."
                format="hex0x"
                id="SCT0@EVENT9-STATE@STATEMSKn"
                offset="[15:0]"/>
      </register>
      <register description="SCT event control register 0" format="hex0x" id="SCT0@EVENT9-CTRL"
                offset="0x34c"
                size="4">
         <field description="Selects the Match register associated with this event (if any). A match can occur only when the counter selected by the HEVENT bit is running."
                format="hex0x"
                id="SCT0@EVENT9-CTRL@MATCHSEL"
                offset="[3:0]"/>
         <field description="Select L/H counter. Do not set this bit if UNIFY = 1."
                format="enum"
                enum="d1e54711"
                id="SCT0@EVENT9-CTRL@HEVENT"
                offset="[4]"/>
         <field description="Input/output select" format="enum" enum="d1e54757"
                id="SCT0@EVENT9-CTRL@OUTSEL"
                offset="[5]"/>
         <field description="Selects the input or output signal number associated with this event (if any). Do not select an input in this register if CKMODE is 1x. In this case the clock input is an implicit ingredient of every event."
                format="hex0x"
                id="SCT0@EVENT9-CTRL@IOSEL"
                offset="[9:6]"/>
         <field description="Selects the I/O condition for event n. (The detection of edges on outputs lag the conditions that switch the outputs by one SCT clock). In order to guarantee proper edge/state detection, an input must have a minimum pulse width of at least one SCT clock period ."
                format="enum"
                enum="d1e54821"
                id="SCT0@EVENT9-CTRL@IOCOND"
                offset="[11:10]"/>
         <field description="Selects how the specified match and I/O condition are used and combined."
                format="enum"
                enum="d1e54892"
                id="SCT0@EVENT9-CTRL@COMBMODE"
                offset="[13:12]"/>
         <field description="This bit controls how the STATEV value modifies the state selected by HEVENT when this event is the highest-numbered event occurring for that state."
                format="enum"
                enum="d1e54962"
                id="SCT0@EVENT9-CTRL@STATELD"
                offset="[14]"/>
         <field description="This value is loaded into or added to the state selected by HEVENT, depending on STATELD, when this event is the highest-numbered event occurring for that state. If STATELD and STATEV are both zero, there is no change to the STATE value."
                format="hex0x"
                id="SCT0@EVENT9-CTRL@STATEV"
                offset="[19:15]"/>
         <field description="If this bit is one and the COMBMODE field specifies a match component to the triggering of this event, then a match is considered to be active whenever the counter value is GREATER THAN OR EQUAL TO the value specified in the match register when counting up, LESS THEN OR EQUAL TO the match value when counting down. If this bit is zero, a match is only be active during the cycle when the counter is equal to the match value."
                format="hex0x"
                id="SCT0@EVENT9-CTRL@MATCHMEM"
                offset="[20]"/>
         <field description="Direction qualifier for event generation. This field only applies when the counters are operating in BIDIR mode. If BIDIR = 0, the SCT ignores this field. Value 0x3 is reserved."
                format="enum"
                enum="d1e55044"
                id="SCT0@EVENT9-CTRL@DIRECTION"
                offset="[22:21]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT0-SET"
                offset="0x500"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT0-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT0-CLR"
                offset="0x504"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT0-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT1-SET"
                offset="0x508"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT1-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT1-CLR"
                offset="0x50c"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT1-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT2-SET"
                offset="0x510"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT2-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT2-CLR"
                offset="0x514"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT2-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT3-SET"
                offset="0x518"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT3-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT3-CLR"
                offset="0x51c"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT3-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT4-SET"
                offset="0x520"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT4-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT4-CLR"
                offset="0x524"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT4-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT5-SET"
                offset="0x528"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT5-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT5-CLR"
                offset="0x52c"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT5-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT6-SET"
                offset="0x530"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT6-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT6-CLR"
                offset="0x534"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT6-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 set register" format="hex0x" id="SCT0@OUT7-SET"
                offset="0x538"
                size="4">
         <field description="A 1 in bit m selects event m to set output n (or clear it if SETCLRn = 0x1 or 0x2) output 0 = bit 0, output 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT7-SET@SET"
                offset="[15:0]"/>
      </register>
      <register description="SCT output 0 clear register" format="hex0x" id="SCT0@OUT7-CLR"
                offset="0x53c"
                size="4">
         <field description="A 1 in bit m selects event m to clear output n (or set it if SETCLRn = 0x1 or 0x2) event 0 = bit 0, event 1 = bit 1, etc. The number of bits = number of events in this SCT. When the counter is used in bi-directional mode, it is possible to reverse the action specified by the output set and clear registers when counting down, See the OUTPUTCTRL register."
                format="hex0x"
                id="SCT0@OUT7-CLR@CLR"
                offset="[15:0]"/>
      </register>
      <register description="Reserved" format="hex0x" id="SCT0@MODULECONTENT" offset="0x7fc"
                size="4"/>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM0"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM1"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM2"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM3"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM4"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM5"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM6"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Flexcomm serial communication"
               id="FLEXCOMM7"
               size="0x1000">
      <register description="Peripheral Select and Flexcomm ID register." format="hex0x"
                id="FLEXCOMM0@PSELID"
                offset="0xff8"
                size="4">
         <field description="Peripheral Select. This field is writable by software."
                format="enum"
                enum="d1e55310"
                id="FLEXCOMM0@PSELID@PERSEL"
                offset="[2:0]"/>
         <field description="Lock the peripheral select. This field is writable by software."
                format="enum"
                enum="d1e55405"
                id="FLEXCOMM0@PSELID@LOCK"
                offset="[3]"/>
         <field description="USART present indicator. This field is Read-only." format="enum"
                enum="d1e55451"
                id="FLEXCOMM0@PSELID@USARTPRESENT"
                offset="[4]"/>
         <field description="SPI present indicator. This field is Read-only." format="enum"
                enum="d1e55497"
                id="FLEXCOMM0@PSELID@SPIPRESENT"
                offset="[5]"/>
         <field description="I2C present indicator. This field is Read-only." format="enum"
                enum="d1e55543"
                id="FLEXCOMM0@PSELID@I2CPRESENT"
                offset="[6]"/>
         <field description="I 2S present indicator. This field is Read-only." format="enum"
                enum="d1e55590"
                id="FLEXCOMM0@PSELID@I2SPRESENT"
                offset="[7]"/>
         <field description="Flexcomm ID." format="hex0x" id="FLEXCOMM0@PSELID@ID"
                offset="[31:12]"/>
      </register>
      <register description="Peripheral identification register." format="hex0x"
                id="FLEXCOMM0@PID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Minor revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Minor-Rev"
                offset="[11:8]"/>
         <field description="Major revision of module implementation." format="hex0x"
                id="FLEXCOMM0@PID@Major-Rev"
                offset="[15:12]"/>
         <field description="Module identifier for the selected function." format="hex0x"
                id="FLEXCOMM0@PID@ID"
                offset="[31:16]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C0" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C1" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C2" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C3" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C4" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C5" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C6" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2C-bus interfaces" id="I2C7" size="0x884">
      <register description="Configuration for shared functions." format="hex0x" id="I2C0@CFG"
                offset="0x800"
                size="4">
         <field description="Master Enable. When disabled, configurations settings for the Master function are not changed, but the Master function is internally reset."
                format="enum"
                enum="d1e56070"
                id="I2C0@CFG@MSTEN"
                offset="[0]"/>
         <field description="Slave Enable. When disabled, configurations settings for the Slave function are not changed, but the Slave function is internally reset."
                format="enum"
                enum="d1e56116"
                id="I2C0@CFG@SLVEN"
                offset="[1]"/>
         <field description="Monitor Enable. When disabled, configurations settings for the Monitor function are not changed, but the Monitor function is internally reset."
                format="enum"
                enum="d1e56162"
                id="I2C0@CFG@MONEN"
                offset="[2]"/>
         <field description="I2C bus Time-out Enable. When disabled, the time-out function is internally reset."
                format="enum"
                enum="d1e56208"
                id="I2C0@CFG@TIMEOUTEN"
                offset="[3]"/>
         <field description="Monitor function Clock Stretching." format="enum" enum="d1e56254"
                id="I2C0@CFG@MONCLKSTR"
                offset="[4]"/>
         <field description="High-speed mode Capable enable. Since High Speed mode alters the way I2C pins drive and filter, as well as the timing for certain I2C signalling, enabling High-speed mode applies to all functions: Master, Slave, and Monitor."
                format="enum"
                enum="d1e56301"
                id="I2C0@CFG@HSCAPABLE"
                offset="[5]"/>
      </register>
      <register description="Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@STAT"
                offset="0x804"
                size="4">
         <field description="Master Pending. Indicates that the Master is waiting to continue communication on the I2C-bus (pending) or is idle. When the master is pending, the MSTSTATE bits indicate what type of software service if any the master expects. This flag will cause an interrupt when set if, enabled via the INTENSET register. The MSTPENDING flag is not set when the DMA is handling an event (if the MSTDMA bit in the MSTCTL register is set). If the master is in the idle state, and no communication is needed, mask this interrupt."
                format="enum"
                enum="d1e56375"
                id="I2C0@STAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master State code. The master state code reflects the master state when the MSTPENDING bit is set, that is the master is pending or in the idle state. Each value of this field indicates a specific required service for the Master function. All other values are reserved. See Table 400 for details of state values and appropriate responses."
                format="enum"
                enum="d1e56421"
                id="I2C0@STAT@MSTSTATE"
                offset="[3:1]"/>
         <field description="Master Arbitration Loss flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56503"
                id="I2C0@STAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag. This flag can be cleared by software writing a 1 to this bit. It is also cleared automatically a 1 is written to MSTCONTINUE."
                format="enum"
                enum="d1e56549"
                id="I2C0@STAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending. Indicates that the Slave function is waiting to continue communication on the I2C-bus and needs software service. This flag will cause an interrupt when set if enabled via INTENSET. The SLVPENDING flag is not set when the DMA is handling an event (if the SLVDMA bit in the SLVCTL register is set). The SLVPENDING flag is read-only and is automatically cleared when a 1 is written to the SLVCONTINUE bit in the SLVCTL register. The point in time when SlvPending is set depends on whether the I2C interface is in HSCAPABLE mode. See Section 25.7.2.2.2. When the I2C interface is configured to be HSCAPABLE, HS master codes are detected automatically. Due to the requirements of the HS I2C specification, slave addresses must also be detected automatically, since the address must be acknowledged before the clock can be stretched."
                format="enum"
                enum="d1e56595"
                id="I2C0@STAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave State code. Each value of this field indicates a specific required service for the Slave function. All other values are reserved. See Table 401 for state values and actions. note that the occurrence of some states and how they are handled are affected by DMA mode and Automatic Operation modes."
                format="enum"
                enum="d1e56642"
                id="I2C0@STAT@SLVSTATE"
                offset="[10:9]"/>
         <field description="Slave Not Stretching. Indicates when the slave function is stretching the I2C clock. This is needed in order to gracefully invoke Deep Sleep or Power-down modes during slave operation. This read-only flag reflects the slave function status in real time."
                format="enum"
                enum="d1e56700"
                id="I2C0@STAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave address match Index. This field is valid when the I2C slave function has been selected by receiving an address that matches one of the slave addresses defined by any enabled slave address registers, and provides an identification of the address that was matched. It is possible that more than one address could be matched, but only one match can be reported here."
                format="enum"
                enum="d1e56746"
                id="I2C0@STAT@SLVIDX"
                offset="[13:12]"/>
         <field description="Slave selected flag. SLVSEL is set after an address match when software tells the Slave function to acknowledge the address, or when the address has been automatically acknowledged. It is cleared when another address cycle presents an address that does not match an enabled address on the Slave function, when slave software decides to NACK a matched address, when there is a Stop detected on the bus, when the master NACKs slave data, and in some combinations of Automatic Operation. SLVSEL is not cleared if software NACKs data."
                format="enum"
                enum="d1e56816"
                id="I2C0@STAT@SLVSEL"
                offset="[14]"/>
         <field description="Slave Deselected flag. This flag will cause an interrupt when set if enabled via INTENSET. This flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e56862"
                id="I2C0@STAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready. This flag is cleared when the MONRXDAT register is read."
                format="enum"
                enum="d1e56908"
                id="I2C0@STAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="enum" enum="d1e56955"
                id="I2C0@STAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Active flag. Indicates when the Monitor function considers the I 2C bus to be active. Active is defined here as when some Master is on the bus: a bus Start has occurred more recently than a bus Stop."
                format="enum"
                enum="d1e57001"
                id="I2C0@STAT@MONACTIVE"
                offset="[18]"/>
         <field description="Monitor Idle flag. This flag is set when the Monitor function sees the I2C bus change from active to inactive. This can be used by software to decide when to process data accumulated by the Monitor function. This flag will cause an interrupt when set if enabled via the INTENSET register. The flag can be cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57047"
                id="I2C0@STAT@MONIDLE"
                offset="[19]"/>
         <field description="Event Time-out Interrupt flag. Indicates when the time between events has been longer than the time specified by the TIMEOUT register. Events include Start, Stop, and clock edges. The flag is cleared by writing a 1 to this bit. No time-out is created when the I2C-bus is idle."
                format="enum"
                enum="d1e57093"
                id="I2C0@STAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL Time-out Interrupt flag. Indicates when SCL has remained low longer than the time specific by the TIMEOUT register. The flag is cleared by writing a 1 to this bit."
                format="enum"
                enum="d1e57139"
                id="I2C0@STAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Set and read register." format="hex0x"
                id="I2C0@INTENSET"
                offset="0x808"
                size="4">
         <field description="Master Pending interrupt Enable." format="enum" enum="d1e57213"
                id="I2C0@INTENSET@MSTPENDINGEN"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt Enable." format="enum"
                enum="d1e57259"
                id="I2C0@INTENSET@MSTARBLOSSEN"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt Enable." format="enum"
                enum="d1e57305"
                id="I2C0@INTENSET@MSTSTSTPERREN"
                offset="[6]"/>
         <field description="Slave Pending interrupt Enable." format="enum" enum="d1e57351"
                id="I2C0@INTENSET@SLVPENDINGEN"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt Enable." format="enum"
                enum="d1e57397"
                id="I2C0@INTENSET@SLVNOTSTREN"
                offset="[11]"/>
         <field description="Slave Deselect interrupt Enable." format="enum" enum="d1e57444"
                id="I2C0@INTENSET@SLVDESELEN"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt Enable." format="enum"
                enum="d1e57490"
                id="I2C0@INTENSET@MONRDYEN"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt Enable." format="enum" enum="d1e57536"
                id="I2C0@INTENSET@MONOVEN"
                offset="[17]"/>
         <field description="Monitor Idle interrupt Enable." format="enum" enum="d1e57582"
                id="I2C0@INTENSET@MONIDLEEN"
                offset="[19]"/>
         <field description="Event time-out interrupt Enable." format="enum" enum="d1e57628"
                id="I2C0@INTENSET@EVENTTIMEOUTEN"
                offset="[24]"/>
         <field description="SCL time-out interrupt Enable." format="enum" enum="d1e57674"
                id="I2C0@INTENSET@SCLTIMEOUTEN"
                offset="[25]"/>
      </register>
      <register description="Interrupt Enable Clear register." format="hex0x"
                id="I2C0@INTENCLR"
                offset="0x80c"
                writeOnly="true"
                size="4">
         <field description="Master Pending interrupt clear. Writing 1 to this bit clears the corresponding bit in the INTENSET register if implemented."
                format="hex0x"
                id="I2C0@INTENCLR@MSTPENDINGCLR"
                offset="[0]"/>
         <field description="Master Arbitration Loss interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTARBLOSSCLR"
                offset="[4]"/>
         <field description="Master Start/Stop Error interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MSTSTSTPERRCLR"
                offset="[6]"/>
         <field description="Slave Pending interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVPENDINGCLR"
                offset="[8]"/>
         <field description="Slave Not Stretching interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVNOTSTRCLR"
                offset="[11]"/>
         <field description="Slave Deselect interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SLVDESELCLR"
                offset="[15]"/>
         <field description="Monitor data Ready interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONRDYCLR"
                offset="[16]"/>
         <field description="Monitor Overrun interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONOVCLR"
                offset="[17]"/>
         <field description="Monitor Idle interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@MONIDLECLR"
                offset="[19]"/>
         <field description="Event time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@EVENTTIMEOUTCLR"
                offset="[24]"/>
         <field description="SCL time-out interrupt clear." format="hex0x"
                id="I2C0@INTENCLR@SCLTIMEOUTCLR"
                offset="[25]"/>
      </register>
      <register description="Time-out value register." format="hex0x" id="I2C0@TIMEOUT"
                offset="0x810"
                size="4">
         <field description="Time-out time value, bottom four bits. These are hard-wired to 0xF. This gives a minimum time-out of 16 I2C function clocks and also a time-out resolution of 16 I2C function clocks."
                format="hex0x"
                id="I2C0@TIMEOUT@TOMIN"
                offset="[3:0]"/>
         <field description="Time-out time value. Specifies the time-out interval value in increments of 16 I 2C function clocks, as defined by the CLKDIV register. To change this value while I2C is in operation, disable all time-outs, write a new value to TIMEOUT, then re-enable time-outs. 0x000 = A time-out will occur after 16 counts of the I2C function clock. 0x001 = A time-out will occur after 32 counts of the I2C function clock. 0xFFF = A time-out will occur after 65,536 counts of the I2C function clock."
                format="hex0x"
                id="I2C0@TIMEOUT@TO"
                offset="[15:4]"/>
      </register>
      <register description="Clock pre-divider for the entire I2C interface. This determines what time increments are used for the MSTTIME register, and controls some timing of the Slave function."
                format="hex0x"
                id="I2C0@CLKDIV"
                offset="0x814"
                size="4">
         <field description="This field controls how the Flexcomm clock (FCLK) is used by the I2C functions that need an internal clock in order to operate. 0x0000 = FCLK is used directly by the I2C. 0x0001 = FCLK is divided by 2 before use. 0x0002 = FCLK is divided by 3 before use. 0xFFFF = FCLK is divided by 65,536 before use."
                format="hex0x"
                id="I2C0@CLKDIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt Status register for Master, Slave, and Monitor functions."
                format="hex0x"
                id="I2C0@INTSTAT"
                offset="0x818"
                readOnly="true"
                size="4">
         <field description="Master Pending." format="hex0x" id="I2C0@INTSTAT@MSTPENDING"
                offset="[0]"/>
         <field description="Master Arbitration Loss flag." format="hex0x"
                id="I2C0@INTSTAT@MSTARBLOSS"
                offset="[4]"/>
         <field description="Master Start/Stop Error flag." format="hex0x"
                id="I2C0@INTSTAT@MSTSTSTPERR"
                offset="[6]"/>
         <field description="Slave Pending." format="hex0x" id="I2C0@INTSTAT@SLVPENDING"
                offset="[8]"/>
         <field description="Slave Not Stretching status." format="hex0x"
                id="I2C0@INTSTAT@SLVNOTSTR"
                offset="[11]"/>
         <field description="Slave Deselected flag." format="hex0x" id="I2C0@INTSTAT@SLVDESEL"
                offset="[15]"/>
         <field description="Monitor Ready." format="hex0x" id="I2C0@INTSTAT@MONRDY"
                offset="[16]"/>
         <field description="Monitor Overflow flag." format="hex0x" id="I2C0@INTSTAT@MONOV"
                offset="[17]"/>
         <field description="Monitor Idle flag." format="hex0x" id="I2C0@INTSTAT@MONIDLE"
                offset="[19]"/>
         <field description="Event time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@EVENTTIMEOUT"
                offset="[24]"/>
         <field description="SCL time-out Interrupt flag." format="hex0x"
                id="I2C0@INTSTAT@SCLTIMEOUT"
                offset="[25]"/>
      </register>
      <register description="Master control register." format="hex0x" id="I2C0@MSTCTL"
                offset="0x820"
                size="4">
         <field description="Master Continue. This bit is write-only." format="enum"
                enum="d1e58313"
                id="I2C0@MSTCTL@MSTCONTINUE"
                offset="[0]"/>
         <field description="Master Start control. This bit is write-only." format="enum"
                enum="d1e58359"
                id="I2C0@MSTCTL@MSTSTART"
                offset="[1]"/>
         <field description="Master Stop control. This bit is write-only." format="enum"
                enum="d1e58405"
                id="I2C0@MSTCTL@MSTSTOP"
                offset="[2]"/>
         <field description="Master DMA enable. Data operations of the I2C can be performed with DMA. Protocol type operations such as Start, address, Stop, and address match must always be done with software, typically via an interrupt. Address acknowledgement must also be done by software except when the I2C is configured to be HSCAPABLE (and address acknowledgement is handled entirely by hardware) or when Automatic Operation is enabled. When a DMA data transfer is complete, MSTDMA must be cleared prior to beginning the next operation, typically a Start or Stop.This bit is read/write."
                format="enum"
                enum="d1e58451"
                id="I2C0@MSTCTL@MSTDMA"
                offset="[3]"/>
      </register>
      <register description="Master timing configuration." format="hex0x" id="I2C0@MSTTIME"
                offset="0x824"
                size="4">
         <field description="Master SCL Low time. Specifies the minimum low time that will be asserted by this master on SCL. Other devices on the bus (masters or slaves) could lengthen this time. This corresponds to the parameter t LOW in the I2C bus specification. I2C bus specification parameters tBUF and tSU;STA have the same values and are also controlled by MSTSCLLOW."
                format="enum"
                enum="d1e58525"
                id="I2C0@MSTTIME@MSTSCLLOW"
                offset="[2:0]"/>
         <field description="Master SCL High time. Specifies the minimum high time that will be asserted by this master on SCL. Other masters in a multi-master system could shorten this time. This corresponds to the parameter tHIGH in the I2C bus specification. I2C bus specification parameters tSU;STO and tHD;STA have the same values and are also controlled by MSTSCLHIGH."
                format="enum"
                enum="d1e58644"
                id="I2C0@MSTTIME@MSTSCLHIGH"
                offset="[6:4]"/>
      </register>
      <register description="Combined Master receiver and transmitter data register."
                format="hex0x"
                id="I2C0@MSTDAT"
                offset="0x828"
                size="4">
         <field description="Master function data register. Read: read the most recently received data for the Master function. Write: transmit data using the Master function."
                format="hex0x"
                id="I2C0@MSTDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave control register." format="hex0x" id="I2C0@SLVCTL"
                offset="0x840"
                size="4">
         <field description="Slave Continue." format="enum" enum="d1e58837"
                id="I2C0@SLVCTL@SLVCONTINUE"
                offset="[0]"/>
         <field description="Slave NACK." format="enum" enum="d1e58883"
                id="I2C0@SLVCTL@SLVNACK"
                offset="[1]"/>
         <field description="Slave DMA enable." format="enum" enum="d1e58929"
                id="I2C0@SLVCTL@SLVDMA"
                offset="[3]"/>
         <field description="Automatic Acknowledge.When this bit is set, it will cause an I2C header which matches SLVADR0 and the direction set by AUTOMATCHREAD to be ACKed immediately; this is used with DMA to allow processing of the data without intervention. If this bit is clear and a header matches SLVADR0, the behavior is controlled by AUTONACK in the SLVADR0 register: allowing NACK or interrupt."
                format="enum"
                enum="d1e58975"
                id="I2C0@SLVCTL@AUTOACK"
                offset="[8]"/>
         <field description="When AUTOACK is set, this bit controls whether it matches a read or write request on the next header with an address matching SLVADR0. Since DMA needs to be configured to match the transfer direction, the direction needs to be specified. This bit allows a direction to be chosen for the next operation."
                format="enum"
                enum="d1e59021"
                id="I2C0@SLVCTL@AUTOMATCHREAD"
                offset="[9]"/>
      </register>
      <register description="Combined Slave receiver and transmitter data register."
                format="hex0x"
                id="I2C0@SLVDAT"
                offset="0x844"
                size="4">
         <field description="Slave function data register. Read: read the most recently received data for the Slave function. Write: transmit data using the Slave function."
                format="hex0x"
                id="I2C0@SLVDAT@DATA"
                offset="[7:0]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR0"
                offset="0x848"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR0@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR0@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR0@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR1"
                offset="0x84c"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR1@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR1@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR1@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR2"
                offset="0x850"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR2@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR2@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR2@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave address register." format="hex0x" id="I2C0@SLVADR3"
                offset="0x854"
                size="4">
         <field description="Slave Address n Disable." format="enum" enum="d1e59148"
                id="I2C0@SLVADR3@SADISABLE"
                offset="[0]"/>
         <field description="Slave Address. Seven bit slave address that is compared to received addresses if enabled."
                format="hex0x"
                id="I2C0@SLVADR3@SLVADR"
                offset="[7:1]"/>
         <field description="Automatic NACK operation. Used in conjunction with AUTOACK and AUTOMATCHREAD, allows software to ignore I2C traffic while handling previous I2C data or other operations."
                format="enum"
                enum="d1e59212"
                id="I2C0@SLVADR3@AUTONACK"
                offset="[15]"/>
      </register>
      <register description="Slave Qualification for address 0." format="hex0x"
                id="I2C0@SLVQUAL0"
                offset="0x858"
                size="4">
         <field description="Qualify mode for slave address 0." format="enum" enum="d1e59286"
                id="I2C0@SLVQUAL0@QUALMODE0"
                offset="[0]"/>
         <field description="Slave address Qualifier for address 0. A value of 0 causes the address in SLVADR0 to be used as-is, assuming that it is enabled. If QUALMODE0 = 0, any bit in this field which is set to 1 will cause an automatic match of the corresponding bit of the received address when it is compared to the SLVADR0 register. If QUALMODE0 = 1, an address range is matched for address 0. This range extends from the value defined by SLVADR0 to the address defined by SLVQUAL0 (address matches when SLVADR0[7:1] &lt;= received address &lt;= SLVQUAL0[7:1])."
                format="hex0x"
                id="I2C0@SLVQUAL0@SLVQUAL0"
                offset="[7:1]"/>
      </register>
      <register description="Monitor receiver data register." format="hex0x" id="I2C0@MONRXDAT"
                offset="0x880"
                readOnly="true"
                size="4">
         <field description="Monitor function Receiver Data. This reflects every data byte that passes on the I2C pins."
                format="hex0x"
                id="I2C0@MONRXDAT@MONRXDAT"
                offset="[7:0]"/>
         <field description="Monitor Received Start." format="enum" enum="d1e59396"
                id="I2C0@MONRXDAT@MONSTART"
                offset="[8]"/>
         <field description="Monitor Received Repeated Start." format="enum" enum="d1e59442"
                id="I2C0@MONRXDAT@MONRESTART"
                offset="[9]"/>
         <field description="Monitor Received NACK." format="enum" enum="d1e59488"
                id="I2C0@MONRXDAT@MONNACK"
                offset="[10]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI0"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI1"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI2"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI3"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI4"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI5"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI6"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Serial Peripheral Interfaces (SPI)"
               id="SPI7"
               size="0xe44">
      <register description="SPI Configuration register" format="hex0x" id="SPI0@CFG"
                offset="0x400"
                size="4">
         <field description="SPI enable." format="enum" enum="d1e59890" id="SPI0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Master mode select." format="enum" enum="d1e59936"
                id="SPI0@CFG@MASTER"
                offset="[2]"/>
         <field description="LSB First mode enable." format="enum" enum="d1e59982"
                id="SPI0@CFG@LSBF"
                offset="[3]"/>
         <field description="Clock Phase select." format="enum" enum="d1e60028"
                id="SPI0@CFG@CPHA"
                offset="[4]"/>
         <field description="Clock Polarity select." format="enum" enum="d1e60074"
                id="SPI0@CFG@CPOL"
                offset="[5]"/>
         <field description="Loopback mode enable. Loopback mode applies only to Master mode, and connects transmit and receive data connected together to allow simple software testing."
                format="enum"
                enum="d1e60121"
                id="SPI0@CFG@LOOP"
                offset="[7]"/>
         <field description="SSEL0 Polarity select." format="enum" enum="d1e60167"
                id="SPI0@CFG@SPOL0"
                offset="[8]"/>
         <field description="SSEL1 Polarity select." format="enum" enum="d1e60213"
                id="SPI0@CFG@SPOL1"
                offset="[9]"/>
         <field description="SSEL2 Polarity select." format="enum" enum="d1e60259"
                id="SPI0@CFG@SPOL2"
                offset="[10]"/>
         <field description="SSEL3 Polarity select." format="enum" enum="d1e60305"
                id="SPI0@CFG@SPOL3"
                offset="[11]"/>
      </register>
      <register description="SPI Delay register" format="hex0x" id="SPI0@DLY" offset="0x404"
                size="4">
         <field description="Controls the amount of time between SSEL assertion and the beginning of a data transfer. There is always one SPI clock time between SSEL assertion and the first clock edge. This is not considered part of the pre-delay. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@PRE-DELAY"
                offset="[3:0]"/>
         <field description="Controls the amount of time between the end of a data transfer and SSEL deassertion. 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@POST-DELAY"
                offset="[7:4]"/>
         <field description="If the EOF flag is set, controls the minimum amount of time between the current frame and the next frame (or SSEL deassertion if EOT). 0x0 = No additional time is inserted. 0x1 = 1 SPI clock time is inserted. 0x2 = 2 SPI clock times are inserted. 0xF = 15 SPI clock times are inserted."
                format="hex0x"
                id="SPI0@DLY@FRAME-DELAY"
                offset="[11:8]"/>
         <field description="Controls the minimum amount of time that the SSEL is deasserted between transfers. 0x0 = The minimum time that SSEL is deasserted is 1 SPI clock time. (Zero added time.) 0x1 = The minimum time that SSEL is deasserted is 2 SPI clock times. 0x2 = The minimum time that SSEL is deasserted is 3 SPI clock times. 0xF = The minimum time that SSEL is deasserted is 16 SPI clock times."
                format="hex0x"
                id="SPI0@DLY@TRANSFER-DELAY"
                offset="[15:12]"/>
      </register>
      <register description="SPI Status. Some status flags can be cleared by writing a 1 to that bit position."
                format="hex0x"
                id="SPI0@STAT"
                offset="0x408"
                size="4">
         <field description="Slave Select Assert. This flag is set whenever any slave select transitions from deasserted to asserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become busy, and allows waking up the device from reduced power modes when a slave mode access begins. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert. This flag is set whenever any asserted slave selects transition to deasserted, in both master and slave modes. This allows determining when the SPI transmit/receive functions become idle. This flag is cleared by software."
                format="hex0x"
                id="SPI0@STAT@SSD"
                offset="[5]"/>
         <field description="Stalled status flag. This indicates whether the SPI is currently in a stall condition."
                format="hex0x"
                id="SPI0@STAT@STALLED"
                offset="[6]"/>
         <field description="End Transfer control bit. Software can set this bit to force an end to the current transfer when the transmitter finishes any activity already in progress, as if the EOT flag had been set prior to the last transmission. This capability is included to support cases where it is not known when transmit data is written that it will be the end of a transfer. The bit is cleared when the transmitter becomes idle as the transfer comes to an end. Forcing an end of transfer in this manner causes any specified FRAME_DELAY and TRANSFER_DELAY to be inserted."
                format="hex0x"
                id="SPI0@STAT@ENDTRANSFER"
                offset="[7]"/>
         <field description="Master idle status flag. This bit is 1 whenever the SPI master function is fully idle. This means that the transmit holding register is empty and the transmitter is not in the process of sending data."
                format="hex0x"
                id="SPI0@STAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable read and Set. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="SPI0@INTENSET"
                offset="0x40c"
                size="4">
         <field description="Slave select assert interrupt enable. Determines whether an interrupt occurs when the Slave Select is asserted."
                format="enum"
                enum="d1e60597"
                id="SPI0@INTENSET@SSAEN"
                offset="[4]"/>
         <field description="Slave select deassert interrupt enable. Determines whether an interrupt occurs when the Slave Select is deasserted."
                format="enum"
                enum="d1e60643"
                id="SPI0@INTENSET@SSDEN"
                offset="[5]"/>
         <field description="Master idle interrupt enable." format="enum" enum="d1e60689"
                id="SPI0@INTENSET@MSTIDLEEN"
                offset="[8]"/>
      </register>
      <register description="SPI Interrupt Enable Clear. Writing a 1 to any implemented bit position causes the corresponding bit in INTENSET to be cleared."
                format="hex0x"
                id="SPI0@INTENCLR"
                offset="0x410"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSAEN"
                offset="[4]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@SSDEN"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="SPI0@INTENCLR@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="SPI clock Divider" format="hex0x" id="SPI0@DIV" offset="0x424"
                size="4">
         <field description="Rate divider value. Specifies how the Flexcomm clock (FCLK) is divided to produce the SPI clock rate in master mode. DIVVAL is -1 encoded such that the value 0 results in FCLK/1, the value 1 results in FCLK/2, up to the maximum possible divide value of 0xFFFF, which results in FCLK/65536."
                format="hex0x"
                id="SPI0@DIV@DIVVAL"
                offset="[15:0]"/>
      </register>
      <register description="SPI Interrupt Status" format="hex0x" id="SPI0@INTSTAT"
                offset="0x428"
                readOnly="true"
                size="4">
         <field description="Slave Select Assert." format="hex0x" id="SPI0@INTSTAT@SSA"
                offset="[4]"/>
         <field description="Slave Select Deassert." format="hex0x" id="SPI0@INTSTAT@SSD"
                offset="[5]"/>
         <field description="Master Idle status flag." format="hex0x" id="SPI0@INTSTAT@MSTIDLE"
                offset="[8]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="SPI0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e60974"
                id="SPI0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e61020"
                id="SPI0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="SPI0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e61084"
                id="SPI0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e61130"
                id="SPI0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61177"
                id="SPI0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e61223"
                id="SPI0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="SPI0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="SPI0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="SPI0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="SPI0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="SPI0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="SPI0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e61524"
                id="SPI0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e61570"
                id="SPI0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="SPI0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61680"
                id="SPI0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e61726"
                id="SPI0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61772"
                id="SPI0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e61818"
                id="SPI0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="SPI0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="SPI0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="SPI0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="SPI0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="SPI0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="SPI0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x" id="SPI0@FIFOWR@TXDATA"
                offset="[15:0]"/>
         <field description="Transmit slave select. This field asserts SSEL0 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62129"
                id="SPI0@FIFOWR@TXSSEL0-N"
                offset="[16]"/>
         <field description="Transmit slave select. This field asserts SSEL1 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62175"
                id="SPI0@FIFOWR@TXSSEL1-N"
                offset="[17]"/>
         <field description="Transmit slave select. This field asserts SSEL2 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62221"
                id="SPI0@FIFOWR@TXSSEL2-N"
                offset="[18]"/>
         <field description="Transmit slave select. This field asserts SSEL3 in master mode. The output on the pin is active LOW by default."
                format="enum"
                enum="d1e62267"
                id="SPI0@FIFOWR@TXSSEL3-N"
                offset="[19]"/>
         <field description="End of transfer. The asserted SSEL will be deasserted at the end of a transfer and remain so far at least the time specified by the Transfer_delay value in the DLY register."
                format="enum"
                enum="d1e62314"
                id="SPI0@FIFOWR@EOT"
                offset="[20]"/>
         <field description="End of frame. Between frames, a delay may be inserted, as defined by the Frame_delay value in the DLY register. The end of a frame may not be particularly meaningful if the Frame_delay value = 0. This control can be used as part of the support for frame lengths greater than 16 bits."
                format="enum"
                enum="d1e62360"
                id="SPI0@FIFOWR@EOF"
                offset="[21]"/>
         <field description="Receive Ignore. This allows data to be transmitted using the SPI without the need to read unneeded data from the receiver. Setting this bit simplifies the transmit process and can be used with the DMA."
                format="enum"
                enum="d1e62406"
                id="SPI0@FIFOWR@RXIGNORE"
                offset="[22]"/>
         <field description="Data Length. Specifies the data length from 4 to 16 bits. Note that transfer lengths greater than 16 bits are supported by implementing multiple sequential transmits. 0x0-2 = Reserved. 0x3 = Data transfer is 4 bits in length. 0x4 = Data transfer is 5 bits in length. 0xF = Data transfer is 16 bits in length."
                format="hex0x"
                id="SPI0@FIFOWR@LEN"
                offset="[27:24]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="SPI0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORD@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL0 pin to be saved along with received data. The value will reflect the SSEL0 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL1 pin to be saved along with received data. The value will reflect the SSEL1 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL2 pin to be saved along with received data. The value will reflect the SSEL2 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive. This field allows the state of the SSEL3 pin to be saved along with received data. The value will reflect the SSEL3 pin for both master and slave operation. A zero indicates that a slave select is active. The actual polarity of each slave select pin is configured by the related SPOL bit in CFG."
                format="hex0x"
                id="SPI0@FIFORD@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of Transfer flag. This flag will be 1 if this is the first data after the SSELs went from deasserted to asserted (i.e., any previous transfer has ended). This information can be used to identify the first piece of data in cases where the transfer length is greater than 16 bits."
                format="hex0x"
                id="SPI0@FIFORD@SOT"
                offset="[20]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="SPI0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXDATA"
                offset="[15:0]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL0-N"
                offset="[16]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL1-N"
                offset="[17]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL2-N"
                offset="[18]"/>
         <field description="Slave Select for receive." format="hex0x"
                id="SPI0@FIFORDNOPOP@RXSSEL3-N"
                offset="[19]"/>
         <field description="Start of transfer flag." format="hex0x" id="SPI0@FIFORDNOPOP@SOT"
                offset="[20]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART0" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART1" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART2" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART3" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART4" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART5" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART6" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x USARTs" id="USART7" size="0xe44">
      <register description="USART Configuration register. Basic USART configuration settings that typically are not changed during operation."
                format="hex0x"
                id="USART0@CFG"
                offset="0x0"
                size="4">
         <field description="USART Enable." format="enum" enum="d1e63099"
                id="USART0@CFG@ENABLE"
                offset="[0]"/>
         <field description="Selects the data size for the USART." format="enum"
                enum="d1e63145"
                id="USART0@CFG@DATALEN"
                offset="[3:2]"/>
         <field description="Selects what type of parity is used by the USART." format="enum"
                enum="d1e63203"
                id="USART0@CFG@PARITYSEL"
                offset="[5:4]"/>
         <field description="Number of stop bits appended to transmitted data. Only a single stop bit is required for received data."
                format="enum"
                enum="d1e63261"
                id="USART0@CFG@STOPLEN"
                offset="[6]"/>
         <field description="Selects standard or 32 kHz clocking mode." format="enum"
                enum="d1e63307"
                id="USART0@CFG@MODE32K"
                offset="[7]"/>
         <field description="LIN break mode enable." format="enum" enum="d1e63354"
                id="USART0@CFG@LINMODE"
                offset="[8]"/>
         <field description="CTS Enable. Determines whether CTS is used for flow control. CTS can be from the input pin, or from the USART's own RTS if loopback mode is enabled."
                format="enum"
                enum="d1e63400"
                id="USART0@CFG@CTSEN"
                offset="[9]"/>
         <field description="Selects synchronous or asynchronous operation." format="enum"
                enum="d1e63446"
                id="USART0@CFG@SYNCEN"
                offset="[11]"/>
         <field description="Selects the clock polarity and sampling edge of received data in synchronous mode."
                format="enum"
                enum="d1e63492"
                id="USART0@CFG@CLKPOL"
                offset="[12]"/>
         <field description="Synchronous mode Master select." format="enum" enum="d1e63538"
                id="USART0@CFG@SYNCMST"
                offset="[14]"/>
         <field description="Selects data loopback mode." format="enum" enum="d1e63584"
                id="USART0@CFG@LOOP"
                offset="[15]"/>
         <field description="I/O output mode." format="enum" enum="d1e63631"
                id="USART0@CFG@IOMODE"
                offset="[16]"/>
         <field description="Output Enable Turnaround time enable for RS-485 operation."
                format="enum"
                enum="d1e63677"
                id="USART0@CFG@OETA"
                offset="[18]"/>
         <field description="Automatic Address matching enable." format="enum" enum="d1e63723"
                id="USART0@CFG@AUTOADDR"
                offset="[19]"/>
         <field description="Output Enable Select." format="enum" enum="d1e63769"
                id="USART0@CFG@OESEL"
                offset="[20]"/>
         <field description="Output Enable Polarity." format="enum" enum="d1e63815"
                id="USART0@CFG@OEPOL"
                offset="[21]"/>
         <field description="Receive data polarity." format="enum" enum="d1e63861"
                id="USART0@CFG@RXPOL"
                offset="[22]"/>
         <field description="Transmit data polarity." format="enum" enum="d1e63908"
                id="USART0@CFG@TXPOL"
                offset="[23]"/>
      </register>
      <register description="USART Control register. USART control settings that are more likely to change during operation."
                format="hex0x"
                id="USART0@CTL"
                offset="0x4"
                size="4">
         <field description="Break Enable." format="enum" enum="d1e63982"
                id="USART0@CTL@TXBRKEN"
                offset="[1]"/>
         <field description="Enable address detect mode." format="enum" enum="d1e64028"
                id="USART0@CTL@ADDRDET"
                offset="[2]"/>
         <field description="Transmit Disable." format="enum" enum="d1e64074"
                id="USART0@CTL@TXDIS"
                offset="[6]"/>
         <field description="Continuous Clock generation. By default, SCLK is only output while data is being transmitted in synchronous mode."
                format="enum"
                enum="d1e64120"
                id="USART0@CTL@CC"
                offset="[8]"/>
         <field description="Clear Continuous Clock." format="enum" enum="d1e64166"
                id="USART0@CTL@CLRCCONRX"
                offset="[9]"/>
         <field description="Autobaud enable." format="enum" enum="d1e64213"
                id="USART0@CTL@AUTOBAUD"
                offset="[16]"/>
      </register>
      <register description="USART Status register. The complete status value can be read here. Writing ones clears some bits in the register. Some bits can be cleared by writing a 1 to them."
                format="hex0x"
                id="USART0@STAT"
                offset="0x8"
                size="4">
         <field description="Receiver Idle. When 0, indicates that the receiver is currently in the process of receiving data. When 1, indicates that the receiver is not currently in the process of receiving data."
                format="hex0x"
                id="USART0@STAT@RXIDLE"
                offset="[1]"/>
         <field description="Transmitter Idle. When 0, indicates that the transmitter is currently in the process of sending data.When 1, indicate that the transmitter is not currently in the process of sending data."
                format="hex0x"
                id="USART0@STAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit reflects the current state of the CTS signal, regardless of the setting of the CTSEN bit in the CFG register. This will be the value of the CTS input pin unless loopback mode is enabled."
                format="hex0x"
                id="USART0@STAT@CTS"
                offset="[4]"/>
         <field description="This bit is set when a change in the state is detected for the CTS flag above. This bit is cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Status flag. When 1, this bit indicates that the USART transmitter is fully idle after being disabled via the TXDIS bit in the CFG register (TXDIS = 1)."
                format="hex0x"
                id="USART0@STAT@TXDISSTAT"
                offset="[6]"/>
         <field description="Received Break. This bit reflects the current state of the receiver break detection logic. It is set when the Un_RXD pin remains low for 16 bit times. Note that FRAMERRINT will also be set when this condition occurs because the stop bit(s) for the character would be missing. RXBRK is cleared when the Un_RXD pin goes high."
                format="hex0x"
                id="USART0@STAT@RXBRK"
                offset="[10]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs. Cleared by software."
                format="hex0x"
                id="USART0@STAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input. Its purpose is primarily to allow wake-up from Deep-sleep or Power-down mode immediately when a start is detected. Cleared by software."
                format="hex0x"
                id="USART0@STAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag. This flag is set when a character is received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@STAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag. This flag is set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@STAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag. Three samples of received data are taken in order to determine the value of each received data bit, except in synchronous mode. This acts as a noise filter if one sample disagrees. This flag is set when a received data bit contains one disagreeing sample. This could indicate line noise, a baud rate or character format mismatch, or loss of synchronization during data reception."
                format="hex0x"
                id="USART0@STAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error. An auto baud error can occur if the BRG counts to its limit before the end of the start bit that is being measured, essentially an auto baud time-out."
                format="hex0x"
                id="USART0@STAT@ABERR"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable read and Set register for USART (not FIFO) status. Contains individual interrupt enable bits for each potential USART interrupt. A complete value may be read from this register. Writing a 1 to any implemented bit position causes that bit to be set."
                format="hex0x"
                id="USART0@INTENSET"
                offset="0xc"
                size="4">
         <field description="When 1, enables an interrupt when the transmitter becomes idle (TXIDLE = 1)."
                format="hex0x"
                id="USART0@INTENSET@TXIDLEEN"
                offset="[3]"/>
         <field description="When 1, enables an interrupt when there is a change in the state of the CTS input."
                format="hex0x"
                id="USART0@INTENSET@DELTACTSEN"
                offset="[5]"/>
         <field description="When 1, enables an interrupt when the transmitter is fully disabled as indicated by the TXDISINT flag in STAT. See description of the TXDISINT bit for details."
                format="hex0x"
                id="USART0@INTENSET@TXDISEN"
                offset="[6]"/>
         <field description="When 1, enables an interrupt when a change of state has occurred in the detection of a received break condition (break condition asserted or deasserted)."
                format="hex0x"
                id="USART0@INTENSET@DELTARXBRKEN"
                offset="[11]"/>
         <field description="When 1, enables an interrupt when a received start bit has been detected."
                format="hex0x"
                id="USART0@INTENSET@STARTEN"
                offset="[12]"/>
         <field description="When 1, enables an interrupt when a framing error has been detected."
                format="hex0x"
                id="USART0@INTENSET@FRAMERREN"
                offset="[13]"/>
         <field description="When 1, enables an interrupt when a parity error has been detected."
                format="hex0x"
                id="USART0@INTENSET@PARITYERREN"
                offset="[14]"/>
         <field description="When 1, enables an interrupt when noise is detected. See description of the RXNOISEINT bit in Table 354."
                format="hex0x"
                id="USART0@INTENSET@RXNOISEEN"
                offset="[15]"/>
         <field description="When 1, enables an interrupt when an auto baud error occurs."
                format="hex0x"
                id="USART0@INTENSET@ABERREN"
                offset="[16]"/>
      </register>
      <register description="Interrupt Enable Clear register. Allows clearing any combination of bits in the INTENSET register. Writing a 1 to any implemented bit position causes the corresponding bit to be cleared."
                format="hex0x"
                id="USART0@INTENCLR"
                offset="0x10"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXIDLECLR"
                offset="[3]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTACTSCLR"
                offset="[5]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@TXDISCLR"
                offset="[6]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@DELTARXBRKCLR"
                offset="[11]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@STARTCLR"
                offset="[12]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@FRAMERRCLR"
                offset="[13]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@PARITYERRCLR"
                offset="[14]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@RXNOISECLR"
                offset="[15]"/>
         <field description="Writing 1 clears the corresponding bit in the INTENSET register."
                format="hex0x"
                id="USART0@INTENCLR@ABERRCLR"
                offset="[16]"/>
      </register>
      <register description="Baud Rate Generator register. 16-bit integer baud rate divisor value."
                format="hex0x"
                id="USART0@BRG"
                offset="0x20"
                size="4">
         <field description="This value is used to divide the USART input clock to determine the baud rate, based on the input clock from the FRG. 0 = FCLK is used directly by the USART function. 1 = FCLK is divided by 2 before use by the USART function. 2 = FCLK is divided by 3 before use by the USART function. 0xFFFF = FCLK is divided by 65,536 before use by the USART function."
                format="hex0x"
                id="USART0@BRG@BRGVAL"
                offset="[15:0]"/>
      </register>
      <register description="Interrupt status register. Reflects interrupts that are currently enabled."
                format="hex0x"
                id="USART0@INTSTAT"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="Transmitter Idle status." format="hex0x"
                id="USART0@INTSTAT@TXIDLE"
                offset="[3]"/>
         <field description="This bit is set when a change in the state of the CTS input is detected."
                format="hex0x"
                id="USART0@INTSTAT@DELTACTS"
                offset="[5]"/>
         <field description="Transmitter Disabled Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@TXDISINT"
                offset="[6]"/>
         <field description="This bit is set when a change in the state of receiver break detection occurs."
                format="hex0x"
                id="USART0@INTSTAT@DELTARXBRK"
                offset="[11]"/>
         <field description="This bit is set when a start is detected on the receiver input."
                format="hex0x"
                id="USART0@INTSTAT@START"
                offset="[12]"/>
         <field description="Framing Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@FRAMERRINT"
                offset="[13]"/>
         <field description="Parity Error interrupt flag." format="hex0x"
                id="USART0@INTSTAT@PARITYERRINT"
                offset="[14]"/>
         <field description="Received Noise interrupt flag." format="hex0x"
                id="USART0@INTSTAT@RXNOISEINT"
                offset="[15]"/>
         <field description="Auto baud Error Interrupt flag." format="hex0x"
                id="USART0@INTSTAT@ABERRINT"
                offset="[16]"/>
      </register>
      <register description="Oversample selection register for asynchronous communication."
                format="hex0x"
                id="USART0@OSR"
                offset="0x28"
                size="4">
         <field description="Oversample Selection Value. 0 to 3 = not supported 0x4 = 5 function clocks are used to transmit and receive each data bit. 0x5 = 6 function clocks are used to transmit and receive each data bit. 0xF= 16 function clocks are used to transmit and receive each data bit."
                format="hex0x"
                id="USART0@OSR@OSRVAL"
                offset="[3:0]"/>
      </register>
      <register description="Address register for automatic address matching." format="hex0x"
                id="USART0@ADDR"
                offset="0x2c"
                size="4">
         <field description="8-bit address used with automatic address matching. Used when address detection is enabled (ADDRDET in CTL = 1) and automatic address matching is enabled (AUTOADDR in CFG = 1)."
                format="hex0x"
                id="USART0@ADDR@ADDRESS"
                offset="[7:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="USART0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e65245"
                id="USART0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e65291"
                id="USART0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="USART0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e65355"
                id="USART0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e65401"
                id="USART0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65448"
                id="USART0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e65494"
                id="USART0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="USART0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="USART0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="USART0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="USART0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="USART0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="USART0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="USART0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="USART0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="USART0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="USART0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e65796"
                id="USART0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e65842"
                id="USART0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="USART0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="USART0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65952"
                id="USART0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e65998"
                id="USART0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66044"
                id="USART0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e66090"
                id="USART0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="USART0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="USART0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="USART0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="USART0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x"
                id="USART0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="USART0@FIFOWR" offset="0xe20"
                size="4">
         <field description="Transmit data to the FIFO." format="hex0x"
                id="USART0@FIFOWR@TXDATA"
                offset="[8:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="USART0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORD@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORD@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORD@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORD@RXNOISE"
                offset="[15]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="USART0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on the DATALEN and PARITYSEL settings."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXDATA"
                offset="[8:0]"/>
         <field description="Framing Error status flag. This bit reflects the status for the data it is read along with from the FIFO, and indicates that the character was received with a missing stop bit at the expected location. This could be an indication of a baud rate or configuration mismatch with the transmitting source."
                format="hex0x"
                id="USART0@FIFORDNOPOP@FRAMERR"
                offset="[13]"/>
         <field description="Parity Error status flag. This bit reflects the status for the data it is read along with from the FIFO. This bit will be set when a parity error is detected in a received character."
                format="hex0x"
                id="USART0@FIFORDNOPOP@PARITYERR"
                offset="[14]"/>
         <field description="Received Noise flag. See description of the RxNoiseInt bit in Table 354."
                format="hex0x"
                id="USART0@FIFORDNOPOP@RXNOISE"
                offset="[15]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x Mailbox" id="MAILBOX" size="0xfc">
      <register description="Interrupt request register for the Cortex-M0+ CPU." format="hex0x"
                id="MAILBOX@MBOXIRQ0-IRQ"
                offset="0x0"
                size="4">
         <field description="If any bit is set, an interrupt request is sent to the Cortex-M0+ interrupt controller."
                format="hex0x"
                id="MAILBOX@MBOXIRQ0-IRQ@INTREQ"
                offset="[31:0]"/>
      </register>
      <register description="Set bits in IRQ0" format="hex0x" id="MAILBOX@MBOXIRQ0-IRQSET"
                offset="0x4"
                writeOnly="true"
                size="4">
         <field description="Writing 1 sets the corresponding bit in the IRQ0 register."
                format="hex0x"
                id="MAILBOX@MBOXIRQ0-IRQSET@INTREQSET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in IRQ0" format="hex0x" id="MAILBOX@MBOXIRQ0-IRQCLR"
                offset="0x8"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the IRQ0 register."
                format="hex0x"
                id="MAILBOX@MBOXIRQ0-IRQCLR@INTREQCLR"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt request register for the Cortex-M0+ CPU." format="hex0x"
                id="MAILBOX@MBOXIRQ1-IRQ"
                offset="0x10"
                size="4">
         <field description="If any bit is set, an interrupt request is sent to the Cortex-M0+ interrupt controller."
                format="hex0x"
                id="MAILBOX@MBOXIRQ1-IRQ@INTREQ"
                offset="[31:0]"/>
      </register>
      <register description="Set bits in IRQ0" format="hex0x" id="MAILBOX@MBOXIRQ1-IRQSET"
                offset="0x14"
                writeOnly="true"
                size="4">
         <field description="Writing 1 sets the corresponding bit in the IRQ0 register."
                format="hex0x"
                id="MAILBOX@MBOXIRQ1-IRQSET@INTREQSET"
                offset="[31:0]"/>
      </register>
      <register description="Clear bits in IRQ0" format="hex0x" id="MAILBOX@MBOXIRQ1-IRQCLR"
                offset="0x18"
                writeOnly="true"
                size="4">
         <field description="Writing 1 clears the corresponding bit in the IRQ0 register."
                format="hex0x"
                id="MAILBOX@MBOXIRQ1-IRQCLR@INTREQCLR"
                offset="[31:0]"/>
      </register>
      <register description="Mutual exclusion register[1]" format="hex0x" id="MAILBOX@MUTEX"
                offset="0xf8"
                size="4">
         <field description="Cleared when read, set when written. See usage description above."
                format="hex0x"
                id="MAILBOX@MUTEX@EX"
                offset="[0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x General Purpose I/O (GPIO)" id="GPIO"
               size="0x2488">
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B0"
                offset="0x0"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B0@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B1"
                offset="0x1"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B1@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B2"
                offset="0x2"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B2@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B3"
                offset="0x3"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B3@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B4"
                offset="0x4"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B4@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B5"
                offset="0x5"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B5@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B6"
                offset="0x6"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B6@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B7"
                offset="0x7"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B7@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B8"
                offset="0x8"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B8@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B9"
                offset="0x9"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B9@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B10"
                offset="0xa"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B10@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B11"
                offset="0xb"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B11@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B12"
                offset="0xc"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B12@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B13"
                offset="0xd"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B13@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B14"
                offset="0xe"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B14@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B15"
                offset="0xf"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B15@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B16"
                offset="0x10"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B16@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B17"
                offset="0x11"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B17@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B18"
                offset="0x12"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B18@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B19"
                offset="0x13"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B19@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B20"
                offset="0x14"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B20@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B21"
                offset="0x15"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B21@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B22"
                offset="0x16"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B22@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B23"
                offset="0x17"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B23@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B24"
                offset="0x18"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B24@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B25"
                offset="0x19"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B25@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B26"
                offset="0x1a"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B26@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B27"
                offset="0x1b"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B27@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B28"
                offset="0x1c"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B28@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B29"
                offset="0x1d"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B29@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B30"
                offset="0x1e"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B30@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B31"
                offset="0x1f"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B31@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B32"
                offset="0x20"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B32@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B33"
                offset="0x21"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B33@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B34"
                offset="0x22"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B34@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B35"
                offset="0x23"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B35@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B36"
                offset="0x24"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B36@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B37"
                offset="0x25"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B37@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B38"
                offset="0x26"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B38@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B39"
                offset="0x27"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B39@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B40"
                offset="0x28"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B40@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B41"
                offset="0x29"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B41@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B42"
                offset="0x2a"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B42@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B43"
                offset="0x2b"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B43@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B44"
                offset="0x2c"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B44@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B45"
                offset="0x2d"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B45@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B46"
                offset="0x2e"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B46@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B47"
                offset="0x2f"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B47@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B48"
                offset="0x30"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B48@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Byte pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@B49"
                offset="0x31"
                size="1">
         <field description="Read: state of the pin PIOm_n, regardless of direction, masking, or alternate function, except that pins configured as analog I/O always read as 0. One register for each port pin. Supported pins depends on the specific device and package. Write: loads the pin's output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@B49@PBYTE"
                offset="[0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W0"
                offset="0x1000"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W0@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W1"
                offset="0x1004"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W1@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W2"
                offset="0x1008"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W2@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W3"
                offset="0x100c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W3@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W4"
                offset="0x1010"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W4@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W5"
                offset="0x1014"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W5@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W6"
                offset="0x1018"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W6@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W7"
                offset="0x101c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W7@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W8"
                offset="0x1020"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W8@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W9"
                offset="0x1024"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W9@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W10"
                offset="0x1028"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W10@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W11"
                offset="0x102c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W11@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W12"
                offset="0x1030"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W12@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W13"
                offset="0x1034"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W13@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W14"
                offset="0x1038"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W14@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W15"
                offset="0x103c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W15@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W16"
                offset="0x1040"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W16@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W17"
                offset="0x1044"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W17@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W18"
                offset="0x1048"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W18@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W19"
                offset="0x104c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W19@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W20"
                offset="0x1050"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W20@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W21"
                offset="0x1054"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W21@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W22"
                offset="0x1058"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W22@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W23"
                offset="0x105c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W23@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W24"
                offset="0x1060"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W24@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W25"
                offset="0x1064"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W25@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W26"
                offset="0x1068"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W26@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W27"
                offset="0x106c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W27@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W28"
                offset="0x1070"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W28@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W29"
                offset="0x1074"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W29@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W30"
                offset="0x1078"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W30@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W31"
                offset="0x107c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W31@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W32"
                offset="0x1080"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W32@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W33"
                offset="0x1084"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W33@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W34"
                offset="0x1088"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W34@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W35"
                offset="0x108c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W35@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W36"
                offset="0x1090"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W36@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W37"
                offset="0x1094"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W37@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W38"
                offset="0x1098"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W38@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W39"
                offset="0x109c"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W39@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W40"
                offset="0x10a0"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W40@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W41"
                offset="0x10a4"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W41@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W42"
                offset="0x10a8"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W42@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W43"
                offset="0x10ac"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W43@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W44"
                offset="0x10b0"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W44@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W45"
                offset="0x10b4"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W45@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W46"
                offset="0x10b8"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W46@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W47"
                offset="0x10bc"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W47@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W48"
                offset="0x10c0"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W48@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Word pin registers for all port 0 and 1 GPIO pins" format="hex0x"
                id="GPIO@W49"
                offset="0x10c4"
                size="4">
         <field description="Read 0: pin PIOm_n is LOW. Write 0: clear output bit. Read 0xFFFF FFFF: pin PIOm_n is HIGH. Write any value 0x0000 0001 to 0xFFFF FFFF: set output bit. Only 0 or 0xFFFF FFFF can be read. Writing any value other than 0 will set the output bit. One register for each port pin. Supported pins depends on the specific device and package."
                format="hex0x"
                id="GPIO@W49@PWORD"
                offset="[31:0]"/>
      </register>
      <register description="Direction registers" format="hex0x" id="GPIO@DIR0" offset="0x2000"
                size="4">
         <field description="Selects pin direction for pin PIOm_n (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = input. 1 = output."
                format="hex0x"
                id="GPIO@DIR0@DIRP"
                offset="[31:0]"/>
      </register>
      <register description="Direction registers" format="hex0x" id="GPIO@DIR1" offset="0x2004"
                size="4">
         <field description="Selects pin direction for pin PIOm_n (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = input. 1 = output."
                format="hex0x"
                id="GPIO@DIR1@DIRP"
                offset="[31:0]"/>
      </register>
      <register description="Mask register" format="hex0x" id="GPIO@MASK0" offset="0x2080"
                size="4">
         <field description="Controls which bits corresponding to PIOm_n are active in the MPORT register (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read MPORT: pin state; write MPORT: load output bit. 1 = Read MPORT: 0; write MPORT: output bit not affected."
                format="hex0x"
                id="GPIO@MASK0@MASKP"
                offset="[31:0]"/>
      </register>
      <register description="Mask register" format="hex0x" id="GPIO@MASK1" offset="0x2084"
                size="4">
         <field description="Controls which bits corresponding to PIOm_n are active in the MPORT register (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read MPORT: pin state; write MPORT: load output bit. 1 = Read MPORT: 0; write MPORT: output bit not affected."
                format="hex0x"
                id="GPIO@MASK1@MASKP"
                offset="[31:0]"/>
      </register>
      <register description="Port pin register" format="hex0x" id="GPIO@PIN0" offset="0x2100"
                size="4">
         <field description="Reads pin states or loads output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read: pin is low; write: clear output bit. 1 = Read: pin is high; write: set output bit."
                format="hex0x"
                id="GPIO@PIN0@PORT"
                offset="[31:0]"/>
      </register>
      <register description="Port pin register" format="hex0x" id="GPIO@PIN1" offset="0x2104"
                size="4">
         <field description="Reads pin states or loads output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read: pin is low; write: clear output bit. 1 = Read: pin is high; write: set output bit."
                format="hex0x"
                id="GPIO@PIN1@PORT"
                offset="[31:0]"/>
      </register>
      <register description="Masked port register" format="hex0x" id="GPIO@MPIN0"
                offset="0x2180"
                size="4">
         <field description="Masked port register (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read: pin is LOW and/or the corresponding bit in the MASK register is 1; write: clear output bit if the corresponding bit in the MASK register is 0. 1 = Read: pin is HIGH and the corresponding bit in the MASK register is 0; write: set output bit if the corresponding bit in the MASK register is 0."
                format="hex0x"
                id="GPIO@MPIN0@MPORTP"
                offset="[31:0]"/>
      </register>
      <register description="Masked port register" format="hex0x" id="GPIO@MPIN1"
                offset="0x2184"
                size="4">
         <field description="Masked port register (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read: pin is LOW and/or the corresponding bit in the MASK register is 1; write: clear output bit if the corresponding bit in the MASK register is 0. 1 = Read: pin is HIGH and the corresponding bit in the MASK register is 0; write: set output bit if the corresponding bit in the MASK register is 0."
                format="hex0x"
                id="GPIO@MPIN1@MPORTP"
                offset="[31:0]"/>
      </register>
      <register description="Write: Set register for port Read: output bits for port"
                format="hex0x"
                id="GPIO@SET0"
                offset="0x2200"
                size="4">
         <field description="Read or set output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read: output bit: write: no operation. 1 = Read: output bit; write: set output bit."
                format="hex0x"
                id="GPIO@SET0@SETP"
                offset="[31:0]"/>
      </register>
      <register description="Write: Set register for port Read: output bits for port"
                format="hex0x"
                id="GPIO@SET1"
                offset="0x2204"
                size="4">
         <field description="Read or set output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = Read: output bit: write: no operation. 1 = Read: output bit; write: set output bit."
                format="hex0x"
                id="GPIO@SET1@SETP"
                offset="[31:0]"/>
      </register>
      <register description="Clear port" format="hex0x" id="GPIO@CLR0" offset="0x2280"
                writeOnly="true"
                size="4">
         <field description="Clear output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = No operation. 1 = Clear output bit."
                format="hex0x"
                id="GPIO@CLR0@CLRP"
                offset="[31:0]"/>
      </register>
      <register description="Clear port" format="hex0x" id="GPIO@CLR1" offset="0x2284"
                writeOnly="true"
                size="4">
         <field description="Clear output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = No operation. 1 = Clear output bit."
                format="hex0x"
                id="GPIO@CLR1@CLRP"
                offset="[31:0]"/>
      </register>
      <register description="Toggle port" format="hex0x" id="GPIO@NOT0" offset="0x2300"
                writeOnly="true"
                size="4">
         <field description="Toggle output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = no operation. 1 = Toggle output bit."
                format="hex0x"
                id="GPIO@NOT0@NOTP"
                offset="[31:0]"/>
      </register>
      <register description="Toggle port" format="hex0x" id="GPIO@NOT1" offset="0x2304"
                writeOnly="true"
                size="4">
         <field description="Toggle output bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = no operation. 1 = Toggle output bit."
                format="hex0x"
                id="GPIO@NOT1@NOTP"
                offset="[31:0]"/>
      </register>
      <register description="Set pin direction bits for port" format="hex0x" id="GPIO@DIRSET0"
                offset="0x2380"
                writeOnly="true"
                size="4">
         <field description="Set direction bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = No operation. 1 = Set direction bit."
                format="hex0x"
                id="GPIO@DIRSET0@DIRSETP"
                offset="[28:0]"/>
      </register>
      <register description="Set pin direction bits for port" format="hex0x" id="GPIO@DIRSET1"
                offset="0x2384"
                writeOnly="true"
                size="4">
         <field description="Set direction bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = No operation. 1 = Set direction bit."
                format="hex0x"
                id="GPIO@DIRSET1@DIRSETP"
                offset="[28:0]"/>
      </register>
      <register description="Clear pin direction bits for port" format="hex0x"
                id="GPIO@DIRCLR0"
                offset="0x2400"
                writeOnly="true"
                size="4">
         <field description="Clear direction bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = No operation. 1 = Clear direction bit."
                format="hex0x"
                id="GPIO@DIRCLR0@DIRCLRP"
                offset="[28:0]"/>
      </register>
      <register description="Clear pin direction bits for port" format="hex0x"
                id="GPIO@DIRCLR1"
                offset="0x2404"
                writeOnly="true"
                size="4">
         <field description="Clear direction bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = No operation. 1 = Clear direction bit."
                format="hex0x"
                id="GPIO@DIRCLR1@DIRCLRP"
                offset="[28:0]"/>
      </register>
      <register description="Toggle pin direction bits for port" format="hex0x"
                id="GPIO@DIRNOT0"
                offset="0x2480"
                writeOnly="true"
                size="4">
         <field description="Toggle direction bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = no operation. 1 = Toggle direction bit."
                format="hex0x"
                id="GPIO@DIRNOT0@DIRNOTP"
                offset="[28:0]"/>
      </register>
      <register description="Toggle pin direction bits for port" format="hex0x"
                id="GPIO@DIRNOT1"
                offset="0x2484"
                writeOnly="true"
                size="4">
         <field description="Toggle direction bits (bit 0 = PIOn_0, bit 1 = PIOn_1, etc.). Supported pins depends on the specific device and package. 0 = no operation. 1 = Toggle direction bit."
                format="hex0x"
                id="GPIO@DIRNOT1@DIRNOTP"
                offset="[28:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x DMIC Subsystem (DMIC))" id="DMIC0"
               size="0x1000">
      <register description="Oversample Rate register 0" format="hex0x" id="DMIC0@CHANNEL0-OSR"
                offset="0x0"
                size="4">
         <field description="Selects the oversample rate for the related input channel."
                format="hex0x"
                id="DMIC0@CHANNEL0-OSR@OSR"
                offset="[7:0]"/>
      </register>
      <register description="DMIC Clock Register 0" format="hex0x" id="DMIC0@CHANNEL0-DIVHFCLK"
                offset="0x4"
                size="4">
         <field description="PDM clock divider value. 0 = divide by 1 1 = divide by 2 2 = divide by 3 3 = divide by 4 4 = divide by 6 5 = divide by 8 6 = divide by 12 7 = divide by 16 8 = divide by 24 9 = divide by 32 10 = divide by 48 11 = divide by 64 12 = divide by 96 13 = divide by 128 others = reserved."
                format="hex0x"
                id="DMIC0@CHANNEL0-DIVHFCLK@PDMDIV"
                offset="[3:0]"/>
      </register>
      <register description="Pre-Emphasis Filter Coefficient for 2 FS register" format="hex0x"
                id="DMIC0@CHANNEL0-PREAC2FSCOEF"
                offset="0x8"
                size="4">
         <field description="Pre-emphasis filer coefficient for 2 FS mode. 0 = Compensation = 0 1 = Compensation = 16 2 = Compensation = 15 3 = Compensation = 13"
                format="hex0x"
                id="DMIC0@CHANNEL0-PREAC2FSCOEF@COMP"
                offset="[1:0]"/>
      </register>
      <register description="Pre-Emphasis Filter Coefficient for 4 FS register" format="hex0x"
                id="DMIC0@CHANNEL0-PREAC4FSCOEF"
                offset="0xc"
                size="4">
         <field description="Pre-emphasis filer coefficient for 4 FS mode. 0 = Compensation = 0 1 = Compensation = 16 2 = Compensation = 15 3 = Compensation = 13"
                format="hex0x"
                id="DMIC0@CHANNEL0-PREAC4FSCOEF@COMP"
                offset="[1:0]"/>
      </register>
      <register description="Decimator Gain Shift register" format="hex0x"
                id="DMIC0@CHANNEL0-GAINSHIFT"
                offset="0x10"
                size="4">
         <field description="Gain control, as a positive or negative (two's complement) number of bits to shift."
                format="hex0x"
                id="DMIC0@CHANNEL0-GAINSHIFT@GAIN"
                offset="[5:0]"/>
      </register>
      <register description="FIFO Control register 0" format="hex0x"
                id="DMIC0@CHANNEL0-FIFO-CTRL"
                offset="0x80"
                size="4">
         <field description="FIFO enable." format="enum" enum="d1e68108"
                id="DMIC0@CHANNEL0-FIFO-CTRL@ENABLE"
                offset="[0]"/>
         <field description="FIFO reset." format="enum" enum="d1e68154"
                id="DMIC0@CHANNEL0-FIFO-CTRL@RESETN"
                offset="[1]"/>
         <field description="Interrupt enable." format="enum" enum="d1e68200"
                id="DMIC0@CHANNEL0-FIFO-CTRL@INTEN"
                offset="[2]"/>
         <field description="DMA enable" format="enum" enum="d1e68246"
                id="DMIC0@CHANNEL0-FIFO-CTRL@DMAEN"
                offset="[3]"/>
         <field description="FIFO trigger level. Selects the data trigger level for interrupt or DMA operation. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode See Section 4.5.66 'Hardware Wake-up control register'. 0 = trigger when the FIFO has received one entry (is no longer empty). 1 = trigger when the FIFO has received two entries. 15 = trigger when the FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="DMIC0@CHANNEL0-FIFO-CTRL@TRIGLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO Status register 0" format="hex0x"
                id="DMIC0@CHANNEL0-FIFO-STATUS"
                offset="0x84"
                size="4">
         <field description="Interrupt flag. Asserted when FIFO data reaches the level specified in the FIFOCTRL register. Writing a one to this bit clears the flag. Remark: note that the bus clock to the DMIC subsystem must be running in order for an interrupt to occur."
                format="hex0x"
                id="DMIC0@CHANNEL0-FIFO-STATUS@INT"
                offset="[0]"/>
         <field description="Overrun flag. Indicates that a FIFO overflow has occurred at some point. Writing a one to this bit clears the flag. This flag does not cause an interrupt."
                format="hex0x"
                id="DMIC0@CHANNEL0-FIFO-STATUS@OVERRUN"
                offset="[1]"/>
         <field description="Underrun flag. Indicates that a FIFO underflow has occurred at some point. Writing a one to this bit clears the flag."
                format="hex0x"
                id="DMIC0@CHANNEL0-FIFO-STATUS@UNDERRUN"
                offset="[2]"/>
      </register>
      <register description="FIFO Data Register 0" format="hex0x" id="DMIC0@CHANNEL0-FIFO-DATA"
                offset="0x88"
                size="4">
         <field description="Data from the top of the input filter FIFO." format="hex0x"
                id="DMIC0@CHANNEL0-FIFO-DATA@DATA"
                offset="[23:0]"/>
      </register>
      <register description="PDM Source Configuration register 0" format="hex0x"
                id="DMIC0@CHANNEL0-PHY-CTRL"
                offset="0x8c"
                size="4">
         <field description="Capture PDM_DATA" format="enum" enum="d1e68467"
                id="DMIC0@CHANNEL0-PHY-CTRL@PHY-FALL"
                offset="[0]"/>
         <field description="Half rate sampling" format="enum" enum="d1e68513"
                id="DMIC0@CHANNEL0-PHY-CTRL@PHY-HALF"
                offset="[1]"/>
      </register>
      <register description="DC Control register 0" format="hex0x" id="DMIC0@CHANNEL0-DC-CTRL"
                offset="0x90"
                size="4">
         <field description="DC block filter" format="enum" enum="d1e68587"
                id="DMIC0@CHANNEL0-DC-CTRL@DCPOLE"
                offset="[1:0]"/>
         <field description="Fine gain adjustment in the form of a number of bits to downshift."
                format="hex0x"
                id="DMIC0@CHANNEL0-DC-CTRL@DCGAIN"
                offset="[7:4]"/>
         <field description="Selects 16-bit saturation." format="enum" enum="d1e68675"
                id="DMIC0@CHANNEL0-DC-CTRL@SATURATEAT16BIT"
                offset="[8]"/>
      </register>
      <register description="Oversample Rate register 0" format="hex0x" id="DMIC0@CHANNEL1-OSR"
                offset="0x100"
                size="4">
         <field description="Selects the oversample rate for the related input channel."
                format="hex0x"
                id="DMIC0@CHANNEL1-OSR@OSR"
                offset="[7:0]"/>
      </register>
      <register description="DMIC Clock Register 0" format="hex0x" id="DMIC0@CHANNEL1-DIVHFCLK"
                offset="0x104"
                size="4">
         <field description="PDM clock divider value. 0 = divide by 1 1 = divide by 2 2 = divide by 3 3 = divide by 4 4 = divide by 6 5 = divide by 8 6 = divide by 12 7 = divide by 16 8 = divide by 24 9 = divide by 32 10 = divide by 48 11 = divide by 64 12 = divide by 96 13 = divide by 128 others = reserved."
                format="hex0x"
                id="DMIC0@CHANNEL1-DIVHFCLK@PDMDIV"
                offset="[3:0]"/>
      </register>
      <register description="Pre-Emphasis Filter Coefficient for 2 FS register" format="hex0x"
                id="DMIC0@CHANNEL1-PREAC2FSCOEF"
                offset="0x108"
                size="4">
         <field description="Pre-emphasis filer coefficient for 2 FS mode. 0 = Compensation = 0 1 = Compensation = 16 2 = Compensation = 15 3 = Compensation = 13"
                format="hex0x"
                id="DMIC0@CHANNEL1-PREAC2FSCOEF@COMP"
                offset="[1:0]"/>
      </register>
      <register description="Pre-Emphasis Filter Coefficient for 4 FS register" format="hex0x"
                id="DMIC0@CHANNEL1-PREAC4FSCOEF"
                offset="0x10c"
                size="4">
         <field description="Pre-emphasis filer coefficient for 4 FS mode. 0 = Compensation = 0 1 = Compensation = 16 2 = Compensation = 15 3 = Compensation = 13"
                format="hex0x"
                id="DMIC0@CHANNEL1-PREAC4FSCOEF@COMP"
                offset="[1:0]"/>
      </register>
      <register description="Decimator Gain Shift register" format="hex0x"
                id="DMIC0@CHANNEL1-GAINSHIFT"
                offset="0x110"
                size="4">
         <field description="Gain control, as a positive or negative (two's complement) number of bits to shift."
                format="hex0x"
                id="DMIC0@CHANNEL1-GAINSHIFT@GAIN"
                offset="[5:0]"/>
      </register>
      <register description="FIFO Control register 0" format="hex0x"
                id="DMIC0@CHANNEL1-FIFO-CTRL"
                offset="0x180"
                size="4">
         <field description="FIFO enable." format="enum" enum="d1e68108"
                id="DMIC0@CHANNEL1-FIFO-CTRL@ENABLE"
                offset="[0]"/>
         <field description="FIFO reset." format="enum" enum="d1e68154"
                id="DMIC0@CHANNEL1-FIFO-CTRL@RESETN"
                offset="[1]"/>
         <field description="Interrupt enable." format="enum" enum="d1e68200"
                id="DMIC0@CHANNEL1-FIFO-CTRL@INTEN"
                offset="[2]"/>
         <field description="DMA enable" format="enum" enum="d1e68246"
                id="DMIC0@CHANNEL1-FIFO-CTRL@DMAEN"
                offset="[3]"/>
         <field description="FIFO trigger level. Selects the data trigger level for interrupt or DMA operation. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode See Section 4.5.66 'Hardware Wake-up control register'. 0 = trigger when the FIFO has received one entry (is no longer empty). 1 = trigger when the FIFO has received two entries. 15 = trigger when the FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="DMIC0@CHANNEL1-FIFO-CTRL@TRIGLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO Status register 0" format="hex0x"
                id="DMIC0@CHANNEL1-FIFO-STATUS"
                offset="0x184"
                size="4">
         <field description="Interrupt flag. Asserted when FIFO data reaches the level specified in the FIFOCTRL register. Writing a one to this bit clears the flag. Remark: note that the bus clock to the DMIC subsystem must be running in order for an interrupt to occur."
                format="hex0x"
                id="DMIC0@CHANNEL1-FIFO-STATUS@INT"
                offset="[0]"/>
         <field description="Overrun flag. Indicates that a FIFO overflow has occurred at some point. Writing a one to this bit clears the flag. This flag does not cause an interrupt."
                format="hex0x"
                id="DMIC0@CHANNEL1-FIFO-STATUS@OVERRUN"
                offset="[1]"/>
         <field description="Underrun flag. Indicates that a FIFO underflow has occurred at some point. Writing a one to this bit clears the flag."
                format="hex0x"
                id="DMIC0@CHANNEL1-FIFO-STATUS@UNDERRUN"
                offset="[2]"/>
      </register>
      <register description="FIFO Data Register 0" format="hex0x" id="DMIC0@CHANNEL1-FIFO-DATA"
                offset="0x188"
                size="4">
         <field description="Data from the top of the input filter FIFO." format="hex0x"
                id="DMIC0@CHANNEL1-FIFO-DATA@DATA"
                offset="[23:0]"/>
      </register>
      <register description="PDM Source Configuration register 0" format="hex0x"
                id="DMIC0@CHANNEL1-PHY-CTRL"
                offset="0x18c"
                size="4">
         <field description="Capture PDM_DATA" format="enum" enum="d1e68467"
                id="DMIC0@CHANNEL1-PHY-CTRL@PHY-FALL"
                offset="[0]"/>
         <field description="Half rate sampling" format="enum" enum="d1e68513"
                id="DMIC0@CHANNEL1-PHY-CTRL@PHY-HALF"
                offset="[1]"/>
      </register>
      <register description="DC Control register 0" format="hex0x" id="DMIC0@CHANNEL1-DC-CTRL"
                offset="0x190"
                size="4">
         <field description="DC block filter" format="enum" enum="d1e68587"
                id="DMIC0@CHANNEL1-DC-CTRL@DCPOLE"
                offset="[1:0]"/>
         <field description="Fine gain adjustment in the form of a number of bits to downshift."
                format="hex0x"
                id="DMIC0@CHANNEL1-DC-CTRL@DCGAIN"
                offset="[7:4]"/>
         <field description="Selects 16-bit saturation." format="enum" enum="d1e68675"
                id="DMIC0@CHANNEL1-DC-CTRL@SATURATEAT16BIT"
                offset="[8]"/>
      </register>
      <register description="Channel Enable register" format="hex0x" id="DMIC0@CHANEN"
                offset="0xf00"
                size="4">
         <field description="Enable channel 0. When 1, PDM channel 0 is enabled."
                format="hex0x"
                id="DMIC0@CHANEN@EN-CH0"
                offset="[0]"/>
         <field description="Enable channel 1. When 1, PDM channel 1 is enabled."
                format="hex0x"
                id="DMIC0@CHANEN@EN-CH1"
                offset="[1]"/>
      </register>
      <register description="I/O Configuration register" format="hex0x" id="DMIC0@IOCFG"
                offset="0xf0c"
                size="4">
         <field description="Bypass CLK0. When 1, PDM_DATA1 becomes the clock for PDM channel 0. This provides for the possibility of an external codec taking over the PDM bus."
                format="hex0x"
                id="DMIC0@IOCFG@CLK-BYPASS0"
                offset="[0]"/>
         <field description="Bypass CLK1. When 1, PDM_DATA1 becomes the clock for PDM channel 1. This provides for the possibility of an external codec taking over the PDM bus."
                format="hex0x"
                id="DMIC0@IOCFG@CLK-BYPASS1"
                offset="[1]"/>
         <field description="Stereo PDM select. When 1, PDM_DATA0 is routed to both PDM channels in a configuration that supports a single stereo digital microphone."
                format="hex0x"
                id="DMIC0@IOCFG@STEREO-DATA0"
                offset="[2]"/>
      </register>
      <register description="Use 2FS register" format="hex0x" id="DMIC0@USE2FS" offset="0xf10"
                size="4">
         <field description="Use 2FS register" format="enum" enum="d1e68896"
                id="DMIC0@USE2FS@USE2FS"
                offset="[0]"/>
      </register>
      <register description="HWVAD input gain register" format="hex0x" id="DMIC0@HWVADGAIN"
                offset="0xf80"
                size="4">
         <field description="Shift value for input bits 0x00 -10 bits 0x01 -8 bits 0x02 -6 bits 0x03 -4 bits 0x04 -2 bits 0x05 0 bits (default) 0x06 +2 bits 0x07 +4 bits 0x08 +6 bits 0x09 +8 bits 0x0A +10 bits 0x0B +12 bits 0x0C +14 bits 0x0D to 0x0F Reserved."
                format="hex0x"
                id="DMIC0@HWVADGAIN@INPUTGAIN"
                offset="[3:0]"/>
      </register>
      <register description="HWVAD filter control register" format="hex0x" id="DMIC0@HWVADHPFS"
                offset="0xf84"
                size="4">
         <field description="High pass filter" format="enum" enum="d1e69017"
                id="DMIC0@HWVADHPFS@HPFS"
                offset="[1:0]"/>
      </register>
      <register description="HWVAD control register" format="hex0x" id="DMIC0@HWVADST10"
                offset="0xf88"
                size="4">
         <field description="Stage 0" format="enum" enum="d1e69103" id="DMIC0@HWVADST10@ST10"
                offset="[0]"/>
      </register>
      <register description="HWVAD filter reset register" format="hex0x" id="DMIC0@HWVADRSTT"
                offset="0xf8c"
                size="4">
         <field description="Writing a 1 resets all filter values" format="hex0x"
                id="DMIC0@HWVADRSTT@RSTT"
                offset="[0]"/>
      </register>
      <register description="HWVAD noise estimator gain register" format="hex0x"
                id="DMIC0@HWVADTHGN"
                offset="0xf90"
                size="4">
         <field description="Gain value for the noise estimator. Values 0 to 14. 0 corresponds to a gain of 1."
                format="hex0x"
                id="DMIC0@HWVADTHGN@THGN"
                offset="[3:0]"/>
      </register>
      <register description="HWVAD signal estimator gain register" format="hex0x"
                id="DMIC0@HWVADTHGS"
                offset="0xf94"
                size="4">
         <field description="Gain value for the signal estimator. Values 0 to 14. 0 corresponds to a gain of 1."
                format="hex0x"
                id="DMIC0@HWVADTHGS@THGS"
                offset="[3:0]"/>
      </register>
      <register description="HWVAD noise envelope estimator register" format="hex0x"
                id="DMIC0@HWVADLOWZ"
                offset="0xf98"
                readOnly="true"
                size="4">
         <field description="Noise envelope estimator value." format="hex0x"
                id="DMIC0@HWVADLOWZ@LOWZ"
                offset="[15:0]"/>
      </register>
      <register description="Module Identification register" format="hex0x" id="DMIC0@ID"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Indicates module ID and the number of channels in this DMIC interface."
                format="hex0x"
                id="DMIC0@ID@ID"
                offset="[31:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x CRC engine" id="CRC-ENGINE" size="0xc">
      <register description="CRC mode register" format="hex0x" id="CRC-ENGINE@MODE"
                offset="0x0"
                size="4">
         <field description="CRC polynomial: 1X = CRC-32 polynomial 01 = CRC-16 polynomial 00 = CRC-CCITT polynomial"
                format="hex0x"
                id="CRC-ENGINE@MODE@CRC-POLY"
                offset="[1:0]"/>
         <field description="Data bit order: 1 = Bit order reverse for CRC_WR_DATA (per byte) 0 = No bit order reverse for CRC_WR_DATA (per byte)"
                format="hex0x"
                id="CRC-ENGINE@MODE@BIT-RVS-WR"
                offset="[2]"/>
         <field description="Data complement: 1 = 1's complement for CRC_WR_DATA 0 = No 1's complement for CRC_WR_DATA"
                format="hex0x"
                id="CRC-ENGINE@MODE@CMPL-WR"
                offset="[3]"/>
         <field description="CRC sum bit order: 1 = Bit order reverse for CRC_SUM 0 = No bit order reverse for CRC_SUM"
                format="hex0x"
                id="CRC-ENGINE@MODE@BIT-RVS-SUM"
                offset="[4]"/>
         <field description="CRC sum complement: 1 = 1's complement for CRC_SUM 0 = No 1's complement for CRC_SUM"
                format="hex0x"
                id="CRC-ENGINE@MODE@CMPL-SUM"
                offset="[5]"/>
      </register>
      <register description="CRC seed register" format="hex0x" id="CRC-ENGINE@SEED"
                offset="0x4"
                size="4">
         <field description="A write access to this register will load CRC seed value to CRC_SUM register with selected bit order and 1's complement pre-processes. A write access to this register will overrule the CRC calculation in progresses."
                format="hex0x"
                id="CRC-ENGINE@SEED@CRC-SEED"
                offset="[31:0]"/>
      </register>
      <register description="CRC checksum register" format="hex0x" id="CRC-ENGINE@SUM"
                offset="0x8"
                readOnly="true"
                size="4">
         <field description="The most recent CRC sum can be read through this register with selected bit order and 1's complement post-processes."
                format="hex0x"
                id="CRC-ENGINE@SUM@CRC-SUM"
                offset="[31:0]"/>
      </register>
      <register description="CRC data register" format="hex0x" id="CRC-ENGINE@WR-DATA"
                offset="0x8"
                writeOnly="true"
                size="4">
         <field description="Data written to this register will be taken to perform CRC calculation with selected bit order and 1's complement pre-process. Any write size 8, 16 or 32-bit are allowed and accept back-to-back transactions."
                format="hex0x"
                id="CRC-ENGINE@WR-DATA@CRC-WR-DATA"
                offset="[31:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2S interface" id="I2S0" size="0xe48">
      <register description="Configuration register 1 for the primary channel pair."
                format="hex0x"
                id="I2S0@CFG1"
                offset="0xc00"
                size="4">
         <field description="Main enable for I 2S function in this Flexcomm" format="enum"
                enum="d1e69747"
                id="I2S0@CFG1@MAINENABLE"
                offset="[0]"/>
         <field description="Data flow Pause. Allows pausing data flow between the I2S serializer/deserializer and the FIFO. This could be done in order to change streams, or while restarting after a data underflow or overflow. When paused, FIFO operations can be done without corrupting data that is in the process of being sent or received. Once a data pause has been requested, the interface may need to complete sending data that was in progress before interrupting the flow of data. Software must check that the pause is actually in effect before taking action. This is done by monitoring the DATAPAUSED flag in the STAT register. When DATAPAUSE is cleared, data transfer will resume at the beginning of the next frame."
                format="enum"
                enum="d1e69793"
                id="I2S0@CFG1@DATAPAUSE"
                offset="[1]"/>
         <field description="Provides the number of I2S channel pairs in this Flexcomm This is a read-only field whose value may be different in other Flexcomms. 00 = there is 1 I2S channel pair in this Flexcomm. 01 = there are 2 I2S channel pairs in this Flexcomm. 10 = there are 3 I2S channel pairs in this Flexcomm. 11 = there are 4 I2S channel pairs in this Flexcomm."
                format="enum"
                enum="d1e69839"
                id="I2S0@CFG1@PAIRCOUNT"
                offset="[3:2]"/>
         <field description="Master / slave configuration selection, determining how SCK and WS are used by all channel pairs in this Flexcomm."
                format="enum"
                enum="d1e69909"
                id="I2S0@CFG1@MSTSLVCFG"
                offset="[5:4]"/>
         <field description="Selects the basic I2S operating mode. Other configurations modify this to obtain all supported cases. See Formats and modes for examples."
                format="enum"
                enum="d1e69979"
                id="I2S0@CFG1@MODE"
                offset="[7:6]"/>
         <field description="Right channel data is in the Low portion of FIFO data. Essentially, this swaps left and right channel data as it is transferred to or from the FIFO. This bit is not used if the data width is greater than 24 bits or if PDMDATA = 1. Note that if the ONECHANNEL field (bit 10 of this register) = 1, the one channel to be used is the nominally the left channel. POSITION can still place that data in the frame where right channel data is normally located. if all enabled channel pairs have ONECHANNEL = 1, then RIGHTLOW = 1 is not allowed."
                format="enum"
                enum="d1e70050"
                id="I2S0@CFG1@RIGHTLOW"
                offset="[8]"/>
         <field description="Left Justify data." format="enum" enum="d1e70096"
                id="I2S0@CFG1@LEFTJUST"
                offset="[9]"/>
         <field description="Single channel mode. Applies to both transmit and receive. This configuration bit applies only to the first I2S channel pair. Other channel pairs may select this mode independently in their separate CFG1 registers."
                format="enum"
                enum="d1e70142"
                id="I2S0@CFG1@ONECHANNEL"
                offset="[10]"/>
         <field description="PDM Data selection. This bit controls the data source for I2S transmit, and cannot be set in Rx mode. This bit only has an effect if the device the Flexcomm resides in includes a D-Mic subsystem. For the LPC5411x, this bit applies only to Flexcomm 7."
                format="enum"
                enum="d1e70188"
                id="I2S0@CFG1@PDMDATA"
                offset="[11]"/>
         <field description="SCK polarity." format="enum" enum="d1e70234"
                id="I2S0@CFG1@SCK-POL"
                offset="[12]"/>
         <field description="WS polarity." format="enum" enum="d1e70280" id="I2S0@CFG1@WS-POL"
                offset="[13]"/>
         <field description="Data Length, minus 1 encoded, defines the number of data bits to be transmitted or received for all I2S channel pairs in this Flexcomm. Note that data is only driven to or received from SDA for the number of bits defined by DATALEN. DATALEN is also used in these ways by the I2S: Determines the size of data transfers between the FIFO and the I2S serializer/deserializer. See FIFO buffer configurations and usage In mode 1, 2, and 3, determines the location of right data following left data in the frame. In mode 3 (where WS has a one data slot long pulse at the beginning of each data frame) determines the duration of the WS pulse. Values: 0x00 to 0x02 = not supported 0x03 = data is 4 bits in length 0x04 = data is 5 bits in length 0x1F = data is 32 bits in length"
                format="hex0x"
                id="I2S0@CFG1@DATALEN"
                offset="[20:16]"/>
      </register>
      <register description="Configuration register 2 for the primary channel pair."
                format="hex0x"
                id="I2S0@CFG2"
                offset="0xc04"
                size="4">
         <field description="Frame Length, minus 1 encoded, defines the number of clocks and data bits in the frames that this channel pair participates in. See Frame format. 0x000 to 0x002 = not supported 0x003 = frame is 4 bits in total length 0x004 = frame is 5 bits in total length 0x1FF = frame is 512 bits in total length if FRAMELEN is an defines an odd length frame (e.g. 33 clocks) in mode 0 or 1, the extra clock appears in the right half. When MODE = 3, FRAMELEN must be larger than DATALEN in order for the WS pulse to be generated correctly."
                format="hex0x"
                id="I2S0@CFG2@FRAMELEN"
                offset="[8:0]"/>
         <field description="Data Position. Defines the location within the frame of the data for this channel pair. POSITION + DATALEN must be less than FRAMELEN. See Frame format. When MODE = 0, POSITION defines the location of data in both the left phase and right phase, starting one clock after the WS edge. In other modes, POSITION defines the location of data within the entire frame. ONECHANNEL = 1 while MODE = 0 is a special case, see the description of ONECHANNEL. The combination of DATALEN and the POSITION fields of all channel pairs must be made such that the channels do not overlap within the frame. 0x000 = data begins at bit position 0 (the first bit position) within the frame or WS phase. 0x001 = data begins at bit position 1 within the frame or WS phase. 0x002 = data begins at bit position 2 within the frame or WS phase."
                format="hex0x"
                id="I2S0@CFG2@POSITION"
                offset="[24:16]"/>
      </register>
      <register description="Status register for the primary channel pair." format="hex0x"
                id="I2S0@STAT"
                offset="0xc08"
                size="4">
         <field description="Busy status for the primary channel pair. Other BUSY flags may be found in the STAT register for each channel pair."
                format="enum"
                enum="d1e70437"
                id="I2S0@STAT@BUSY"
                offset="[0]"/>
         <field description="Slave Frame Error flag. This applies when at least one channel pair is operating as a slave. An error indicates that the incoming WS signal did not transition as expected due to a mismatch between FRAMELEN and the actual incoming I2S stream."
                format="enum"
                enum="d1e70483"
                id="I2S0@STAT@SLVFRMERR"
                offset="[1]"/>
         <field description="Left/Right indication. This flag is considered to be a debugging aid and is not expected to be used by an I2S driver. Valid when one channel pair is busy. Indicates left or right data being processed for the currently busy channel pair."
                format="enum"
                enum="d1e70529"
                id="I2S0@STAT@LR"
                offset="[2]"/>
         <field description="Data Paused status flag. Applies to all I2S channels"
                format="enum"
                enum="d1e70575"
                id="I2S0@STAT@DATAPAUSED"
                offset="[3]"/>
      </register>
      <register description="Clock divider, used by all channel pairs." format="hex0x"
                id="I2S0@DIV"
                offset="0xc1c"
                size="4">
         <field description="This field controls how this I2S block uses the Flexcomm function clock. 0x000 = The Flexcomm function clock is used directly. 0x001 = The Flexcomm function clock is divided by 2. 0x002 = The Flexcomm function clock is divided by 3. 0xFFF = The Flexcomm function clock is divided by 4,096."
                format="hex0x"
                id="I2S0@DIV@DIV"
                offset="[11:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="I2S0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e70695"
                id="I2S0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e70741"
                id="I2S0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="Transmit I2S empty 0. Determines the value sent by the I2S in transmit mode if the TX FIFO becomes empty. This value is sent repeatedly until the I2S is paused, the error is cleared, new data is provided, and the I2S is un-paused."
                format="enum"
                enum="d1e70787"
                id="I2S0@FIFOCFG@TXI2SSE0"
                offset="[2]"/>
         <field description="Packing format for 48-bit data. This relates to how data is entered into or taken from the FIFO by software or DMA."
                format="enum"
                enum="d1e70833"
                id="I2S0@FIFOCFG@PACK48"
                offset="[3]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="I2S0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e70898"
                id="I2S0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e70944"
                id="I2S0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e70990"
                id="I2S0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e71036"
                id="I2S0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="I2S0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="I2S0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
         <field description="Pop FIFO for debug reads." format="enum" enum="d1e71119"
                id="I2S0@FIFOCFG@POPDBG"
                offset="[18]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="I2S0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="I2S0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="I2S0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e71385"
                id="I2S0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e71431"
                id="I2S0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="I2S0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="I2S0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="I2S0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e71541"
                id="I2S0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e71587"
                id="I2S0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e71633"
                id="I2S0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e71679"
                id="I2S0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="I2S0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="I2S0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="I2S0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="I2S0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="I2S0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="I2S0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="I2S0@FIFOWR" offset="0xe20"
                writeOnly="true"
                size="4">
         <field description="Transmit data to the FIFO. The number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFOWR@TXDATA"
                offset="[31:0]"/>
      </register>
      <register description="FIFO write data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA."
                format="hex0x"
                id="I2S0@FIFOWR48H"
                offset="0xe24"
                writeOnly="true"
                size="4">
         <field description="Transmit data to the FIFO. Whether this register is used and the number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFOWR48H@TXDATA"
                offset="[23:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="I2S0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFORD@RXDATA"
                offset="[31:0]"/>
      </register>
      <register description="FIFO read data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA."
                format="hex0x"
                id="I2S0@FIFORD48H"
                offset="0xe34"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. Whether this register is used and the number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFORD48H@RXDATA"
                offset="[23:0]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="I2S0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="I2S0@FIFORDNOPOP@RXDATA"
                offset="[31:0]"/>
      </register>
      <register description="FIFO data read for upper data bits with no FIFO pop. May only be used if the I2S is configured for 2x 24-bit data and not using DMA."
                format="hex0x"
                id="I2S0@FIFORD48HNOPOP"
                offset="0xe44"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. Whether this register is used and the number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFORD48HNOPOP@RXDATA"
                offset="[23:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x I2S interface" id="I2S1" size="0xe48">
      <register description="Configuration register 1 for the primary channel pair."
                format="hex0x"
                id="I2S0@CFG1"
                offset="0xc00"
                size="4">
         <field description="Main enable for I 2S function in this Flexcomm" format="enum"
                enum="d1e69747"
                id="I2S0@CFG1@MAINENABLE"
                offset="[0]"/>
         <field description="Data flow Pause. Allows pausing data flow between the I2S serializer/deserializer and the FIFO. This could be done in order to change streams, or while restarting after a data underflow or overflow. When paused, FIFO operations can be done without corrupting data that is in the process of being sent or received. Once a data pause has been requested, the interface may need to complete sending data that was in progress before interrupting the flow of data. Software must check that the pause is actually in effect before taking action. This is done by monitoring the DATAPAUSED flag in the STAT register. When DATAPAUSE is cleared, data transfer will resume at the beginning of the next frame."
                format="enum"
                enum="d1e69793"
                id="I2S0@CFG1@DATAPAUSE"
                offset="[1]"/>
         <field description="Provides the number of I2S channel pairs in this Flexcomm This is a read-only field whose value may be different in other Flexcomms. 00 = there is 1 I2S channel pair in this Flexcomm. 01 = there are 2 I2S channel pairs in this Flexcomm. 10 = there are 3 I2S channel pairs in this Flexcomm. 11 = there are 4 I2S channel pairs in this Flexcomm."
                format="enum"
                enum="d1e69839"
                id="I2S0@CFG1@PAIRCOUNT"
                offset="[3:2]"/>
         <field description="Master / slave configuration selection, determining how SCK and WS are used by all channel pairs in this Flexcomm."
                format="enum"
                enum="d1e69909"
                id="I2S0@CFG1@MSTSLVCFG"
                offset="[5:4]"/>
         <field description="Selects the basic I2S operating mode. Other configurations modify this to obtain all supported cases. See Formats and modes for examples."
                format="enum"
                enum="d1e69979"
                id="I2S0@CFG1@MODE"
                offset="[7:6]"/>
         <field description="Right channel data is in the Low portion of FIFO data. Essentially, this swaps left and right channel data as it is transferred to or from the FIFO. This bit is not used if the data width is greater than 24 bits or if PDMDATA = 1. Note that if the ONECHANNEL field (bit 10 of this register) = 1, the one channel to be used is the nominally the left channel. POSITION can still place that data in the frame where right channel data is normally located. if all enabled channel pairs have ONECHANNEL = 1, then RIGHTLOW = 1 is not allowed."
                format="enum"
                enum="d1e70050"
                id="I2S0@CFG1@RIGHTLOW"
                offset="[8]"/>
         <field description="Left Justify data." format="enum" enum="d1e70096"
                id="I2S0@CFG1@LEFTJUST"
                offset="[9]"/>
         <field description="Single channel mode. Applies to both transmit and receive. This configuration bit applies only to the first I2S channel pair. Other channel pairs may select this mode independently in their separate CFG1 registers."
                format="enum"
                enum="d1e70142"
                id="I2S0@CFG1@ONECHANNEL"
                offset="[10]"/>
         <field description="PDM Data selection. This bit controls the data source for I2S transmit, and cannot be set in Rx mode. This bit only has an effect if the device the Flexcomm resides in includes a D-Mic subsystem. For the LPC5411x, this bit applies only to Flexcomm 7."
                format="enum"
                enum="d1e70188"
                id="I2S0@CFG1@PDMDATA"
                offset="[11]"/>
         <field description="SCK polarity." format="enum" enum="d1e70234"
                id="I2S0@CFG1@SCK-POL"
                offset="[12]"/>
         <field description="WS polarity." format="enum" enum="d1e70280" id="I2S0@CFG1@WS-POL"
                offset="[13]"/>
         <field description="Data Length, minus 1 encoded, defines the number of data bits to be transmitted or received for all I2S channel pairs in this Flexcomm. Note that data is only driven to or received from SDA for the number of bits defined by DATALEN. DATALEN is also used in these ways by the I2S: Determines the size of data transfers between the FIFO and the I2S serializer/deserializer. See FIFO buffer configurations and usage In mode 1, 2, and 3, determines the location of right data following left data in the frame. In mode 3 (where WS has a one data slot long pulse at the beginning of each data frame) determines the duration of the WS pulse. Values: 0x00 to 0x02 = not supported 0x03 = data is 4 bits in length 0x04 = data is 5 bits in length 0x1F = data is 32 bits in length"
                format="hex0x"
                id="I2S0@CFG1@DATALEN"
                offset="[20:16]"/>
      </register>
      <register description="Configuration register 2 for the primary channel pair."
                format="hex0x"
                id="I2S0@CFG2"
                offset="0xc04"
                size="4">
         <field description="Frame Length, minus 1 encoded, defines the number of clocks and data bits in the frames that this channel pair participates in. See Frame format. 0x000 to 0x002 = not supported 0x003 = frame is 4 bits in total length 0x004 = frame is 5 bits in total length 0x1FF = frame is 512 bits in total length if FRAMELEN is an defines an odd length frame (e.g. 33 clocks) in mode 0 or 1, the extra clock appears in the right half. When MODE = 3, FRAMELEN must be larger than DATALEN in order for the WS pulse to be generated correctly."
                format="hex0x"
                id="I2S0@CFG2@FRAMELEN"
                offset="[8:0]"/>
         <field description="Data Position. Defines the location within the frame of the data for this channel pair. POSITION + DATALEN must be less than FRAMELEN. See Frame format. When MODE = 0, POSITION defines the location of data in both the left phase and right phase, starting one clock after the WS edge. In other modes, POSITION defines the location of data within the entire frame. ONECHANNEL = 1 while MODE = 0 is a special case, see the description of ONECHANNEL. The combination of DATALEN and the POSITION fields of all channel pairs must be made such that the channels do not overlap within the frame. 0x000 = data begins at bit position 0 (the first bit position) within the frame or WS phase. 0x001 = data begins at bit position 1 within the frame or WS phase. 0x002 = data begins at bit position 2 within the frame or WS phase."
                format="hex0x"
                id="I2S0@CFG2@POSITION"
                offset="[24:16]"/>
      </register>
      <register description="Status register for the primary channel pair." format="hex0x"
                id="I2S0@STAT"
                offset="0xc08"
                size="4">
         <field description="Busy status for the primary channel pair. Other BUSY flags may be found in the STAT register for each channel pair."
                format="enum"
                enum="d1e70437"
                id="I2S0@STAT@BUSY"
                offset="[0]"/>
         <field description="Slave Frame Error flag. This applies when at least one channel pair is operating as a slave. An error indicates that the incoming WS signal did not transition as expected due to a mismatch between FRAMELEN and the actual incoming I2S stream."
                format="enum"
                enum="d1e70483"
                id="I2S0@STAT@SLVFRMERR"
                offset="[1]"/>
         <field description="Left/Right indication. This flag is considered to be a debugging aid and is not expected to be used by an I2S driver. Valid when one channel pair is busy. Indicates left or right data being processed for the currently busy channel pair."
                format="enum"
                enum="d1e70529"
                id="I2S0@STAT@LR"
                offset="[2]"/>
         <field description="Data Paused status flag. Applies to all I2S channels"
                format="enum"
                enum="d1e70575"
                id="I2S0@STAT@DATAPAUSED"
                offset="[3]"/>
      </register>
      <register description="Clock divider, used by all channel pairs." format="hex0x"
                id="I2S0@DIV"
                offset="0xc1c"
                size="4">
         <field description="This field controls how this I2S block uses the Flexcomm function clock. 0x000 = The Flexcomm function clock is used directly. 0x001 = The Flexcomm function clock is divided by 2. 0x002 = The Flexcomm function clock is divided by 3. 0xFFF = The Flexcomm function clock is divided by 4,096."
                format="hex0x"
                id="I2S0@DIV@DIV"
                offset="[11:0]"/>
      </register>
      <register description="FIFO configuration and enable register." format="hex0x"
                id="I2S0@FIFOCFG"
                offset="0xe00"
                size="4">
         <field description="Enable the transmit FIFO." format="enum" enum="d1e70695"
                id="I2S0@FIFOCFG@ENABLETX"
                offset="[0]"/>
         <field description="Enable the receive FIFO." format="enum" enum="d1e70741"
                id="I2S0@FIFOCFG@ENABLERX"
                offset="[1]"/>
         <field description="Transmit I2S empty 0. Determines the value sent by the I2S in transmit mode if the TX FIFO becomes empty. This value is sent repeatedly until the I2S is paused, the error is cleared, new data is provided, and the I2S is un-paused."
                format="enum"
                enum="d1e70787"
                id="I2S0@FIFOCFG@TXI2SSE0"
                offset="[2]"/>
         <field description="Packing format for 48-bit data. This relates to how data is entered into or taken from the FIFO by software or DMA."
                format="enum"
                enum="d1e70833"
                id="I2S0@FIFOCFG@PACK48"
                offset="[3]"/>
         <field description="FIFO size configuration. This is a read-only field. 0x0 = FIFO is configured as 16 entries of 8 bits. 0x1, 0x2, 0x3 = not applicable to USART."
                format="hex0x"
                id="I2S0@FIFOCFG@SIZE"
                offset="[5:4]"/>
         <field description="DMA configuration for transmit." format="enum" enum="d1e70898"
                id="I2S0@FIFOCFG@DMATX"
                offset="[12]"/>
         <field description="DMA configuration for receive." format="enum" enum="d1e70944"
                id="I2S0@FIFOCFG@DMARX"
                offset="[13]"/>
         <field description="Wake-up for transmit FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e70990"
                id="I2S0@FIFOCFG@WAKETX"
                offset="[14]"/>
         <field description="Wake-up for receive FIFO level. This allows the device to be woken from reduced power modes (up to power-down, as long as the peripheral function works in that power mode) without enabling the TXLVL interrupt. Only DMA wakes up, processes data, and goes back to sleep. The CPU will remain stopped until woken by another cause, such as DMA completion. See Hardware Wake-up control register."
                format="enum"
                enum="d1e71036"
                id="I2S0@FIFOCFG@WAKERX"
                offset="[15]"/>
         <field description="Empty command for the transmit FIFO. When a 1 is written to this bit, the TX FIFO is emptied."
                format="hex0x"
                id="I2S0@FIFOCFG@EMPTYTX"
                offset="[16]"/>
         <field description="Empty command for the receive FIFO. When a 1 is written to this bit, the RX FIFO is emptied."
                format="hex0x"
                id="I2S0@FIFOCFG@EMPTYRX"
                offset="[17]"/>
         <field description="Pop FIFO for debug reads." format="enum" enum="d1e71119"
                id="I2S0@FIFOCFG@POPDBG"
                offset="[18]"/>
      </register>
      <register description="FIFO status register." format="hex0x" id="I2S0@FIFOSTAT"
                offset="0xe04"
                size="4">
         <field description="TX FIFO error. Will be set if a transmit FIFO error occurs. This could be an overflow caused by pushing data into a full FIFO, or by an underflow if the FIFO is empty when data is needed. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error. Will be set if a receive FIFO overflow occurs, caused by software or DMA not emptying the FIFO fast enough. Cleared by writing a 1 to this bit."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXERR"
                offset="[1]"/>
         <field description="Peripheral interrupt. When 1, this indicates that the peripheral function has asserted an interrupt. The details can be found by reading the peripheral's STAT register."
                format="hex0x"
                id="I2S0@FIFOSTAT@PERINT"
                offset="[3]"/>
         <field description="Transmit FIFO empty. When 1, the transmit FIFO is empty. The peripheral may still be processing the last piece of data."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXEMPTY"
                offset="[4]"/>
         <field description="Transmit FIFO not full. When 1, the transmit FIFO is not full, so more data can be written. When 0, the transmit FIFO is full and another write would cause it to overflow."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXNOTFULL"
                offset="[5]"/>
         <field description="Receive FIFO not empty. When 1, the receive FIFO is not empty, so data can be read. When 0, the receive FIFO is empty."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXNOTEMPTY"
                offset="[6]"/>
         <field description="Receive FIFO full. When 1, the receive FIFO is full. Data needs to be read out to prevent the peripheral from causing an overflow."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXFULL"
                offset="[7]"/>
         <field description="Transmit FIFO current level. A 0 means the TX FIFO is currently empty, and the TXEMPTY and TXNOTFULL flags will be 1. Other values tell how much data is actually in the TX FIFO at the point where the read occurs. If the TX FIFO is full, the TXEMPTY and TXNOTFULL flags will be 0."
                format="hex0x"
                id="I2S0@FIFOSTAT@TXLVL"
                offset="[12:8]"/>
         <field description="Receive FIFO current level. A 0 means the RX FIFO is currently empty, and the RXFULL and RXNOTEMPTY flags will be 0. Other values tell how much data is actually in the RX FIFO at the point where the read occurs. If the RX FIFO is full, the RXFULL and RXNOTEMPTY flags will be 1."
                format="hex0x"
                id="I2S0@FIFOSTAT@RXLVL"
                offset="[20:16]"/>
      </register>
      <register description="FIFO trigger settings for interrupt and DMA request."
                format="hex0x"
                id="I2S0@FIFOTRIG"
                offset="0xe08"
                size="4">
         <field description="Transmit FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMATX in FIFOCFG is set."
                format="enum"
                enum="d1e71385"
                id="I2S0@FIFOTRIG@TXLVLENA"
                offset="[0]"/>
         <field description="Receive FIFO level trigger enable. This trigger will become an interrupt if enabled in FIFOINTENSET, or a DMA trigger if DMARX in FIFOCFG is set."
                format="enum"
                enum="d1e71431"
                id="I2S0@FIFOTRIG@RXLVLENA"
                offset="[1]"/>
         <field description="Transmit FIFO level trigger point. This field is used only when TXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the TX FIFO becomes empty. 1 = trigger when the TX FIFO level decreases to one entry. 15 = trigger when the TX FIFO level decreases to 15 entries (is no longer full)."
                format="hex0x"
                id="I2S0@FIFOTRIG@TXLVL"
                offset="[11:8]"/>
         <field description="Receive FIFO level trigger point. The RX FIFO level is checked when a new piece of data is received. This field is used only when RXLVLENA = 1. If enabled to do so, the FIFO level can wake up the device just enough to perform DMA, then return to the reduced power mode. See Hardware Wake-up control register. 0 = trigger when the RX FIFO has received one entry (is no longer empty). 1 = trigger when the RX FIFO has received two entries. 15 = trigger when the RX FIFO has received 16 entries (has become full)."
                format="hex0x"
                id="I2S0@FIFOTRIG@RXLVL"
                offset="[19:16]"/>
      </register>
      <register description="FIFO interrupt enable set (enable) and read register."
                format="hex0x"
                id="I2S0@FIFOINTENSET"
                offset="0xe10"
                size="4">
         <field description="Determines whether an interrupt occurs when a transmit error occurs, based on the TXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e71541"
                id="I2S0@FIFOINTENSET@TXERR"
                offset="[0]"/>
         <field description="Determines whether an interrupt occurs when a receive error occurs, based on the RXERR flag in the FIFOSTAT register."
                format="enum"
                enum="d1e71587"
                id="I2S0@FIFOINTENSET@RXERR"
                offset="[1]"/>
         <field description="Determines whether an interrupt occurs when a the transmit FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e71633"
                id="I2S0@FIFOINTENSET@TXLVL"
                offset="[2]"/>
         <field description="Determines whether an interrupt occurs when a the receive FIFO reaches the level specified by the TXLVL field in the FIFOTRIG register."
                format="enum"
                enum="d1e71679"
                id="I2S0@FIFOINTENSET@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt enable clear (disable) and read register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR"
                offset="0xe14"
                size="4">
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@TXERR"
                offset="[0]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@RXERR"
                offset="[1]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@TXLVL"
                offset="[2]"/>
         <field description="Writing one clears the corresponding bits in the FIFOINTENSET register."
                format="hex0x"
                id="I2S0@FIFOINTENCLR@RXLVL"
                offset="[3]"/>
      </register>
      <register description="FIFO interrupt status register." format="hex0x"
                id="I2S0@FIFOINTSTAT"
                offset="0xe18"
                readOnly="true"
                size="4">
         <field description="TX FIFO error." format="hex0x" id="I2S0@FIFOINTSTAT@TXERR"
                offset="[0]"/>
         <field description="RX FIFO error." format="hex0x" id="I2S0@FIFOINTSTAT@RXERR"
                offset="[1]"/>
         <field description="Transmit FIFO level interrupt." format="hex0x"
                id="I2S0@FIFOINTSTAT@TXLVL"
                offset="[2]"/>
         <field description="Receive FIFO level interrupt." format="hex0x"
                id="I2S0@FIFOINTSTAT@RXLVL"
                offset="[3]"/>
         <field description="Peripheral interrupt." format="hex0x" id="I2S0@FIFOINTSTAT@PERINT"
                offset="[4]"/>
      </register>
      <register description="FIFO write data." format="hex0x" id="I2S0@FIFOWR" offset="0xe20"
                writeOnly="true"
                size="4">
         <field description="Transmit data to the FIFO. The number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFOWR@TXDATA"
                offset="[31:0]"/>
      </register>
      <register description="FIFO write data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA."
                format="hex0x"
                id="I2S0@FIFOWR48H"
                offset="0xe24"
                writeOnly="true"
                size="4">
         <field description="Transmit data to the FIFO. Whether this register is used and the number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFOWR48H@TXDATA"
                offset="[23:0]"/>
      </register>
      <register description="FIFO read data." format="hex0x" id="I2S0@FIFORD" offset="0xe30"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. The number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFORD@RXDATA"
                offset="[31:0]"/>
      </register>
      <register description="FIFO read data for upper data bits. May only be used if the I2S is configured for 2x 24-bit data and not using DMA."
                format="hex0x"
                id="I2S0@FIFORD48H"
                offset="0xe34"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. Whether this register is used and the number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFORD48H@RXDATA"
                offset="[23:0]"/>
      </register>
      <register description="FIFO data read with no FIFO pop." format="hex0x"
                id="I2S0@FIFORDNOPOP"
                offset="0xe40"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO." format="hex0x"
                id="I2S0@FIFORDNOPOP@RXDATA"
                offset="[31:0]"/>
      </register>
      <register description="FIFO data read for upper data bits with no FIFO pop. May only be used if the I2S is configured for 2x 24-bit data and not using DMA."
                format="hex0x"
                id="I2S0@FIFORD48HNOPOP"
                offset="0xe44"
                readOnly="true"
                size="4">
         <field description="Received data from the FIFO. Whether this register is used and the number of bits used depends on configuration details."
                format="hex0x"
                id="I2S0@FIFORD48HNOPOP@RXDATA"
                offset="[23:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="LPC5411x 12-bit ADC controller (ADC)" id="ADC0"
               size="0x74">
      <register description="ADC Control register. Contains the clock divide value, resolution selection, sampling time selection, and mode controls."
                format="hex0x"
                id="ADC0@CTRL"
                offset="0x0"
                size="4">
         <field description="In synchronous mode only, the system clock is divided by this value plus one to produce the clock for the ADC converter, which should be less than or equal to 72 MHz. Typically, software should program the smallest value in this field that yields this maximum clock rate or slightly less, but in certain cases (such as a high-impedance analog source) a slower clock may be desirable. This field is ignored in the asynchronous operating mode."
                format="hex0x"
                id="ADC0@CTRL@CLKDIV"
                offset="[7:0]"/>
         <field description="Select clock mode." format="enum" enum="d1e72364"
                id="ADC0@CTRL@ASYNMODE"
                offset="[8]"/>
         <field description="The number of bits of ADC resolution. Accuracy can be reduced to achieve higher conversion rates. A single conversion (including one conversion in a burst or sequence) requires the selected number of bits of resolution plus 3 ADC clocks. This field must only be altered when the ADC is fully idle. Changing it during any kind of ADC operation may have unpredictable results. ADC clock frequencies for various resolutions must not exceed: - 5x the system clock rate for 12-bit resolution - 4.3x the system clock rate for 10-bit resolution - 3.6x the system clock for 8-bit resolution - 3x the bus clock rate for 6-bit resolution"
                format="enum"
                enum="d1e72410"
                id="ADC0@CTRL@RESOL"
                offset="[10:9]"/>
         <field description="Bypass Calibration. This bit may be set to avoid the need to calibrate if offset error is not a concern in the application."
                format="enum"
                enum="d1e72480"
                id="ADC0@CTRL@BYPASSCAL"
                offset="[11]"/>
         <field description="Sample Time. The default sampling period (TSAMP = '000') at the start of each conversion is 2.5 ADC clock periods. Depending on a variety of factors, including operating conditions and the output impedance of the analog source, longer sampling times may be required. See Section 28.7.10. The TSAMP field specifies the number of additional ADC clock cycles, from zero to seven, by which the sample period will be extended. The total conversion time will increase by the same number of clocks. 000 - The sample period will be the default 2.5 ADC clocks. A complete conversion with 12-bits of accuracy will require 15 clocks. 001- The sample period will be extended by one ADC clock to a total of 3.5 clock periods. A complete 12-bit conversion will require 16 clocks. 010 - The sample period will be extended by two clocks to 4.5 ADC clock cycles. A complete 12-bit conversion will require 17 ADC clocks. 111 - The sample period will be extended by seven clocks to 9.5 ADC clock cycles. A complete 12-bit conversion will require 22 ADC clocks."
                format="hex0x"
                id="ADC0@CTRL@TSAMP"
                offset="[14:12]"/>
      </register>
      <register description="Input Select. Allows selection of the temperature sensor as an alternate input to ADC channel 0."
                format="hex0x"
                id="ADC0@INSEL"
                offset="0x4"
                size="4">
         <field description="Selects the input source for channel 0. All other values are reserved."
                format="enum"
                enum="d1e72572"
                id="ADC0@INSEL@SEL"
                offset="[1:0]"/>
      </register>
      <register description="ADC Conversion Sequence-n control register: Controls triggering and channel selection for conversion sequence-n. Also specifies interrupt mode for sequence-n."
                format="hex0x"
                id="ADC0@SEQ-CTRLA"
                offset="0x8"
                size="4">
         <field description="Selects which one or more of the ADC channels will be sampled and converted when this sequence is launched. A 1 in any bit of this field will cause the corresponding channel to be included in the conversion sequence, where bit 0 corresponds to channel 0, bit 1 to channel 1 and so forth. When this conversion sequence is triggered, either by a hardware trigger or via software command, ADC conversions will be performed on each enabled channel, in sequence, beginning with the lowest-ordered channel. This field can ONLY be changed while SEQA_ENA (bit 31) is LOW. It is allowed to change this field and set bit 31 in the same write."
                format="hex0x"
                id="ADC0@SEQ-CTRLA@CHANNELS"
                offset="[11:0]"/>
         <field description="Selects which of the available hardware trigger sources will cause this conversion sequence to be initiated. Program the trigger input number in this field. See Table 476. In order to avoid generating a spurious trigger, it is recommended writing to this field only when SEQA_ENA (bit 31) is low. It is safe to change this field and set bit 31 in the same write."
                format="hex0x"
                id="ADC0@SEQ-CTRLA@TRIGGER"
                offset="[17:12]"/>
         <field description="Select the polarity of the selected input trigger for this conversion sequence. In order to avoid generating a spurious trigger, it is recommended writing to this field only when SEQA_ENA (bit 31) is low. It is safe to change this field and set bit 31 in the same write."
                format="enum"
                enum="d1e72691"
                id="ADC0@SEQ-CTRLA@TRIGPOL"
                offset="[18]"/>
         <field description="Setting this bit allows the hardware trigger input to bypass synchronization flip-flop stages and therefore shorten the time between the trigger input signal and the start of a conversion. There are slightly different criteria for whether or not this bit can be set depending on the clock operating mode: Synchronous mode (the ASYNMODE in the CTRL register = 0): Synchronization may be bypassed (this bit may be set) if the selected trigger source is already synchronous with the main system clock (eg. coming from an on-chip, system-clock-based timer). Whether this bit is set or not, a trigger pulse must be maintained for at least one system clock period. Asynchronous mode (the ASYNMODE in the CTRL register = 1): Synchronization may be bypassed (this bit may be set) if it is certain that the duration of a trigger input pulse will be at least one cycle of the ADC clock (regardless of whether the trigger comes from and on-chip or off-chip source). If this bit is NOT set, the trigger pulse must at least be maintained for one system clock period."
                format="enum"
                enum="d1e72737"
                id="ADC0@SEQ-CTRLA@SYNCBYPASS"
                offset="[19]"/>
         <field description="Writing a 1 to this field will launch one pass through this conversion sequence. The behavior will be identical to a sequence triggered by a hardware trigger. Do not write 1 to this bit if the BURST bit is set. This bit is only set to a 1 momentarily when written to launch a conversion sequence. It will consequently always read back as a zero."
                format="hex0x"
                id="ADC0@SEQ-CTRLA@START"
                offset="[26]"/>
         <field description="Writing a 1 to this bit will cause this conversion sequence to be continuously cycled through. Other sequence A triggers will be ignored while this bit is set. Repeated conversions can be halted by clearing this bit. The sequence currently in progress will be completed before conversions are terminated. Note that a new sequence could begin just before BURST is cleared."
                format="hex0x"
                id="ADC0@SEQ-CTRLA@BURST"
                offset="[27]"/>
         <field description="When this bit is set, a hardware trigger or a write to the START bit will launch a single conversion on the next channel in the sequence instead of the default response of launching an entire sequence of conversions. Once all of the channels comprising a sequence have been converted, a subsequent trigger will repeat the sequence beginning with the first enabled channel. Interrupt generation will still occur either after each individual conversion or at the end of the entire sequence, depending on the state of the MODE bit."
                format="hex0x"
                id="ADC0@SEQ-CTRLA@SINGLESTEP"
                offset="[28]"/>
         <field description="Set priority for sequence A." format="enum" enum="d1e72838"
                id="ADC0@SEQ-CTRLA@LOWPRIO"
                offset="[29]"/>
         <field description="Indicates whether the primary method for retrieving conversion results for this sequence will be accomplished via reading the global data register (SEQA_GDAT) at the end of each conversion, or the individual channel result registers at the end of the entire sequence. Impacts when conversion-complete interrupt/DMA trigger for sequence-A will be generated and which overrun conditions contribute to an overrun interrupt as described below."
                format="enum"
                enum="d1e72884"
                id="ADC0@SEQ-CTRLA@MODE"
                offset="[30]"/>
         <field description="Sequence Enable. In order to avoid spuriously triggering the sequence, care should be taken to only set the SEQn_ENA bit when the selected trigger input is in its INACTIVE state (as defined by the TRIGPOL bit). If this condition is not met, the sequence will be triggered immediately upon being enabled. In order to avoid spuriously triggering the sequence, care should be taken to only set the SEQn_ENA bit when the selected trigger input is in its INACTIVE state (as defined by the TRIGPOL bit). If this condition is not met, the sequence will be triggered immediately upon being enabled."
                format="enum"
                enum="d1e72930"
                id="ADC0@SEQ-CTRLA@SEQ-ENA"
                offset="[31]"/>
      </register>
      <register description="ADC Conversion Sequence-n control register: Controls triggering and channel selection for conversion sequence-n. Also specifies interrupt mode for sequence-n."
                format="hex0x"
                id="ADC0@SEQ-CTRLB"
                offset="0xc"
                size="4">
         <field description="Selects which one or more of the ADC channels will be sampled and converted when this sequence is launched. A 1 in any bit of this field will cause the corresponding channel to be included in the conversion sequence, where bit 0 corresponds to channel 0, bit 1 to channel 1 and so forth. When this conversion sequence is triggered, either by a hardware trigger or via software command, ADC conversions will be performed on each enabled channel, in sequence, beginning with the lowest-ordered channel. This field can ONLY be changed while SEQA_ENA (bit 31) is LOW. It is allowed to change this field and set bit 31 in the same write."
                format="hex0x"
                id="ADC0@SEQ-CTRLB@CHANNELS"
                offset="[11:0]"/>
         <field description="Selects which of the available hardware trigger sources will cause this conversion sequence to be initiated. Program the trigger input number in this field. See Table 476. In order to avoid generating a spurious trigger, it is recommended writing to this field only when SEQA_ENA (bit 31) is low. It is safe to change this field and set bit 31 in the same write."
                format="hex0x"
                id="ADC0@SEQ-CTRLB@TRIGGER"
                offset="[17:12]"/>
         <field description="Select the polarity of the selected input trigger for this conversion sequence. In order to avoid generating a spurious trigger, it is recommended writing to this field only when SEQA_ENA (bit 31) is low. It is safe to change this field and set bit 31 in the same write."
                format="enum"
                enum="d1e72691"
                id="ADC0@SEQ-CTRLB@TRIGPOL"
                offset="[18]"/>
         <field description="Setting this bit allows the hardware trigger input to bypass synchronization flip-flop stages and therefore shorten the time between the trigger input signal and the start of a conversion. There are slightly different criteria for whether or not this bit can be set depending on the clock operating mode: Synchronous mode (the ASYNMODE in the CTRL register = 0): Synchronization may be bypassed (this bit may be set) if the selected trigger source is already synchronous with the main system clock (eg. coming from an on-chip, system-clock-based timer). Whether this bit is set or not, a trigger pulse must be maintained for at least one system clock period. Asynchronous mode (the ASYNMODE in the CTRL register = 1): Synchronization may be bypassed (this bit may be set) if it is certain that the duration of a trigger input pulse will be at least one cycle of the ADC clock (regardless of whether the trigger comes from and on-chip or off-chip source). If this bit is NOT set, the trigger pulse must at least be maintained for one system clock period."
                format="enum"
                enum="d1e72737"
                id="ADC0@SEQ-CTRLB@SYNCBYPASS"
                offset="[19]"/>
         <field description="Writing a 1 to this field will launch one pass through this conversion sequence. The behavior will be identical to a sequence triggered by a hardware trigger. Do not write 1 to this bit if the BURST bit is set. This bit is only set to a 1 momentarily when written to launch a conversion sequence. It will consequently always read back as a zero."
                format="hex0x"
                id="ADC0@SEQ-CTRLB@START"
                offset="[26]"/>
         <field description="Writing a 1 to this bit will cause this conversion sequence to be continuously cycled through. Other sequence A triggers will be ignored while this bit is set. Repeated conversions can be halted by clearing this bit. The sequence currently in progress will be completed before conversions are terminated. Note that a new sequence could begin just before BURST is cleared."
                format="hex0x"
                id="ADC0@SEQ-CTRLB@BURST"
                offset="[27]"/>
         <field description="When this bit is set, a hardware trigger or a write to the START bit will launch a single conversion on the next channel in the sequence instead of the default response of launching an entire sequence of conversions. Once all of the channels comprising a sequence have been converted, a subsequent trigger will repeat the sequence beginning with the first enabled channel. Interrupt generation will still occur either after each individual conversion or at the end of the entire sequence, depending on the state of the MODE bit."
                format="hex0x"
                id="ADC0@SEQ-CTRLB@SINGLESTEP"
                offset="[28]"/>
         <field description="Set priority for sequence A." format="enum" enum="d1e72838"
                id="ADC0@SEQ-CTRLB@LOWPRIO"
                offset="[29]"/>
         <field description="Indicates whether the primary method for retrieving conversion results for this sequence will be accomplished via reading the global data register (SEQA_GDAT) at the end of each conversion, or the individual channel result registers at the end of the entire sequence. Impacts when conversion-complete interrupt/DMA trigger for sequence-A will be generated and which overrun conditions contribute to an overrun interrupt as described below."
                format="enum"
                enum="d1e72884"
                id="ADC0@SEQ-CTRLB@MODE"
                offset="[30]"/>
         <field description="Sequence Enable. In order to avoid spuriously triggering the sequence, care should be taken to only set the SEQn_ENA bit when the selected trigger input is in its INACTIVE state (as defined by the TRIGPOL bit). If this condition is not met, the sequence will be triggered immediately upon being enabled. In order to avoid spuriously triggering the sequence, care should be taken to only set the SEQn_ENA bit when the selected trigger input is in its INACTIVE state (as defined by the TRIGPOL bit). If this condition is not met, the sequence will be triggered immediately upon being enabled."
                format="enum"
                enum="d1e72930"
                id="ADC0@SEQ-CTRLB@SEQ-ENA"
                offset="[31]"/>
      </register>
      <register description="ADC Sequence-n Global Data register. This register contains the result of the most recent ADC conversion performed under sequence-n."
                format="hex0x"
                id="ADC0@SEQ-GDATA"
                offset="0x10"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the most recent conversion performed under conversion sequence associated with this register. The result is a binary fraction representing the voltage on the currently-selected input channel as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP. DATAVALID = 1 indicates that this result has not yet been read."
                format="hex0x"
                id="ADC0@SEQ-GDATA@RESULT"
                offset="[15:4]"/>
         <field description="Indicates whether the result of the last conversion performed was above, below or within the range established by the designated threshold comparison registers (THRn_LOW and THRn_HIGH)."
                format="hex0x"
                id="ADC0@SEQ-GDATA@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Indicates whether the result of the last conversion performed represented a crossing of the threshold level established by the designated LOW threshold comparison register (THRn_LOW) and, if so, in what direction the crossing occurred."
                format="hex0x"
                id="ADC0@SEQ-GDATA@THCMPCROSS"
                offset="[19:18]"/>
         <field description="These bits contain the channel from which the RESULT bits were converted (e.g. 0000 identifies channel 0, 0001 channel 1, etc.)."
                format="hex0x"
                id="ADC0@SEQ-GDATA@CHN"
                offset="[29:26]"/>
         <field description="This bit is set if a new conversion result is loaded into the RESULT field before a previous result has been read - i.e. while the DATAVALID bit is set. This bit is cleared, along with the DATAVALID bit, whenever this register is read. This bit will contribute to an overrun interrupt/DMA trigger if the MODE bit (in SEQAA_CTRL) for the corresponding sequence is set to '0' (and if the overrun interrupt is enabled)."
                format="hex0x"
                id="ADC0@SEQ-GDATA@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to '1' at the end of each conversion when a new result is loaded into the RESULT field. It is cleared whenever this register is read. This bit will cause a conversion-complete interrupt for the corresponding sequence if the MODE bit (in SEQA_CTRL) for that sequence is set to 0 (and if the interrupt is enabled)."
                format="hex0x"
                id="ADC0@SEQ-GDATA@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Sequence-n Global Data register. This register contains the result of the most recent ADC conversion performed under sequence-n."
                format="hex0x"
                id="ADC0@SEQ-GDATB"
                offset="0x14"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the most recent conversion performed under conversion sequence associated with this register. The result is a binary fraction representing the voltage on the currently-selected input channel as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP. DATAVALID = 1 indicates that this result has not yet been read."
                format="hex0x"
                id="ADC0@SEQ-GDATB@RESULT"
                offset="[15:4]"/>
         <field description="Indicates whether the result of the last conversion performed was above, below or within the range established by the designated threshold comparison registers (THRn_LOW and THRn_HIGH)."
                format="hex0x"
                id="ADC0@SEQ-GDATB@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Indicates whether the result of the last conversion performed represented a crossing of the threshold level established by the designated LOW threshold comparison register (THRn_LOW) and, if so, in what direction the crossing occurred."
                format="hex0x"
                id="ADC0@SEQ-GDATB@THCMPCROSS"
                offset="[19:18]"/>
         <field description="These bits contain the channel from which the RESULT bits were converted (e.g. 0000 identifies channel 0, 0001 channel 1, etc.)."
                format="hex0x"
                id="ADC0@SEQ-GDATB@CHN"
                offset="[29:26]"/>
         <field description="This bit is set if a new conversion result is loaded into the RESULT field before a previous result has been read - i.e. while the DATAVALID bit is set. This bit is cleared, along with the DATAVALID bit, whenever this register is read. This bit will contribute to an overrun interrupt/DMA trigger if the MODE bit (in SEQAA_CTRL) for the corresponding sequence is set to '0' (and if the overrun interrupt is enabled)."
                format="hex0x"
                id="ADC0@SEQ-GDATB@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to '1' at the end of each conversion when a new result is loaded into the RESULT field. It is cleared whenever this register is read. This bit will cause a conversion-complete interrupt for the corresponding sequence if the MODE bit (in SEQA_CTRL) for that sequence is set to 0 (and if the interrupt is enabled)."
                format="hex0x"
                id="ADC0@SEQ-GDATB@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT0"
                offset="0x20"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT0@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT0@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT0@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT0@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT0@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT0@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT1"
                offset="0x24"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT1@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT1@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT1@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT1@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT1@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT1@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT2"
                offset="0x28"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT2@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT2@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT2@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT2@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT2@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT2@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT3"
                offset="0x2c"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT3@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT3@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT3@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT3@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT3@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT3@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT4"
                offset="0x30"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT4@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT4@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT4@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT4@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT4@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT4@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT5"
                offset="0x34"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT5@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT5@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT5@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT5@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT5@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT5@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT6"
                offset="0x38"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT6@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT6@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT6@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT6@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT6@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT6@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT7"
                offset="0x3c"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT7@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT7@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT7@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT7@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT7@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT7@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT8"
                offset="0x40"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT8@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT8@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT8@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT8@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT8@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT8@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT9"
                offset="0x44"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT9@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT9@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT9@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT9@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT9@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT9@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT10"
                offset="0x48"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT10@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT10@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT10@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT10@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT10@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT10@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Channel 0 Data register. This register contains the result of the most recent conversion completed on channel 0."
                format="hex0x"
                id="ADC0@DAT11"
                offset="0x4c"
                readOnly="true"
                size="4">
         <field description="This field contains the 12-bit ADC conversion result from the last conversion performed on this channel. This will be a binary fraction representing the voltage on the AD0[n] pin, as it falls within the range of VREFP to VREFN. Zero in the field indicates that the voltage on the input pin was less than, equal to, or close to that on VREFN, while 0xFFF indicates that the voltage on the input was close to, equal to, or greater than that on VREFP."
                format="hex0x"
                id="ADC0@DAT11@RESULT"
                offset="[15:4]"/>
         <field description="Threshold Range Comparison result. 0x0 = In Range: The last completed conversion was greater than or equal to the value programmed into the designated LOW threshold register (THRn_LOW) but less than or equal to the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x1 = Below Range: The last completed conversion on was less than the value programmed into the designated LOW threshold register (THRn_LOW). 0x2 = Above Range: The last completed conversion was greater than the value programmed into the designated HIGH threshold register (THRn_HIGH). 0x3 = Reserved."
                format="hex0x"
                id="ADC0@DAT11@THCMPRANGE"
                offset="[17:16]"/>
         <field description="Threshold Crossing Comparison result. 0x0 = No threshold Crossing detected: The most recent completed conversion on this channel had the same relationship (above or below) to the threshold value established by the designated LOW threshold register (THRn_LOW) as did the previous conversion on this channel. 0x1 = Reserved. 0x2 = Downward Threshold Crossing Detected. Indicates that a threshold crossing in the downward direction has occurred - i.e. the previous sample on this channel was above the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is below that threshold. 0x3 = Upward Threshold Crossing Detected. Indicates that a threshold crossing in the upward direction has occurred - i.e. the previous sample on this channel was below the threshold value established by the designated LOW threshold register (THRn_LOW) and the current sample is above that threshold."
                format="hex0x"
                id="ADC0@DAT11@THCMPCROSS"
                offset="[19:18]"/>
         <field description="This field is hard-coded to contain the channel number that this particular register relates to (i.e. this field will contain 0b0000 for the DAT0 register, 0b0001 for the DAT1 register, etc)"
                format="hex0x"
                id="ADC0@DAT11@CHANNEL"
                offset="[29:26]"/>
         <field description="This bit will be set to a 1 if a new conversion on this channel completes and overwrites the previous contents of the RESULT field before it has been read - i.e. while the DONE bit is set. This bit is cleared, along with the DONE bit, whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. This bit (in any of the 12 registers) will cause an overrun interrupt/DMA trigger to be asserted if the overrun interrupt is enabled. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT11@OVERRUN"
                offset="[30]"/>
         <field description="This bit is set to 1 when an ADC conversion on this channel completes. This bit is cleared whenever this register is read or when the data related to this channel is read from either of the global SEQn_GDAT registers. While it is allowed to include the same channels in both conversion sequences, doing so may cause erratic behavior of the DONE and OVERRUN bits in the data registers associated with any of the channels that are shared between the two sequences. Any erratic OVERRUN behavior will also affect overrun interrupt generation, if enabled."
                format="hex0x"
                id="ADC0@DAT11@DATAVALID"
                offset="[31]"/>
      </register>
      <register description="ADC Low Compare Threshold register 0: Contains the lower threshold level for automatic threshold comparison for any channels linked to threshold pair 0."
                format="hex0x"
                id="ADC0@THR0-LOW"
                offset="0x50"
                size="4">
         <field description="Low threshold value against which ADC results will be compared"
                format="hex0x"
                id="ADC0@THR0-LOW@THRLOW"
                offset="[15:4]"/>
      </register>
      <register description="ADC Low Compare Threshold register 1: Contains the lower threshold level for automatic threshold comparison for any channels linked to threshold pair 1."
                format="hex0x"
                id="ADC0@THR1-LOW"
                offset="0x54"
                size="4">
         <field description="Low threshold value against which ADC results will be compared"
                format="hex0x"
                id="ADC0@THR1-LOW@THRLOW"
                offset="[15:4]"/>
      </register>
      <register description="ADC High Compare Threshold register 0: Contains the upper threshold level for automatic threshold comparison for any channels linked to threshold pair 0."
                format="hex0x"
                id="ADC0@THR0-HIGH"
                offset="0x58"
                size="4">
         <field description="High threshold value against which ADC results will be compared"
                format="hex0x"
                id="ADC0@THR0-HIGH@THRHIGH"
                offset="[15:4]"/>
      </register>
      <register description="ADC High Compare Threshold register 1: Contains the upper threshold level for automatic threshold comparison for any channels linked to threshold pair 1."
                format="hex0x"
                id="ADC0@THR1-HIGH"
                offset="0x5c"
                size="4">
         <field description="High threshold value against which ADC results will be compared"
                format="hex0x"
                id="ADC0@THR1-HIGH@THRHIGH"
                offset="[15:4]"/>
      </register>
      <register description="ADC Channel-Threshold Select register. Specifies which set of threshold compare registers are to be used for each channel"
                format="hex0x"
                id="ADC0@CHAN-THRSEL"
                offset="0x60"
                size="4">
         <field description="Threshold select for channel 0." format="enum" enum="d1e73478"
                id="ADC0@CHAN-THRSEL@CH0-THRSEL"
                offset="[0]"/>
         <field description="Threshold select for channel 1. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH1-THRSEL"
                offset="[1]"/>
         <field description="Threshold select for channel 2. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH2-THRSEL"
                offset="[2]"/>
         <field description="Threshold select for channel 3. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH3-THRSEL"
                offset="[3]"/>
         <field description="Threshold select for channel 4. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH4-THRSEL"
                offset="[4]"/>
         <field description="Threshold select for channel 5. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH5-THRSEL"
                offset="[5]"/>
         <field description="Threshold select for channel 6. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH6-THRSEL"
                offset="[6]"/>
         <field description="Threshold select for channel 7. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH7-THRSEL"
                offset="[7]"/>
         <field description="Threshold select for channel 8. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH8-THRSEL"
                offset="[8]"/>
         <field description="Threshold select for channel 9. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH9-THRSEL"
                offset="[9]"/>
         <field description="Threshold select for channel 10. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH10-THRSEL"
                offset="[10]"/>
         <field description="Threshold select for channel 11. See description for channel 0."
                format="hex0x"
                id="ADC0@CHAN-THRSEL@CH11-THRSEL"
                offset="[11]"/>
      </register>
      <register description="ADC Interrupt Enable register. This register contains enable bits that enable the sequence-A, sequence-B, threshold compare and data overrun interrupts to be generated."
                format="hex0x"
                id="ADC0@INTEN"
                offset="0x64"
                size="4">
         <field description="Sequence A interrupt enable." format="enum" enum="d1e73752"
                id="ADC0@INTEN@SEQA-INTEN"
                offset="[0]"/>
         <field description="Sequence B interrupt enable." format="enum" enum="d1e73798"
                id="ADC0@INTEN@SEQB-INTEN"
                offset="[1]"/>
         <field description="Overrun interrupt enable." format="enum" enum="d1e73844"
                id="ADC0@INTEN@OVR-INTEN"
                offset="[2]"/>
         <field description="Threshold comparison interrupt enable for channel 0."
                format="enum"
                enum="d1e73890"
                id="ADC0@INTEN@ADCMPINTEN0"
                offset="[4:3]"/>
         <field description="Channel 1 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN1"
                offset="[6:5]"/>
         <field description="Channel 2 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN2"
                offset="[8:7]"/>
         <field description="Channel 3 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN3"
                offset="[10:9]"/>
         <field description="Channel 4 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN4"
                offset="[12:11]"/>
         <field description="Channel 5 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN5"
                offset="[14:13]"/>
         <field description="Channel 6 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN6"
                offset="[16:15]"/>
         <field description="Channel 7 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN7"
                offset="[18:17]"/>
         <field description="Channel 8 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN8"
                offset="[20:19]"/>
         <field description="Channel 9 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN9"
                offset="[22:21]"/>
         <field description="Channel 10 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN10"
                offset="[24:23]"/>
         <field description="Channel 21 threshold comparison interrupt enable. See description for channel 0."
                format="hex0x"
                id="ADC0@INTEN@ADCMPINTEN11"
                offset="[26:25]"/>
      </register>
      <register description="ADC Flags register. Contains the four interrupt/DMA trigger flags and the individual component overrun and threshold-compare flags. (The overrun bits replicate information stored in the result registers)."
                format="hex0x"
                id="ADC0@FLAGS"
                offset="0x68"
                size="4">
         <field description="Threshold comparison event on Channel 0. Set to 1 upon either an out-of-range result or a threshold-crossing result if enabled to do so in the INTEN register. This bit is cleared by writing a 1."
                format="hex0x"
                id="ADC0@FLAGS@THCMP0"
                offset="[0]"/>
         <field description="Threshold comparison event on Channel 1. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP1"
                offset="[1]"/>
         <field description="Threshold comparison event on Channel 2. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP2"
                offset="[2]"/>
         <field description="Threshold comparison event on Channel 3. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP3"
                offset="[3]"/>
         <field description="Threshold comparison event on Channel 4. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP4"
                offset="[4]"/>
         <field description="Threshold comparison event on Channel 5. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP5"
                offset="[5]"/>
         <field description="Threshold comparison event on Channel 6. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP6"
                offset="[6]"/>
         <field description="Threshold comparison event on Channel 7. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP7"
                offset="[7]"/>
         <field description="Threshold comparison event on Channel 8. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP8"
                offset="[8]"/>
         <field description="Threshold comparison event on Channel 9. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP9"
                offset="[9]"/>
         <field description="Threshold comparison event on Channel 10. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP10"
                offset="[10]"/>
         <field description="Threshold comparison event on Channel 11. See description for channel 0."
                format="hex0x"
                id="ADC0@FLAGS@THCMP11"
                offset="[11]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 0"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN0"
                offset="[12]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 1"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN1"
                offset="[13]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 2"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN2"
                offset="[14]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 3"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN3"
                offset="[15]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 4"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN4"
                offset="[16]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 5"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN5"
                offset="[17]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 6"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN6"
                offset="[18]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 7"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN7"
                offset="[19]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 8"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN8"
                offset="[20]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 9"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN9"
                offset="[21]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 10"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN10"
                offset="[22]"/>
         <field description="Mirrors the OVERRRUN status flag from the result register for ADC channel 11"
                format="hex0x"
                id="ADC0@FLAGS@OVERRUN11"
                offset="[23]"/>
         <field description="Mirrors the global OVERRUN status flag in the SEQA_GDAT register"
                format="hex0x"
                id="ADC0@FLAGS@SEQA-OVR"
                offset="[24]"/>
         <field description="Mirrors the global OVERRUN status flag in the SEQB_GDAT register"
                format="hex0x"
                id="ADC0@FLAGS@SEQB-OVR"
                offset="[25]"/>
         <field description="Sequence A interrupt/DMA trigger. If the MODE bit in the SEQA_CTRL register is 0, this flag will mirror the DATAVALID bit in the sequence A global data register (SEQA_GDAT), which is set at the end of every ADC conversion performed as part of sequence A. It will be cleared automatically when the SEQA_GDAT register is read. If the MODE bit in the SEQA_CTRL register is 1, this flag will be set upon completion of an entire A sequence. In this case it must be cleared by writing a 1 to this SEQA_INT bit. This interrupt must be enabled in the INTEN register."
                format="hex0x"
                id="ADC0@FLAGS@SEQA-INT"
                offset="[28]"/>
         <field description="Sequence A interrupt/DMA trigger. If the MODE bit in the SEQB_CTRL register is 0, this flag will mirror the DATAVALID bit in the sequence A global data register (SEQB_GDAT), which is set at the end of every ADC conversion performed as part of sequence B. It will be cleared automatically when the SEQB_GDAT register is read. If the MODE bit in the SEQB_CTRL register is 1, this flag will be set upon completion of an entire B sequence. In this case it must be cleared by writing a 1 to this SEQB_INT bit. This interrupt must be enabled in the INTEN register."
                format="hex0x"
                id="ADC0@FLAGS@SEQB-INT"
                offset="[29]"/>
         <field description="Threshold Comparison Interrupt. This bit will be set if any of the THCMP flags in the lower bits of this register are set to 1 (due to an enabled out-of-range or threshold-crossing event on any channel). Each type of threshold comparison interrupt on each channel must be individually enabled in the INTEN register to cause this interrupt. This bit will be cleared when all of the individual threshold flags are cleared via writing 1s to those bits."
                format="hex0x"
                id="ADC0@FLAGS@THCMP-INT"
                offset="[30]"/>
         <field description="Overrun Interrupt flag. Any overrun bit in any of the individual channel data registers will cause this interrupt. In addition, if the MODE bit in either of the SEQn_CTRL registers is 0 then the OVERRUN bit in the corresponding SEQn_GDAT register will also cause this interrupt. This interrupt must be enabled in the INTEN register. This bit will be cleared when all of the individual overrun bits have been cleared via reading the corresponding data registers."
                format="hex0x"
                id="ADC0@FLAGS@OVR-INT"
                offset="[31]"/>
      </register>
      <register description="ADC Startup register." format="hex0x" id="ADC0@STARTUP"
                offset="0x6c"
                size="4">
         <field description="ADC Enable bit. This bit can only be set to a 1 by software. It is cleared automatically whenever the ADC is powered down. This bit must not be set until at least 10 microseconds after the ADC is powered up (typically by altering a system-level ADC power control bit)."
                format="hex0x"
                id="ADC0@STARTUP@ADC-ENA"
                offset="[0]"/>
         <field description="ADC Initialization. After enabling the ADC (setting the ADC_ENA bit), the API routine will EITHER set this bit or the CALIB bit in the CALIB register, depending on whether or not calibration is required. Setting this bit will launch the 'dummy' conversion cycle that is required if a calibration is not performed. It will also reload the stored calibration value from a previous calibration unless the BYPASSCAL bit is set. This bit should only be set AFTER the ADC_ENA bit is set and after the CALIREQD bit is tested to determine whether a calibration or an ADC dummy conversion cycle is required. It should not be set during the same write that sets the ADC_ENA bit. This bit can only be set to a '1' by software. It is cleared automatically when the 'dummy' conversion cycle completes."
                format="hex0x"
                id="ADC0@STARTUP@ADC-INIT"
                offset="[1]"/>
      </register>
      <register description="ADC Calibration register." format="hex0x" id="ADC0@CALIB"
                offset="0x70"
                size="4">
         <field description="Calibration request. Setting this bit will launch an ADC calibration cycle. This bit can only be set to a '1' by software. It is cleared automatically when the calibration cycle completes."
                format="hex0x"
                id="ADC0@CALIB@CALIB"
                offset="[0]"/>
         <field description="Calibration required. This read-only bit indicates if calibration is required when enabling the ADC. CALREQD will be '1' if no calibration has been run since the chip was powered-up and if the BYPASSCAL bit in the CTRL register is low. Software will test this bit to determine whether to initiate a calibration cycle or whether to set the ADC_INIT bit (in the STARTUP register) to launch the ADC initialization process which includes a 'dummy' conversion cycle. Note: A 'dummy' conversion cycle requires approximately 6 ADC clocks as opposed to 81 clocks required for calibration."
                format="hex0x"
                id="ADC0@CALIB@CALREQD"
                offset="[1]"/>
         <field description="Calibration Value. This read-only field displays the calibration value established during last calibration cycle. This value is not typically of any use to the user."
                format="hex0x"
                id="ADC0@CALIB@CALVALUE"
                offset="[8:2]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="Instrumentation Trace Macrocell Registers" id="ITM"
               size="0x1000">
      <register description="Stimulus Port Register 0 (for reading)" format="hex0x"
                id="ITM@ITM-STIM0-READ"
                offset="0x0"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM0-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 0 (for writing)" format="hex0x"
                id="ITM@ITM-STIM0-WRITE"
                offset="0x0"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM0-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 1 (for reading)" format="hex0x"
                id="ITM@ITM-STIM1-READ"
                offset="0x4"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM1-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 1 (for writing)" format="hex0x"
                id="ITM@ITM-STIM1-WRITE"
                offset="0x4"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM1-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 2 (for reading)" format="hex0x"
                id="ITM@ITM-STIM2-READ"
                offset="0x8"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM2-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 2 (for writing)" format="hex0x"
                id="ITM@ITM-STIM2-WRITE"
                offset="0x8"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM2-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 3 (for reading)" format="hex0x"
                id="ITM@ITM-STIM3-READ"
                offset="0xc"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM3-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 3 (for writing)" format="hex0x"
                id="ITM@ITM-STIM3-WRITE"
                offset="0xc"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM3-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 4 (for reading)" format="hex0x"
                id="ITM@ITM-STIM4-READ"
                offset="0x10"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM4-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 4 (for writing)" format="hex0x"
                id="ITM@ITM-STIM4-WRITE"
                offset="0x10"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM4-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 5 (for reading)" format="hex0x"
                id="ITM@ITM-STIM5-READ"
                offset="0x14"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM5-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 5 (for writing)" format="hex0x"
                id="ITM@ITM-STIM5-WRITE"
                offset="0x14"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM5-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 6 (for reading)" format="hex0x"
                id="ITM@ITM-STIM6-READ"
                offset="0x18"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM6-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 6 (for writing)" format="hex0x"
                id="ITM@ITM-STIM6-WRITE"
                offset="0x18"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM6-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 7 (for reading)" format="hex0x"
                id="ITM@ITM-STIM7-READ"
                offset="0x1c"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM7-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 7 (for writing)" format="hex0x"
                id="ITM@ITM-STIM7-WRITE"
                offset="0x1c"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM7-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 8 (for reading)" format="hex0x"
                id="ITM@ITM-STIM8-READ"
                offset="0x20"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM8-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 8 (for writing)" format="hex0x"
                id="ITM@ITM-STIM8-WRITE"
                offset="0x20"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM8-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 9 (for reading)" format="hex0x"
                id="ITM@ITM-STIM9-READ"
                offset="0x24"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM9-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 9 (for writing)" format="hex0x"
                id="ITM@ITM-STIM9-WRITE"
                offset="0x24"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM9-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 10 (for reading)" format="hex0x"
                id="ITM@ITM-STIM10-READ"
                offset="0x28"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM10-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 10 (for writing)" format="hex0x"
                id="ITM@ITM-STIM10-WRITE"
                offset="0x28"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM10-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 11 (for reading)" format="hex0x"
                id="ITM@ITM-STIM11-READ"
                offset="0x2c"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM11-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 11 (for writing)" format="hex0x"
                id="ITM@ITM-STIM11-WRITE"
                offset="0x2c"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM11-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 12 (for reading)" format="hex0x"
                id="ITM@ITM-STIM12-READ"
                offset="0x30"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM12-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 12 (for writing)" format="hex0x"
                id="ITM@ITM-STIM12-WRITE"
                offset="0x30"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM12-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 13 (for reading)" format="hex0x"
                id="ITM@ITM-STIM13-READ"
                offset="0x34"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM13-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 13 (for writing)" format="hex0x"
                id="ITM@ITM-STIM13-WRITE"
                offset="0x34"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM13-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 14 (for reading)" format="hex0x"
                id="ITM@ITM-STIM14-READ"
                offset="0x38"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM14-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 14 (for writing)" format="hex0x"
                id="ITM@ITM-STIM14-WRITE"
                offset="0x38"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM14-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 15 (for reading)" format="hex0x"
                id="ITM@ITM-STIM15-READ"
                offset="0x3c"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM15-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 15 (for writing)" format="hex0x"
                id="ITM@ITM-STIM15-WRITE"
                offset="0x3c"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM15-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 16 (for reading)" format="hex0x"
                id="ITM@ITM-STIM16-READ"
                offset="0x40"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM16-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 16 (for writing)" format="hex0x"
                id="ITM@ITM-STIM16-WRITE"
                offset="0x40"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM16-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 17 (for reading)" format="hex0x"
                id="ITM@ITM-STIM17-READ"
                offset="0x44"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM17-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 17 (for writing)" format="hex0x"
                id="ITM@ITM-STIM17-WRITE"
                offset="0x44"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM17-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 18 (for reading)" format="hex0x"
                id="ITM@ITM-STIM18-READ"
                offset="0x48"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM18-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 18 (for writing)" format="hex0x"
                id="ITM@ITM-STIM18-WRITE"
                offset="0x48"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM18-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 19 (for reading)" format="hex0x"
                id="ITM@ITM-STIM19-READ"
                offset="0x4c"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM19-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 19 (for writing)" format="hex0x"
                id="ITM@ITM-STIM19-WRITE"
                offset="0x4c"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM19-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 20 (for reading)" format="hex0x"
                id="ITM@ITM-STIM20-READ"
                offset="0x50"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM20-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 20 (for writing)" format="hex0x"
                id="ITM@ITM-STIM20-WRITE"
                offset="0x50"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM20-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 21 (for reading)" format="hex0x"
                id="ITM@ITM-STIM21-READ"
                offset="0x54"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM21-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 21 (for writing)" format="hex0x"
                id="ITM@ITM-STIM21-WRITE"
                offset="0x54"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM21-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 22 (for reading)" format="hex0x"
                id="ITM@ITM-STIM22-READ"
                offset="0x58"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM22-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 22 (for writing)" format="hex0x"
                id="ITM@ITM-STIM22-WRITE"
                offset="0x58"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM22-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 23 (for reading)" format="hex0x"
                id="ITM@ITM-STIM23-READ"
                offset="0x5c"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM23-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 23 (for writing)" format="hex0x"
                id="ITM@ITM-STIM23-WRITE"
                offset="0x5c"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM23-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 24 (for reading)" format="hex0x"
                id="ITM@ITM-STIM24-READ"
                offset="0x60"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM24-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 24 (for writing)" format="hex0x"
                id="ITM@ITM-STIM24-WRITE"
                offset="0x60"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM24-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 25 (for reading)" format="hex0x"
                id="ITM@ITM-STIM25-READ"
                offset="0x64"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM25-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 25 (for writing)" format="hex0x"
                id="ITM@ITM-STIM25-WRITE"
                offset="0x64"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM25-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 26 (for reading)" format="hex0x"
                id="ITM@ITM-STIM26-READ"
                offset="0x68"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM26-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 26 (for writing)" format="hex0x"
                id="ITM@ITM-STIM26-WRITE"
                offset="0x68"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM26-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 27 (for reading)" format="hex0x"
                id="ITM@ITM-STIM27-READ"
                offset="0x6c"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM27-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 27 (for writing)" format="hex0x"
                id="ITM@ITM-STIM27-WRITE"
                offset="0x6c"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM27-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 28 (for reading)" format="hex0x"
                id="ITM@ITM-STIM28-READ"
                offset="0x70"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM28-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 28 (for writing)" format="hex0x"
                id="ITM@ITM-STIM28-WRITE"
                offset="0x70"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM28-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 29 (for reading)" format="hex0x"
                id="ITM@ITM-STIM29-READ"
                offset="0x74"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM29-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 29 (for writing)" format="hex0x"
                id="ITM@ITM-STIM29-WRITE"
                offset="0x74"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM29-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 30 (for reading)" format="hex0x"
                id="ITM@ITM-STIM30-READ"
                offset="0x78"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM30-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 30 (for writing)" format="hex0x"
                id="ITM@ITM-STIM30-WRITE"
                offset="0x78"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM30-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Stimulus Port Register 31 (for reading)" format="hex0x"
                id="ITM@ITM-STIM31-READ"
                offset="0x7c"
                size="4">
         <field description="no description available" format="hex0x"
                id="ITM@ITM-STIM31-READ@FIFOREADY"
                offset="[0]"/>
      </register>
      <register description="Stimulus Port Register 31 (for writing)" format="hex0x"
                id="ITM@ITM-STIM31-WRITE"
                offset="0x7c"
                size="4">
         <field description="Data write to the stimulus port FIFO, for forwarding as a software event packet."
                format="hex0x"
                id="ITM@ITM-STIM31-WRITE@STIMULUS"
                offset="[31:0]"/>
      </register>
      <register description="Trace Enable Register" format="hex0x" id="ITM@ITM-TER"
                offset="0xe00"
                size="4">
         <field description="For bit STIMENA[n], in register ITM_TERx: 0 = Stimulus port (32x + n) disabled 1 = Stimulus port (32x + n) enabled"
                format="hex0x"
                id="ITM@ITM-TER@STIMENA"
                offset="[31:0]"/>
      </register>
      <register description="Trace Privilege Register" format="hex0x" id="ITM@ITM-TPR"
                offset="0xe40"
                size="4">
         <field description="Bit mask to enable tracing on ITM stimulus ports: Bit [0] = stimulus port [7:0] Bit [1] = stimulus port [15:8] Bit [2] = stimulus port [23:16] Bit [3] = stimulus port [31:24]"
                format="hex0x"
                id="ITM@ITM-TPR@PRIVMASK"
                offset="[3:0]"/>
      </register>
      <register description="Trace Control Register" format="hex0x" id="ITM@ITM-TCR"
                offset="0xe80"
                size="4">
         <field description="no description available" format="enum" enum="d1e78170"
                id="ITM@ITM-TCR@ITMENA"
                offset="[0]"/>
         <field description="no description available" format="enum" enum="d1e78216"
                id="ITM@ITM-TCR@TSENA"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e78262"
                id="ITM@ITM-TCR@SYNCENA"
                offset="[2]"/>
         <field description="no description available" format="enum" enum="d1e78308"
                id="ITM@ITM-TCR@TXENA"
                offset="[3]"/>
         <field description="no description available" format="enum" enum="d1e78354"
                id="ITM@ITM-TCR@SWOENA"
                offset="[4]"/>
         <field description="Local timestamp prescaler, used with the trace packet reference clock."
                format="enum"
                enum="d1e78401"
                id="ITM@ITM-TCR@TSPrescale"
                offset="[9:8]"/>
         <field description="Global timestamp frequency. Defines how often the ITM generates a global timestamp, based on the global timestamp clock frequency, or disables generation of global timestamps."
                format="enum"
                enum="d1e78471"
                id="ITM@ITM-TCR@GTSFREQ"
                offset="[11:10]"/>
         <field description="Identifier for multi-source trace stream formatting. If multi-source trace is in use, the debugger must write a non-zero value to this field."
                format="hex0x"
                id="ITM@ITM-TCR@TraceBusID"
                offset="[22:16]"/>
         <field description="Indicates whether the ITM is currently processing events: 0: ITM is not processing any events. 1: ITM events present and being drained."
                format="enum"
                enum="d1e78559"
                id="ITM@ITM-TCR@BUSY"
                offset="[23]"/>
      </register>
      <register description="Lock Access Register" format="hex0x" id="ITM@ITM-LAR"
                offset="0xfb0"
                size="4">
         <field description="Write Access Code. A write of 0xC5ACCE55 enables further write access to this device. An invalid write will have the affect of removing write access."
                format="hex0x"
                id="ITM@ITM-LAR@WriteAccessCode"
                offset="[31:0]"/>
      </register>
      <register description="Lock Status Register" format="hex0x" id="ITM@ITM-LSR"
                offset="0xfb4"
                readOnly="true"
                size="4">
         <field description="Lock mechanism is implemented. This bit always reads 1."
                format="hex0x"
                id="ITM@ITM-LSR@IMP"
                offset="[0]"/>
         <field description="Lock Status. This bit is HIGH when the device is locked, and LOW when unlocked."
                format="hex0x"
                id="ITM@ITM-LSR@STATUS"
                offset="[1]"/>
         <field description="Access Lock Register size. This bit reads 0 to indicate a 32-bit register is present."
                format="hex0x"
                id="ITM@ITM-LSR@s8BIT"
                offset="[2]"/>
      </register>
      <register description="Peripheral Identification Register 4." format="hex0x"
                id="ITM@ITM-PID4"
                offset="0xfd0"
                readOnly="true"
                size="4">
         <field description="JEP106 continuation code." format="hex0x" id="ITM@ITM-PID4@JEP106"
                offset="[3:0]"/>
         <field description="4KB Count" format="hex0x" id="ITM@ITM-PID4@c4KB" offset="[7:4]"/>
      </register>
      <register description="Peripheral Identification Register 5." format="hex0x"
                id="ITM@ITM-PID5"
                offset="0xfd4"
                readOnly="true"
                size="4"/>
      <register description="Peripheral Identification Register 6." format="hex0x"
                id="ITM@ITM-PID6"
                offset="0xfd8"
                readOnly="true"
                size="4"/>
      <register description="Peripheral Identification Register 7." format="hex0x"
                id="ITM@ITM-PID7"
                offset="0xfdc"
                readOnly="true"
                size="4"/>
      <register description="Peripheral Identification Register 0." format="hex0x"
                id="ITM@ITM-PID0"
                offset="0xfe0"
                readOnly="true"
                size="4">
         <field description="Part Number [7:0]" format="hex0x" id="ITM@ITM-PID0@PartNumber"
                offset="[7:0]"/>
      </register>
      <register description="Peripheral Identification Register 1." format="hex0x"
                id="ITM@ITM-PID1"
                offset="0xfe4"
                readOnly="true"
                size="4">
         <field description="Part Number [11:8]" format="hex0x" id="ITM@ITM-PID1@PartNumber"
                offset="[3:0]"/>
         <field description="JEP106 identity code [3:0]" format="hex0x"
                id="ITM@ITM-PID1@JEP106-identity-code"
                offset="[7:4]"/>
      </register>
      <register description="Peripheral Identification Register 2." format="hex0x"
                id="ITM@ITM-PID2"
                offset="0xfe8"
                readOnly="true"
                size="4">
         <field description="JEP106 identity code [6:4]" format="hex0x"
                id="ITM@ITM-PID2@JEP106-identity-code"
                offset="[2:0]"/>
         <field description="Revision" format="hex0x" id="ITM@ITM-PID2@Revision" offset="[7:4]"/>
      </register>
      <register description="Peripheral Identification Register 3." format="hex0x"
                id="ITM@ITM-PID3"
                offset="0xfec"
                readOnly="true"
                size="4">
         <field description="Customer Modified." format="hex0x"
                id="ITM@ITM-PID3@CustomerModified"
                offset="[3:0]"/>
         <field description="RevAnd" format="hex0x" id="ITM@ITM-PID3@RevAnd" offset="[7:4]"/>
      </register>
      <register description="Component Identification Register 0." format="hex0x"
                id="ITM@ITM-CID0"
                offset="0xff0"
                readOnly="true"
                size="4">
         <field description="Preamble" format="hex0x" id="ITM@ITM-CID0@Preamble" offset="[7:0]"/>
      </register>
      <register description="Component Identification Register 1." format="hex0x"
                id="ITM@ITM-CID1"
                offset="0xff4"
                readOnly="true"
                size="4">
         <field description="Preamble" format="hex0x" id="ITM@ITM-CID1@Preamble" offset="[3:0]"/>
         <field description="Component class" format="enum" enum="d1e79204"
                id="ITM@ITM-CID1@ComponentClass"
                offset="[7:4]"/>
      </register>
      <register description="Component Identification Register 2." format="hex0x"
                id="ITM@ITM-CID2"
                offset="0xff8"
                readOnly="true"
                size="4">
         <field description="Preamble" format="hex0x" id="ITM@ITM-CID2@Preamble" offset="[7:0]"/>
      </register>
      <register description="Component Identification Register 3." format="hex0x"
                id="ITM@ITM-CID3"
                offset="0xffc"
                readOnly="true"
                size="4">
         <field description="Preamble" format="hex0x" id="ITM@ITM-CID3@Preamble" offset="[7:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="System Control Block" id="SystemControl"
               size="0xd40">
      <register description="Auxiliary Control Register," format="hex0x"
                id="SystemControl@SCB-ACTLR"
                offset="0x8"
                size="4">
         <field description="Disables interruption of multi-cycle instructions." format="hex0x"
                id="SystemControl@SCB-ACTLR@DISMCYCINT"
                offset="[0]"/>
         <field description="Disables write buffer use during default memory map accesses."
                format="hex0x"
                id="SystemControl@SCB-ACTLR@DISDEFWBUF"
                offset="[1]"/>
         <field description="Disables folding of IT instructions." format="hex0x"
                id="SystemControl@SCB-ACTLR@DISFOLD"
                offset="[2]"/>
      </register>
      <register description="CPUID Base Register" format="hex0x" id="SystemControl@SCB-CPUID"
                offset="0xd00"
                readOnly="true"
                size="4">
         <field description="Indicates patch release: 0x0 = Patch 0" format="hex0x"
                id="SystemControl@SCB-CPUID@REVISION"
                offset="[3:0]"/>
         <field description="Indicates part number" format="hex0x"
                id="SystemControl@SCB-CPUID@PARTNO"
                offset="[15:4]"/>
         <field description="Indicates processor revision: 0x2 = Revision 2" format="hex0x"
                id="SystemControl@SCB-CPUID@VARIANT"
                offset="[23:20]"/>
         <field description="Implementer code" format="hex0x"
                id="SystemControl@SCB-CPUID@IMPLEMENTER"
                offset="[31:24]"/>
      </register>
      <register description="Interrupt Control and State Register" format="hex0x"
                id="SystemControl@SCB-ICSR"
                offset="0xd04"
                size="4">
         <field description="Active exception number" format="hex0x"
                id="SystemControl@SCB-ICSR@VECTACTIVE"
                offset="[8:0]"/>
         <field description="no description available" format="enum" enum="d1e79616"
                id="SystemControl@SCB-ICSR@RETTOBASE"
                offset="[11]"/>
         <field description="Exception number of the highest priority pending enabled exception"
                format="hex0x"
                id="SystemControl@SCB-ICSR@VECTPENDING"
                offset="[17:12]"/>
         <field description="no description available" format="hex0x"
                id="SystemControl@SCB-ICSR@ISRPENDING"
                offset="[22]"/>
         <field description="no description available" format="enum" enum="d1e79698"
                id="SystemControl@SCB-ICSR@ISRPREEMPT"
                offset="[23]"/>
         <field description="no description available" format="enum" enum="d1e79745"
                id="SystemControl@SCB-ICSR@PENDSTCLR"
                offset="[25]"/>
         <field description="no description available" format="enum" enum="d1e79791"
                id="SystemControl@SCB-ICSR@PENDSTSET"
                offset="[26]"/>
         <field description="no description available" format="enum" enum="d1e79837"
                id="SystemControl@SCB-ICSR@PENDSVCLR"
                offset="[27]"/>
         <field description="no description available" format="enum" enum="d1e79883"
                id="SystemControl@SCB-ICSR@PENDSVSET"
                offset="[28]"/>
         <field description="no description available" format="enum" enum="d1e79929"
                id="SystemControl@SCB-ICSR@NMIPENDSET"
                offset="[31]"/>
      </register>
      <register description="Vector Table Offset Register" format="hex0x"
                id="SystemControl@SCB-VTOR"
                offset="0xd08"
                size="4">
         <field description="Vector table base offset" format="hex0x"
                id="SystemControl@SCB-VTOR@TBLOFF"
                offset="[31:7]"/>
      </register>
      <register description="Application Interrupt and Reset Control Register" format="hex0x"
                id="SystemControl@SCB-AIRCR"
                offset="0xd0c"
                size="4">
         <field description="no description available" format="hex0x"
                id="SystemControl@SCB-AIRCR@VECTRESET"
                offset="[0]"/>
         <field description="no description available" format="hex0x"
                id="SystemControl@SCB-AIRCR@VECTCLRACTIVE"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e80085"
                id="SystemControl@SCB-AIRCR@SYSRESETREQ"
                offset="[2]"/>
         <field description="Interrupt priority grouping field. This field determines the split of group priority from subpriority."
                format="hex0x"
                id="SystemControl@SCB-AIRCR@PRIGROUP"
                offset="[10:8]"/>
         <field description="no description available" format="enum" enum="d1e80149"
                id="SystemControl@SCB-AIRCR@ENDIANNESS"
                offset="[15]"/>
         <field description="Register key" format="hex0x" id="SystemControl@SCB-AIRCR@VECTKEY"
                offset="[31:16]"/>
      </register>
      <register description="System Control Register" format="hex0x" id="SystemControl@SCB-SCR"
                offset="0xd10"
                size="4">
         <field description="no description available" format="enum" enum="d1e80243"
                id="SystemControl@SCB-SCR@SLEEPONEXIT"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e80289"
                id="SystemControl@SCB-SCR@SLEEPDEEP"
                offset="[2]"/>
         <field description="no description available" format="enum" enum="d1e80335"
                id="SystemControl@SCB-SCR@SEVONPEND"
                offset="[4]"/>
      </register>
      <register description="Configuration and Control Register" format="hex0x"
                id="SystemControl@SCB-CCR"
                offset="0xd14"
                size="4">
         <field description="no description available" format="enum" enum="d1e80409"
                id="SystemControl@SCB-CCR@NONBASETHRDENA"
                offset="[0]"/>
         <field description="Enables unprivileged software access to the STIR" format="enum"
                enum="d1e80455"
                id="SystemControl@SCB-CCR@USERSETMPEND"
                offset="[1]"/>
         <field description="Enables unaligned access traps" format="enum" enum="d1e80501"
                id="SystemControl@SCB-CCR@UNALIGN-TRP"
                offset="[3]"/>
         <field description="Enables faulting or halting when the processor executes an SDIV or UDIV instruction with a divisor of 0"
                format="enum"
                enum="d1e80547"
                id="SystemControl@SCB-CCR@DIV-0-TRP"
                offset="[4]"/>
         <field description="Enables handlers with priority -1 or -2 to ignore data BusFaults caused by load and store instructions."
                format="enum"
                enum="d1e80593"
                id="SystemControl@SCB-CCR@BFHFNMIGN"
                offset="[8]"/>
         <field description="Indicates stack alignment on exception entry" format="enum"
                enum="d1e80640"
                id="SystemControl@SCB-CCR@STKALIGN"
                offset="[9]"/>
      </register>
      <register description="System Handler Priority Register 1" format="hex0x"
                id="SystemControl@SCB-SHPR1"
                offset="0xd18"
                size="4">
         <field description="Priority of system handler 4, MemManage" format="hex0x"
                id="SystemControl@SCB-SHPR1@PRI-4"
                offset="[7:0]"/>
         <field description="Priority of system handler 5, BusFault" format="hex0x"
                id="SystemControl@SCB-SHPR1@PRI-5"
                offset="[15:8]"/>
         <field description="Priority of system handler 6, UsageFault" format="hex0x"
                id="SystemControl@SCB-SHPR1@PRI-6"
                offset="[23:16]"/>
      </register>
      <register description="System Handler Priority Register 2" format="hex0x"
                id="SystemControl@SCB-SHPR2"
                offset="0xd1c"
                size="4">
         <field description="Priority of system handler 11, SVCall" format="hex0x"
                id="SystemControl@SCB-SHPR2@PRI-11"
                offset="[31:24]"/>
      </register>
      <register description="System Handler Priority Register 3" format="hex0x"
                id="SystemControl@SCB-SHPR3"
                offset="0xd20"
                size="4">
         <field description="Priority of system handler 14, PendSV" format="hex0x"
                id="SystemControl@SCB-SHPR3@PRI-14"
                offset="[23:16]"/>
         <field description="Priority of system handler 15, SysTick exception" format="hex0x"
                id="SystemControl@SCB-SHPR3@PRI-15"
                offset="[31:24]"/>
      </register>
      <register description="System Handler Control and State Register" format="hex0x"
                id="SystemControl@SCB-SHCSR"
                offset="0xd24"
                size="4">
         <field description="no description available" format="enum" enum="d1e80906"
                id="SystemControl@SCB-SHCSR@MEMFAULTACT"
                offset="[0]"/>
         <field description="no description available" format="enum" enum="d1e80952"
                id="SystemControl@SCB-SHCSR@BUSFAULTACT"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e80998"
                id="SystemControl@SCB-SHCSR@USGFAULTACT"
                offset="[3]"/>
         <field description="no description available" format="enum" enum="d1e81044"
                id="SystemControl@SCB-SHCSR@SVCALLACT"
                offset="[7]"/>
         <field description="no description available" format="enum" enum="d1e81090"
                id="SystemControl@SCB-SHCSR@MONITORACT"
                offset="[8]"/>
         <field description="no description available" format="enum" enum="d1e81137"
                id="SystemControl@SCB-SHCSR@PENDSVACT"
                offset="[10]"/>
         <field description="no description available" format="enum" enum="d1e81183"
                id="SystemControl@SCB-SHCSR@SYSTICKACT"
                offset="[11]"/>
         <field description="no description available" format="enum" enum="d1e81229"
                id="SystemControl@SCB-SHCSR@USGFAULTPENDED"
                offset="[12]"/>
         <field description="no description available" format="enum" enum="d1e81275"
                id="SystemControl@SCB-SHCSR@MEMFAULTPENDED"
                offset="[13]"/>
         <field description="no description available" format="enum" enum="d1e81321"
                id="SystemControl@SCB-SHCSR@BUSFAULTPENDED"
                offset="[14]"/>
         <field description="no description available" format="enum" enum="d1e81367"
                id="SystemControl@SCB-SHCSR@SVCALLPENDED"
                offset="[15]"/>
         <field description="no description available" format="enum" enum="d1e81414"
                id="SystemControl@SCB-SHCSR@MEMFAULTENA"
                offset="[16]"/>
         <field description="no description available" format="enum" enum="d1e81460"
                id="SystemControl@SCB-SHCSR@BUSFAULTENA"
                offset="[17]"/>
         <field description="no description available" format="enum" enum="d1e81506"
                id="SystemControl@SCB-SHCSR@USGFAULTENA"
                offset="[18]"/>
      </register>
      <register description="Configurable Fault Status Registers" format="hex0x"
                id="SystemControl@SCB-CFSR"
                offset="0xd28"
                size="4">
         <field description="no description available" format="enum" enum="d1e81581"
                id="SystemControl@SCB-CFSR@IACCVIOL"
                offset="[0]"/>
         <field description="no description available" format="enum" enum="d1e81627"
                id="SystemControl@SCB-CFSR@DACCVIOL"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e81673"
                id="SystemControl@SCB-CFSR@MUNSTKERR"
                offset="[3]"/>
         <field description="no description available" format="enum" enum="d1e81719"
                id="SystemControl@SCB-CFSR@MSTKERR"
                offset="[4]"/>
         <field description="no description available" format="enum" enum="d1e81765"
                id="SystemControl@SCB-CFSR@MLSPERR"
                offset="[5]"/>
         <field description="no description available" format="enum" enum="d1e81812"
                id="SystemControl@SCB-CFSR@MMARVALID"
                offset="[7]"/>
         <field description="no description available" format="enum" enum="d1e81858"
                id="SystemControl@SCB-CFSR@IBUSERR"
                offset="[8]"/>
         <field description="no description available" format="enum" enum="d1e81904"
                id="SystemControl@SCB-CFSR@PRECISERR"
                offset="[9]"/>
         <field description="no description available" format="enum" enum="d1e81950"
                id="SystemControl@SCB-CFSR@IMPRECISERR"
                offset="[10]"/>
         <field description="no description available" format="enum" enum="d1e81996"
                id="SystemControl@SCB-CFSR@UNSTKERR"
                offset="[11]"/>
         <field description="no description available" format="enum" enum="d1e82042"
                id="SystemControl@SCB-CFSR@STKERR"
                offset="[12]"/>
         <field description="no description available" format="enum" enum="d1e82089"
                id="SystemControl@SCB-CFSR@LSPERR"
                offset="[13]"/>
         <field description="no description available" format="enum" enum="d1e82135"
                id="SystemControl@SCB-CFSR@BFARVALID"
                offset="[15]"/>
         <field description="no description available" format="enum" enum="d1e82181"
                id="SystemControl@SCB-CFSR@UNDEFINSTR"
                offset="[16]"/>
         <field description="no description available" format="enum" enum="d1e82227"
                id="SystemControl@SCB-CFSR@INVSTATE"
                offset="[17]"/>
         <field description="no description available" format="enum" enum="d1e82273"
                id="SystemControl@SCB-CFSR@INVPC"
                offset="[18]"/>
         <field description="no description available" format="enum" enum="d1e82319"
                id="SystemControl@SCB-CFSR@NOCP"
                offset="[19]"/>
         <field description="no description available" format="enum" enum="d1e82366"
                id="SystemControl@SCB-CFSR@UNALIGNED"
                offset="[24]"/>
         <field description="no description available" format="enum" enum="d1e82412"
                id="SystemControl@SCB-CFSR@DIVBYZERO"
                offset="[25]"/>
      </register>
      <register description="HardFault Status register" format="hex0x"
                id="SystemControl@SCB-HFSR"
                offset="0xd2c"
                size="4">
         <field description="no description available" format="enum" enum="d1e82486"
                id="SystemControl@SCB-HFSR@VECTTBL"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e82532"
                id="SystemControl@SCB-HFSR@FORCED"
                offset="[30]"/>
         <field description="no description available" format="hex0x"
                id="SystemControl@SCB-HFSR@DEBUGEVT"
                offset="[31]"/>
      </register>
      <register description="Debug Fault Status Register" format="hex0x"
                id="SystemControl@SCB-DFSR"
                offset="0xd30"
                size="4">
         <field description="no description available" format="enum" enum="d1e82624"
                id="SystemControl@SCB-DFSR@HALTED"
                offset="[0]"/>
         <field description="no description available" format="enum" enum="d1e82670"
                id="SystemControl@SCB-DFSR@BKPT"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e82716"
                id="SystemControl@SCB-DFSR@DWTTRAP"
                offset="[2]"/>
         <field description="no description available" format="enum" enum="d1e82762"
                id="SystemControl@SCB-DFSR@VCATCH"
                offset="[3]"/>
         <field description="no description available" format="enum" enum="d1e82808"
                id="SystemControl@SCB-DFSR@EXTERNAL"
                offset="[4]"/>
      </register>
      <register description="MemManage Address Register" format="hex0x"
                id="SystemControl@SCB-MMFAR"
                offset="0xd34"
                size="4">
         <field description="Address of MemManage fault location" format="hex0x"
                id="SystemControl@SCB-MMFAR@ADDRESS"
                offset="[31:0]"/>
      </register>
      <register description="BusFault Address Register" format="hex0x"
                id="SystemControl@SCB-BFAR"
                offset="0xd38"
                size="4">
         <field description="Address of the BusFault location" format="hex0x"
                id="SystemControl@SCB-BFAR@ADDRESS"
                offset="[31:0]"/>
      </register>
      <register description="Auxiliary Fault Status Register" format="hex0x"
                id="SystemControl@SCB-AFSR"
                offset="0xd3c"
                size="4">
         <field description="Latched version of the AUXFAULT inputs" format="hex0x"
                id="SystemControl@SCB-AFSR@AUXFAULT"
                offset="[31:0]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="System timer" id="SysTick" size="0x10">
      <register description="SysTick Control and Status Register" format="hex0x"
                id="SysTick@SYST-CSR"
                offset="0x0"
                size="4">
         <field description="no description available" format="enum" enum="d1e83054"
                id="SysTick@SYST-CSR@ENABLE"
                offset="[0]"/>
         <field description="no description available" format="enum" enum="d1e83100"
                id="SysTick@SYST-CSR@TICKINT"
                offset="[1]"/>
         <field description="no description available" format="enum" enum="d1e83146"
                id="SysTick@SYST-CSR@CLKSOURCE"
                offset="[2]"/>
         <field description="no description available" format="hex0x"
                id="SysTick@SYST-CSR@COUNTFLAG"
                offset="[16]"/>
      </register>
      <register description="SysTick Reload Value Register" format="hex0x"
                id="SysTick@SYST-RVR"
                offset="0x4"
                size="4">
         <field description="Value to load into the SysTick Current Value Register when the counter reaches 0"
                format="hex0x"
                id="SysTick@SYST-RVR@RELOAD"
                offset="[23:0]"/>
      </register>
      <register description="SysTick Current Value Register" format="hex0x"
                id="SysTick@SYST-CVR"
                offset="0x8"
                size="4">
         <field description="Current value at the time the register is accessed" format="hex0x"
                id="SysTick@SYST-CVR@CURRENT"
                offset="[23:0]"/>
      </register>
      <register description="SysTick Calibration Value Register" format="hex0x"
                id="SysTick@SYST-CALIB"
                offset="0xc"
                readOnly="true"
                size="4">
         <field description="Reload value to use for 10ms timing" format="hex0x"
                id="SysTick@SYST-CALIB@TENMS"
                offset="[23:0]"/>
         <field description="no description available" format="enum" enum="d1e83348"
                id="SysTick@SYST-CALIB@SKEW"
                offset="[30]"/>
         <field description="no description available" format="enum" enum="d1e83394"
                id="SysTick@SYST-CALIB@NOREF"
                offset="[31]"/>
      </register>
   </peripheral>
   <peripheral defRegSize="4" description="Nested Vectored Interrupt Controller" id="NVIC"
               size="0xe04">
      <register description="Interrupt Set Enable Register n" format="hex0x"
                id="NVIC@NVICISER0"
                offset="0x0"
                size="4">
         <field description="Interrupt set enable bits" format="hex0x"
                id="NVIC@NVICISER0@SETENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Set Enable Register n" format="hex0x"
                id="NVIC@NVICISER1"
                offset="0x4"
                size="4">
         <field description="Interrupt set enable bits" format="hex0x"
                id="NVIC@NVICISER1@SETENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Set Enable Register n" format="hex0x"
                id="NVIC@NVICISER2"
                offset="0x8"
                size="4">
         <field description="Interrupt set enable bits" format="hex0x"
                id="NVIC@NVICISER2@SETENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Set Enable Register n" format="hex0x"
                id="NVIC@NVICISER3"
                offset="0xc"
                size="4">
         <field description="Interrupt set enable bits" format="hex0x"
                id="NVIC@NVICISER3@SETENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Enable Register n" format="hex0x"
                id="NVIC@NVICICER0"
                offset="0x80"
                size="4">
         <field description="Interrupt clear-enable bits" format="hex0x"
                id="NVIC@NVICICER0@CLRENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Enable Register n" format="hex0x"
                id="NVIC@NVICICER1"
                offset="0x84"
                size="4">
         <field description="Interrupt clear-enable bits" format="hex0x"
                id="NVIC@NVICICER1@CLRENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Enable Register n" format="hex0x"
                id="NVIC@NVICICER2"
                offset="0x88"
                size="4">
         <field description="Interrupt clear-enable bits" format="hex0x"
                id="NVIC@NVICICER2@CLRENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Enable Register n" format="hex0x"
                id="NVIC@NVICICER3"
                offset="0x8c"
                size="4">
         <field description="Interrupt clear-enable bits" format="hex0x"
                id="NVIC@NVICICER3@CLRENA"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Set Pending Register n" format="hex0x"
                id="NVIC@NVICISPR0"
                offset="0x100"
                size="4">
         <field description="Interrupt set-pending bits" format="hex0x"
                id="NVIC@NVICISPR0@SETPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Set Pending Register n" format="hex0x"
                id="NVIC@NVICISPR1"
                offset="0x104"
                size="4">
         <field description="Interrupt set-pending bits" format="hex0x"
                id="NVIC@NVICISPR1@SETPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Set Pending Register n" format="hex0x"
                id="NVIC@NVICISPR2"
                offset="0x108"
                size="4">
         <field description="Interrupt set-pending bits" format="hex0x"
                id="NVIC@NVICISPR2@SETPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Set Pending Register n" format="hex0x"
                id="NVIC@NVICISPR3"
                offset="0x10c"
                size="4">
         <field description="Interrupt set-pending bits" format="hex0x"
                id="NVIC@NVICISPR3@SETPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Pending Register n" format="hex0x"
                id="NVIC@NVICICPR0"
                offset="0x180"
                size="4">
         <field description="Interrupt clear-pending bits" format="hex0x"
                id="NVIC@NVICICPR0@CLRPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Pending Register n" format="hex0x"
                id="NVIC@NVICICPR1"
                offset="0x184"
                size="4">
         <field description="Interrupt clear-pending bits" format="hex0x"
                id="NVIC@NVICICPR1@CLRPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Pending Register n" format="hex0x"
                id="NVIC@NVICICPR2"
                offset="0x188"
                size="4">
         <field description="Interrupt clear-pending bits" format="hex0x"
                id="NVIC@NVICICPR2@CLRPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Clear Pending Register n" format="hex0x"
                id="NVIC@NVICICPR3"
                offset="0x18c"
                size="4">
         <field description="Interrupt clear-pending bits" format="hex0x"
                id="NVIC@NVICICPR3@CLRPEND"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Active bit Register n" format="hex0x"
                id="NVIC@NVICIABR0"
                offset="0x200"
                size="4">
         <field description="Interrupt active flags" format="hex0x" id="NVIC@NVICIABR0@ACTIVE"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Active bit Register n" format="hex0x"
                id="NVIC@NVICIABR1"
                offset="0x204"
                size="4">
         <field description="Interrupt active flags" format="hex0x" id="NVIC@NVICIABR1@ACTIVE"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Active bit Register n" format="hex0x"
                id="NVIC@NVICIABR2"
                offset="0x208"
                size="4">
         <field description="Interrupt active flags" format="hex0x" id="NVIC@NVICIABR2@ACTIVE"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Active bit Register n" format="hex0x"
                id="NVIC@NVICIABR3"
                offset="0x20c"
                size="4">
         <field description="Interrupt active flags" format="hex0x" id="NVIC@NVICIABR3@ACTIVE"
                offset="[31:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP0"
                offset="0x300"
                size="1">
         <field description="Priority of interrupt 0" format="hex0x" id="NVIC@NVICIP0@PRI0"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP1"
                offset="0x301"
                size="1">
         <field description="Priority of interrupt 1" format="hex0x" id="NVIC@NVICIP1@PRI1"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP2"
                offset="0x302"
                size="1">
         <field description="Priority of interrupt 2" format="hex0x" id="NVIC@NVICIP2@PRI2"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP3"
                offset="0x303"
                size="1">
         <field description="Priority of interrupt 3" format="hex0x" id="NVIC@NVICIP3@PRI3"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP4"
                offset="0x304"
                size="1">
         <field description="Priority of interrupt 4" format="hex0x" id="NVIC@NVICIP4@PRI4"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP5"
                offset="0x305"
                size="1">
         <field description="Priority of interrupt 5" format="hex0x" id="NVIC@NVICIP5@PRI5"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP6"
                offset="0x306"
                size="1">
         <field description="Priority of interrupt 6" format="hex0x" id="NVIC@NVICIP6@PRI6"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP7"
                offset="0x307"
                size="1">
         <field description="Priority of interrupt 7" format="hex0x" id="NVIC@NVICIP7@PRI7"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP8"
                offset="0x308"
                size="1">
         <field description="Priority of interrupt 8" format="hex0x" id="NVIC@NVICIP8@PRI8"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP9"
                offset="0x309"
                size="1">
         <field description="Priority of interrupt 9" format="hex0x" id="NVIC@NVICIP9@PRI9"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP10"
                offset="0x30a"
                size="1">
         <field description="Priority of interrupt 10" format="hex0x" id="NVIC@NVICIP10@PRI10"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP11"
                offset="0x30b"
                size="1">
         <field description="Priority of interrupt 11" format="hex0x" id="NVIC@NVICIP11@PRI11"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP12"
                offset="0x30c"
                size="1">
         <field description="Priority of interrupt 12" format="hex0x" id="NVIC@NVICIP12@PRI12"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP13"
                offset="0x30d"
                size="1">
         <field description="Priority of interrupt 13" format="hex0x" id="NVIC@NVICIP13@PRI13"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP14"
                offset="0x30e"
                size="1">
         <field description="Priority of interrupt 14" format="hex0x" id="NVIC@NVICIP14@PRI14"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP15"
                offset="0x30f"
                size="1">
         <field description="Priority of interrupt 15" format="hex0x" id="NVIC@NVICIP15@PRI15"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP16"
                offset="0x310"
                size="1">
         <field description="Priority of interrupt 16" format="hex0x" id="NVIC@NVICIP16@PRI16"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP17"
                offset="0x311"
                size="1">
         <field description="Priority of interrupt 17" format="hex0x" id="NVIC@NVICIP17@PRI17"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP18"
                offset="0x312"
                size="1">
         <field description="Priority of interrupt 18" format="hex0x" id="NVIC@NVICIP18@PRI18"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP19"
                offset="0x313"
                size="1">
         <field description="Priority of interrupt 19" format="hex0x" id="NVIC@NVICIP19@PRI19"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP20"
                offset="0x314"
                size="1">
         <field description="Priority of interrupt 20" format="hex0x" id="NVIC@NVICIP20@PRI20"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP21"
                offset="0x315"
                size="1">
         <field description="Priority of interrupt 21" format="hex0x" id="NVIC@NVICIP21@PRI21"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP22"
                offset="0x316"
                size="1">
         <field description="Priority of interrupt 22" format="hex0x" id="NVIC@NVICIP22@PRI22"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP23"
                offset="0x317"
                size="1">
         <field description="Priority of interrupt 23" format="hex0x" id="NVIC@NVICIP23@PRI23"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP24"
                offset="0x318"
                size="1">
         <field description="Priority of interrupt 24" format="hex0x" id="NVIC@NVICIP24@PRI24"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP25"
                offset="0x319"
                size="1">
         <field description="Priority of interrupt 25" format="hex0x" id="NVIC@NVICIP25@PRI25"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP26"
                offset="0x31a"
                size="1">
         <field description="Priority of interrupt 26" format="hex0x" id="NVIC@NVICIP26@PRI26"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP27"
                offset="0x31b"
                size="1">
         <field description="Priority of interrupt 27" format="hex0x" id="NVIC@NVICIP27@PRI27"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP28"
                offset="0x31c"
                size="1">
         <field description="Priority of interrupt 28" format="hex0x" id="NVIC@NVICIP28@PRI28"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP29"
                offset="0x31d"
                size="1">
         <field description="Priority of interrupt 29" format="hex0x" id="NVIC@NVICIP29@PRI29"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP30"
                offset="0x31e"
                size="1">
         <field description="Priority of interrupt 30" format="hex0x" id="NVIC@NVICIP30@PRI30"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP31"
                offset="0x31f"
                size="1">
         <field description="Priority of interrupt 31" format="hex0x" id="NVIC@NVICIP31@PRI31"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP32"
                offset="0x320"
                size="1">
         <field description="Priority of interrupt 32" format="hex0x" id="NVIC@NVICIP32@PRI32"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP33"
                offset="0x321"
                size="1">
         <field description="Priority of interrupt 33" format="hex0x" id="NVIC@NVICIP33@PRI33"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP34"
                offset="0x322"
                size="1">
         <field description="Priority of interrupt 34" format="hex0x" id="NVIC@NVICIP34@PRI34"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP35"
                offset="0x323"
                size="1">
         <field description="Priority of interrupt 35" format="hex0x" id="NVIC@NVICIP35@PRI35"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP36"
                offset="0x324"
                size="1">
         <field description="Priority of interrupt 36" format="hex0x" id="NVIC@NVICIP36@PRI36"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP37"
                offset="0x325"
                size="1">
         <field description="Priority of interrupt 37" format="hex0x" id="NVIC@NVICIP37@PRI37"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP38"
                offset="0x326"
                size="1">
         <field description="Priority of interrupt 38" format="hex0x" id="NVIC@NVICIP38@PRI38"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP39"
                offset="0x327"
                size="1">
         <field description="Priority of interrupt 39" format="hex0x" id="NVIC@NVICIP39@PRI39"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP40"
                offset="0x328"
                size="1">
         <field description="Priority of interrupt 40" format="hex0x" id="NVIC@NVICIP40@PRI40"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP41"
                offset="0x329"
                size="1">
         <field description="Priority of interrupt 41" format="hex0x" id="NVIC@NVICIP41@PRI41"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP42"
                offset="0x32a"
                size="1">
         <field description="Priority of interrupt 42" format="hex0x" id="NVIC@NVICIP42@PRI42"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP43"
                offset="0x32b"
                size="1">
         <field description="Priority of interrupt 43" format="hex0x" id="NVIC@NVICIP43@PRI43"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP44"
                offset="0x32c"
                size="1">
         <field description="Priority of interrupt 44" format="hex0x" id="NVIC@NVICIP44@PRI44"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP45"
                offset="0x32d"
                size="1">
         <field description="Priority of interrupt 45" format="hex0x" id="NVIC@NVICIP45@PRI45"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP46"
                offset="0x32e"
                size="1">
         <field description="Priority of interrupt 46" format="hex0x" id="NVIC@NVICIP46@PRI46"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP47"
                offset="0x32f"
                size="1">
         <field description="Priority of interrupt 47" format="hex0x" id="NVIC@NVICIP47@PRI47"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP48"
                offset="0x330"
                size="1">
         <field description="Priority of interrupt 48" format="hex0x" id="NVIC@NVICIP48@PRI48"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP49"
                offset="0x331"
                size="1">
         <field description="Priority of interrupt 49" format="hex0x" id="NVIC@NVICIP49@PRI49"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP50"
                offset="0x332"
                size="1">
         <field description="Priority of interrupt 50" format="hex0x" id="NVIC@NVICIP50@PRI50"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP51"
                offset="0x333"
                size="1">
         <field description="Priority of interrupt 51" format="hex0x" id="NVIC@NVICIP51@PRI51"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP52"
                offset="0x334"
                size="1">
         <field description="Priority of interrupt 52" format="hex0x" id="NVIC@NVICIP52@PRI52"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP53"
                offset="0x335"
                size="1">
         <field description="Priority of interrupt 53" format="hex0x" id="NVIC@NVICIP53@PRI53"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP54"
                offset="0x336"
                size="1">
         <field description="Priority of interrupt 54" format="hex0x" id="NVIC@NVICIP54@PRI54"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP55"
                offset="0x337"
                size="1">
         <field description="Priority of interrupt 55" format="hex0x" id="NVIC@NVICIP55@PRI55"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP56"
                offset="0x338"
                size="1">
         <field description="Priority of interrupt 56" format="hex0x" id="NVIC@NVICIP56@PRI56"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP57"
                offset="0x339"
                size="1">
         <field description="Priority of interrupt 57" format="hex0x" id="NVIC@NVICIP57@PRI57"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP58"
                offset="0x33a"
                size="1">
         <field description="Priority of interrupt 58" format="hex0x" id="NVIC@NVICIP58@PRI58"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP59"
                offset="0x33b"
                size="1">
         <field description="Priority of interrupt 59" format="hex0x" id="NVIC@NVICIP59@PRI59"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP60"
                offset="0x33c"
                size="1">
         <field description="Priority of interrupt 60" format="hex0x" id="NVIC@NVICIP60@PRI60"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP61"
                offset="0x33d"
                size="1">
         <field description="Priority of interrupt 61" format="hex0x" id="NVIC@NVICIP61@PRI61"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP62"
                offset="0x33e"
                size="1">
         <field description="Priority of interrupt 62" format="hex0x" id="NVIC@NVICIP62@PRI62"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP63"
                offset="0x33f"
                size="1">
         <field description="Priority of interrupt 63" format="hex0x" id="NVIC@NVICIP63@PRI63"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP64"
                offset="0x340"
                size="1">
         <field description="Priority of interrupt 64" format="hex0x" id="NVIC@NVICIP64@PRI64"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP65"
                offset="0x341"
                size="1">
         <field description="Priority of interrupt 65" format="hex0x" id="NVIC@NVICIP65@PRI65"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP66"
                offset="0x342"
                size="1">
         <field description="Priority of interrupt 66" format="hex0x" id="NVIC@NVICIP66@PRI66"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP67"
                offset="0x343"
                size="1">
         <field description="Priority of interrupt 67" format="hex0x" id="NVIC@NVICIP67@PRI67"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP68"
                offset="0x344"
                size="1">
         <field description="Priority of interrupt 68" format="hex0x" id="NVIC@NVICIP68@PRI68"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP69"
                offset="0x345"
                size="1">
         <field description="Priority of interrupt 69" format="hex0x" id="NVIC@NVICIP69@PRI69"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP70"
                offset="0x346"
                size="1">
         <field description="Priority of interrupt 70" format="hex0x" id="NVIC@NVICIP70@PRI70"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP71"
                offset="0x347"
                size="1">
         <field description="Priority of interrupt 71" format="hex0x" id="NVIC@NVICIP71@PRI71"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP72"
                offset="0x348"
                size="1">
         <field description="Priority of interrupt 72" format="hex0x" id="NVIC@NVICIP72@PRI72"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP73"
                offset="0x349"
                size="1">
         <field description="Priority of interrupt 73" format="hex0x" id="NVIC@NVICIP73@PRI73"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP74"
                offset="0x34a"
                size="1">
         <field description="Priority of interrupt 74" format="hex0x" id="NVIC@NVICIP74@PRI74"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP75"
                offset="0x34b"
                size="1">
         <field description="Priority of interrupt 75" format="hex0x" id="NVIC@NVICIP75@PRI75"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP76"
                offset="0x34c"
                size="1">
         <field description="Priority of interrupt 76" format="hex0x" id="NVIC@NVICIP76@PRI76"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP77"
                offset="0x34d"
                size="1">
         <field description="Priority of interrupt 77" format="hex0x" id="NVIC@NVICIP77@PRI77"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP78"
                offset="0x34e"
                size="1">
         <field description="Priority of interrupt 78" format="hex0x" id="NVIC@NVICIP78@PRI78"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP79"
                offset="0x34f"
                size="1">
         <field description="Priority of interrupt 79" format="hex0x" id="NVIC@NVICIP79@PRI79"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP80"
                offset="0x350"
                size="1">
         <field description="Priority of interrupt 80" format="hex0x" id="NVIC@NVICIP80@PRI80"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP81"
                offset="0x351"
                size="1">
         <field description="Priority of interrupt 81" format="hex0x" id="NVIC@NVICIP81@PRI81"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP82"
                offset="0x352"
                size="1">
         <field description="Priority of interrupt 82" format="hex0x" id="NVIC@NVICIP82@PRI82"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP83"
                offset="0x353"
                size="1">
         <field description="Priority of interrupt 83" format="hex0x" id="NVIC@NVICIP83@PRI83"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP84"
                offset="0x354"
                size="1">
         <field description="Priority of interrupt 84" format="hex0x" id="NVIC@NVICIP84@PRI84"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP85"
                offset="0x355"
                size="1">
         <field description="Priority of interrupt 85" format="hex0x" id="NVIC@NVICIP85@PRI85"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP86"
                offset="0x356"
                size="1">
         <field description="Priority of interrupt 86" format="hex0x" id="NVIC@NVICIP86@PRI86"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP87"
                offset="0x357"
                size="1">
         <field description="Priority of interrupt 87" format="hex0x" id="NVIC@NVICIP87@PRI87"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP88"
                offset="0x358"
                size="1">
         <field description="Priority of interrupt 88" format="hex0x" id="NVIC@NVICIP88@PRI88"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP89"
                offset="0x359"
                size="1">
         <field description="Priority of interrupt 89" format="hex0x" id="NVIC@NVICIP89@PRI89"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP90"
                offset="0x35a"
                size="1">
         <field description="Priority of interrupt 90" format="hex0x" id="NVIC@NVICIP90@PRI90"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP91"
                offset="0x35b"
                size="1">
         <field description="Priority of interrupt 91" format="hex0x" id="NVIC@NVICIP91@PRI91"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP92"
                offset="0x35c"
                size="1">
         <field description="Priority of interrupt 92" format="hex0x" id="NVIC@NVICIP92@PRI92"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP93"
                offset="0x35d"
                size="1">
         <field description="Priority of interrupt 93" format="hex0x" id="NVIC@NVICIP93@PRI93"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP94"
                offset="0x35e"
                size="1">
         <field description="Priority of interrupt 94" format="hex0x" id="NVIC@NVICIP94@PRI94"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP95"
                offset="0x35f"
                size="1">
         <field description="Priority of interrupt 95" format="hex0x" id="NVIC@NVICIP95@PRI95"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP96"
                offset="0x360"
                size="1">
         <field description="Priority of interrupt 96" format="hex0x" id="NVIC@NVICIP96@PRI96"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP97"
                offset="0x361"
                size="1">
         <field description="Priority of interrupt 97" format="hex0x" id="NVIC@NVICIP97@PRI97"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP98"
                offset="0x362"
                size="1">
         <field description="Priority of interrupt 98" format="hex0x" id="NVIC@NVICIP98@PRI98"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP99"
                offset="0x363"
                size="1">
         <field description="Priority of interrupt 99" format="hex0x" id="NVIC@NVICIP99@PRI99"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP100"
                offset="0x364"
                size="1">
         <field description="Priority of interrupt 100" format="hex0x"
                id="NVIC@NVICIP100@PRI100"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP101"
                offset="0x365"
                size="1">
         <field description="Priority of interrupt 101" format="hex0x"
                id="NVIC@NVICIP101@PRI101"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP102"
                offset="0x366"
                size="1">
         <field description="Priority of interrupt 102" format="hex0x"
                id="NVIC@NVICIP102@PRI102"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP103"
                offset="0x367"
                size="1">
         <field description="Priority of interrupt 103" format="hex0x"
                id="NVIC@NVICIP103@PRI103"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP104"
                offset="0x368"
                size="1">
         <field description="Priority of interrupt 104" format="hex0x"
                id="NVIC@NVICIP104@PRI104"
                offset="[7:0]"/>
      </register>
      <register description="Interrupt Priority Register n" format="hex0x" id="NVIC@NVICIP105"
                offset="0x369"
                size="1">
         <field description="Priority of interrupt 105" format="hex0x"
                id="NVIC@NVICIP105@PRI105"
                offset="[7:0]"/>
      </register>
      <register description="Software Trigger Interrupt Register" format="hex0x"
                id="NVIC@NVICSTIR"
                offset="0xe00"
                size="4">
         <field description="Interrupt ID of the interrupt to trigger, in the range 0-239. For example, a value of 0x03 specifies interrupt IRQ3."
                format="hex0x"
                id="NVIC@NVICSTIR@INTID"
                offset="[8:0]"/>
      </register>
   </peripheral>
</System>